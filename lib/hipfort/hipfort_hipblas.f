!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! ==============================================================================
! hipfort: FORTRAN Interfaces for GPU kernels
! ==============================================================================
! Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
! [MITx11 License]
! 
! Permission is hereby granted, free of charge, to any person obtaining a copy
! of this software and associated documentation files (the "Software"), to deal
! in the Software without restriction, including without limitation the rights
! to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
! copies of the Software, and to permit persons to whom the Software is
! furnished to do so, subject to the following conditions:
! 
! The above copyright notice and this permission notice shall be included in
! all copies or substantial portions of the Software.
! 
! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
! FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
! AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
! LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
! OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
! THE SOFTWARE.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
          
           
module hipfort_hipblas
  use hipfort_hipblas_enums
  use hipfort_hipblas_auxiliary
  implicit none

 
  
  interface hipblasCreate
#ifdef USE_CUDA_NAMES
    function hipblasCreate_orig(handle) bind(c, name="cublasCreate_v2")
#else
    function hipblasCreate_orig(handle) bind(c, name="hipblasCreate")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCreate_orig
      type(c_ptr) :: handle
    end function


  end interface
  
  interface hipblasDestroy
#ifdef USE_CUDA_NAMES
    function hipblasDestroy_orig(handle) bind(c, name="cublasDestroy_v2")
#else
    function hipblasDestroy_orig(handle) bind(c, name="hipblasDestroy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDestroy_orig
      type(c_ptr),value :: handle
    end function


  end interface
  
  interface hipblasSetStream
#ifdef USE_CUDA_NAMES
    function hipblasSetStream_orig(handle,streamId) bind(c, name="cublasSetStream_v2")
#else
    function hipblasSetStream_orig(handle,streamId) bind(c, name="hipblasSetStream")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSetStream_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: streamId
    end function


  end interface
  
  interface hipblasGetStream
#ifdef USE_CUDA_NAMES
    function hipblasGetStream_orig(handle,streamId) bind(c, name="cublasGetStream_v2")
#else
    function hipblasGetStream_orig(handle,streamId) bind(c, name="hipblasGetStream")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasGetStream_orig
      type(c_ptr),value :: handle
      type(c_ptr) :: streamId
    end function


  end interface
  
  interface hipblasSetPointerMode
#ifdef USE_CUDA_NAMES
    function hipblasSetPointerMode_orig(handle,mode) bind(c, name="cublasSetPointerMode_v2")
#else
    function hipblasSetPointerMode_orig(handle,mode) bind(c, name="hipblasSetPointerMode")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSetPointerMode_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_POINTER_MODE_HOST)),value :: mode
    end function


  end interface
  
  interface hipblasGetPointerMode
#ifdef USE_CUDA_NAMES
    function hipblasGetPointerMode_orig(handle,mode) bind(c, name="cublasGetPointerMode_v2")
#else
    function hipblasGetPointerMode_orig(handle,mode) bind(c, name="hipblasGetPointerMode")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasGetPointerMode_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: mode
    end function


  end interface
  
  interface hipblasSetAtomicsMode
#ifdef USE_CUDA_NAMES
    function hipblasSetAtomicsMode_orig(handle,atomics_mode) bind(c, name="cublasSetAtomicsMode")
#else
    function hipblasSetAtomicsMode_orig(handle,atomics_mode) bind(c, name="hipblasSetAtomicsMode")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSetAtomicsMode_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_ATOMICS_NOT_ALLOWED)),value :: atomics_mode
    end function


  end interface
  
  interface hipblasGetAtomicsMode
#ifdef USE_CUDA_NAMES
    function hipblasGetAtomicsMode_orig(handle,atomics_mode) bind(c, name="cublasGetAtomicsMode")
#else
    function hipblasGetAtomicsMode_orig(handle,atomics_mode) bind(c, name="hipblasGetAtomicsMode")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasGetAtomicsMode_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: atomics_mode
    end function


  end interface
  
  interface hipblasIsamax
#ifdef USE_CUDA_NAMES
    function hipblasIsamax_orig(handle,n,x,incx,myResult) bind(c, name="cublasIsamax_v2")
#else
    function hipblasIsamax_orig(handle,n,x,incx,myResult) bind(c, name="hipblasIsamax")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamax_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIsamax_rank_0,hipblasIsamax_rank_1
#endif

  end interface
  
  interface hipblasIdamax
#ifdef USE_CUDA_NAMES
    function hipblasIdamax_orig(handle,n,x,incx,myResult) bind(c, name="cublasIdamax_v2")
#else
    function hipblasIdamax_orig(handle,n,x,incx,myResult) bind(c, name="hipblasIdamax")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamax_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIdamax_rank_0,hipblasIdamax_rank_1
#endif

  end interface
  
  interface hipblasIcamax
#ifdef USE_CUDA_NAMES
    function hipblasIcamax_orig(handle,n,x,incx,myResult) bind(c, name="cublasIcamax_v2")
#else
    function hipblasIcamax_orig(handle,n,x,incx,myResult) bind(c, name="hipblasIcamax")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamax_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIcamax_rank_0,hipblasIcamax_rank_1
#endif

  end interface
  
  interface hipblasIzamax
#ifdef USE_CUDA_NAMES
    function hipblasIzamax_orig(handle,n,x,incx,myResult) bind(c, name="cublasIzamax_v2")
#else
    function hipblasIzamax_orig(handle,n,x,incx,myResult) bind(c, name="hipblasIzamax")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamax_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIzamax_rank_0,hipblasIzamax_rank_1
#endif

  end interface
  
  interface hipblasIsamaxBatched
#ifdef USE_CUDA_NAMES
    function hipblasIsamaxBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="cublasIsamaxBatched")
#else
    function hipblasIsamaxBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="hipblasIsamaxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamaxBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIsamaxBatched_full_rank,hipblasIsamaxBatched_rank_0,hipblasIsamaxBatched_rank_1
#endif

  end interface
  
  interface hipblasIdamaxBatched
#ifdef USE_CUDA_NAMES
    function hipblasIdamaxBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="cublasIdamaxBatched")
#else
    function hipblasIdamaxBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="hipblasIdamaxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamaxBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIdamaxBatched_full_rank,hipblasIdamaxBatched_rank_0,hipblasIdamaxBatched_rank_1
#endif

  end interface
  
  interface hipblasIcamaxBatched
#ifdef USE_CUDA_NAMES
    function hipblasIcamaxBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="cublasIcamaxBatched")
#else
    function hipblasIcamaxBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="hipblasIcamaxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamaxBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIcamaxBatched_full_rank,hipblasIcamaxBatched_rank_0,hipblasIcamaxBatched_rank_1
#endif

  end interface
  
  interface hipblasIzamaxBatched
#ifdef USE_CUDA_NAMES
    function hipblasIzamaxBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="cublasIzamaxBatched")
#else
    function hipblasIzamaxBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="hipblasIzamaxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamaxBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIzamaxBatched_full_rank,hipblasIzamaxBatched_rank_0,hipblasIzamaxBatched_rank_1
#endif

  end interface
  
  interface hipblasIsamaxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasIsamaxStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="cublasIsamaxStridedBatched")
#else
    function hipblasIsamaxStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="hipblasIsamaxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamaxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIsamaxStridedBatched_rank_0,hipblasIsamaxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasIdamaxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasIdamaxStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="cublasIdamaxStridedBatched")
#else
    function hipblasIdamaxStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="hipblasIdamaxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamaxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIdamaxStridedBatched_rank_0,hipblasIdamaxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasIcamaxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasIcamaxStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="cublasIcamaxStridedBatched")
#else
    function hipblasIcamaxStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="hipblasIcamaxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamaxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIcamaxStridedBatched_rank_0,hipblasIcamaxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasIzamaxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasIzamaxStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="cublasIzamaxStridedBatched")
#else
    function hipblasIzamaxStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="hipblasIzamaxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamaxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIzamaxStridedBatched_rank_0,hipblasIzamaxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasIsamin
#ifdef USE_CUDA_NAMES
    function hipblasIsamin_orig(handle,n,x,incx,myResult) bind(c, name="cublasIsamin_v2")
#else
    function hipblasIsamin_orig(handle,n,x,incx,myResult) bind(c, name="hipblasIsamin")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamin_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIsamin_rank_0,hipblasIsamin_rank_1
#endif

  end interface
  
  interface hipblasIdamin
#ifdef USE_CUDA_NAMES
    function hipblasIdamin_orig(handle,n,x,incx,myResult) bind(c, name="cublasIdamin_v2")
#else
    function hipblasIdamin_orig(handle,n,x,incx,myResult) bind(c, name="hipblasIdamin")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamin_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIdamin_rank_0,hipblasIdamin_rank_1
#endif

  end interface
  
  interface hipblasIcamin
#ifdef USE_CUDA_NAMES
    function hipblasIcamin_orig(handle,n,x,incx,myResult) bind(c, name="cublasIcamin_v2")
#else
    function hipblasIcamin_orig(handle,n,x,incx,myResult) bind(c, name="hipblasIcamin")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamin_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIcamin_rank_0,hipblasIcamin_rank_1
#endif

  end interface
  
  interface hipblasIzamin
#ifdef USE_CUDA_NAMES
    function hipblasIzamin_orig(handle,n,x,incx,myResult) bind(c, name="cublasIzamin_v2")
#else
    function hipblasIzamin_orig(handle,n,x,incx,myResult) bind(c, name="hipblasIzamin")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamin_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIzamin_rank_0,hipblasIzamin_rank_1
#endif

  end interface
  
  interface hipblasIsaminBatched
#ifdef USE_CUDA_NAMES
    function hipblasIsaminBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="cublasIsaminBatched")
#else
    function hipblasIsaminBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="hipblasIsaminBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsaminBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIsaminBatched_full_rank,hipblasIsaminBatched_rank_0,hipblasIsaminBatched_rank_1
#endif

  end interface
  
  interface hipblasIdaminBatched
#ifdef USE_CUDA_NAMES
    function hipblasIdaminBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="cublasIdaminBatched")
#else
    function hipblasIdaminBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="hipblasIdaminBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdaminBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIdaminBatched_full_rank,hipblasIdaminBatched_rank_0,hipblasIdaminBatched_rank_1
#endif

  end interface
  
  interface hipblasIcaminBatched
#ifdef USE_CUDA_NAMES
    function hipblasIcaminBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="cublasIcaminBatched")
#else
    function hipblasIcaminBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="hipblasIcaminBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcaminBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIcaminBatched_full_rank,hipblasIcaminBatched_rank_0,hipblasIcaminBatched_rank_1
#endif

  end interface
  
  interface hipblasIzaminBatched
#ifdef USE_CUDA_NAMES
    function hipblasIzaminBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="cublasIzaminBatched")
#else
    function hipblasIzaminBatched_orig(handle,n,x,incx,batch_count,myResult) bind(c, name="hipblasIzaminBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzaminBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIzaminBatched_full_rank,hipblasIzaminBatched_rank_0,hipblasIzaminBatched_rank_1
#endif

  end interface
  
  interface hipblasIsaminStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasIsaminStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="cublasIsaminStridedBatched")
#else
    function hipblasIsaminStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="hipblasIsaminStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsaminStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIsaminStridedBatched_rank_0,hipblasIsaminStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasIdaminStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasIdaminStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="cublasIdaminStridedBatched")
#else
    function hipblasIdaminStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="hipblasIdaminStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdaminStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIdaminStridedBatched_rank_0,hipblasIdaminStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasIcaminStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasIcaminStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="cublasIcaminStridedBatched")
#else
    function hipblasIcaminStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="hipblasIcaminStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcaminStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIcaminStridedBatched_rank_0,hipblasIcaminStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasIzaminStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasIzaminStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="cublasIzaminStridedBatched")
#else
    function hipblasIzaminStridedBatched_orig(handle,n,x,incx,stridex,batch_count,myResult) bind(c, name="hipblasIzaminStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzaminStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasIzaminStridedBatched_rank_0,hipblasIzaminStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSasum
#ifdef USE_CUDA_NAMES
    function hipblasSasum_orig(handle,n,x,incx,myResult) bind(c, name="cublasSasum_v2")
#else
    function hipblasSasum_orig(handle,n,x,incx,myResult) bind(c, name="hipblasSasum")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasum_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSasum_rank_0,hipblasSasum_rank_1
#endif

  end interface
  
  interface hipblasDasum
#ifdef USE_CUDA_NAMES
    function hipblasDasum_orig(handle,n,x,incx,myResult) bind(c, name="cublasDasum_v2")
#else
    function hipblasDasum_orig(handle,n,x,incx,myResult) bind(c, name="hipblasDasum")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasum_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDasum_rank_0,hipblasDasum_rank_1
#endif

  end interface
  
  interface hipblasScasum
#ifdef USE_CUDA_NAMES
    function hipblasScasum_orig(handle,n,x,incx,myResult) bind(c, name="cublasScasum_v2")
#else
    function hipblasScasum_orig(handle,n,x,incx,myResult) bind(c, name="hipblasScasum")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasum_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScasum_rank_0,hipblasScasum_rank_1
#endif

  end interface
  
  interface hipblasDzasum
#ifdef USE_CUDA_NAMES
    function hipblasDzasum_orig(handle,n,x,incx,myResult) bind(c, name="cublasDzasum_v2")
#else
    function hipblasDzasum_orig(handle,n,x,incx,myResult) bind(c, name="hipblasDzasum")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasum_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDzasum_rank_0,hipblasDzasum_rank_1
#endif

  end interface
  
  interface hipblasSasumBatched
#ifdef USE_CUDA_NAMES
    function hipblasSasumBatched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="cublasSasumBatched")
#else
    function hipblasSasumBatched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="hipblasSasumBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasumBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSasumBatched_full_rank,hipblasSasumBatched_rank_0,hipblasSasumBatched_rank_1
#endif

  end interface
  
  interface hipblasDasumBatched
#ifdef USE_CUDA_NAMES
    function hipblasDasumBatched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="cublasDasumBatched")
#else
    function hipblasDasumBatched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="hipblasDasumBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasumBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDasumBatched_full_rank,hipblasDasumBatched_rank_0,hipblasDasumBatched_rank_1
#endif

  end interface
  
  interface hipblasScasumBatched
#ifdef USE_CUDA_NAMES
    function hipblasScasumBatched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="cublasScasumBatched")
#else
    function hipblasScasumBatched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="hipblasScasumBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasumBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScasumBatched_full_rank,hipblasScasumBatched_rank_0,hipblasScasumBatched_rank_1
#endif

  end interface
  
  interface hipblasDzasumBatched
#ifdef USE_CUDA_NAMES
    function hipblasDzasumBatched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="cublasDzasumBatched")
#else
    function hipblasDzasumBatched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="hipblasDzasumBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasumBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDzasumBatched_full_rank,hipblasDzasumBatched_rank_0,hipblasDzasumBatched_rank_1
#endif

  end interface
  
  interface hipblasSasumStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSasumStridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="cublasSasumStridedBatched")
#else
    function hipblasSasumStridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="hipblasSasumStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasumStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSasumStridedBatched_rank_0,hipblasSasumStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDasumStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDasumStridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="cublasDasumStridedBatched")
#else
    function hipblasDasumStridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="hipblasDasumStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasumStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDasumStridedBatched_rank_0,hipblasDasumStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasScasumStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasScasumStridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="cublasScasumStridedBatched")
#else
    function hipblasScasumStridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="hipblasScasumStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasumStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScasumStridedBatched_rank_0,hipblasScasumStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDzasumStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDzasumStridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="cublasDzasumStridedBatched")
#else
    function hipblasDzasumStridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="hipblasDzasumStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasumStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDzasumStridedBatched_rank_0,hipblasDzasumStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSaxpy
#ifdef USE_CUDA_NAMES
    function hipblasSaxpy_orig(handle,n,alpha,x,incx,y,incy) bind(c, name="cublasSaxpy_v2")
#else
    function hipblasSaxpy_orig(handle,n,alpha,x,incx,y,incy) bind(c, name="hipblasSaxpy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpy_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSaxpy_rank_0,hipblasSaxpy_rank_1
#endif

  end interface
  
  interface hipblasDaxpy
#ifdef USE_CUDA_NAMES
    function hipblasDaxpy_orig(handle,n,alpha,x,incx,y,incy) bind(c, name="cublasDaxpy_v2")
#else
    function hipblasDaxpy_orig(handle,n,alpha,x,incx,y,incy) bind(c, name="hipblasDaxpy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpy_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDaxpy_rank_0,hipblasDaxpy_rank_1
#endif

  end interface
  
  interface hipblasCaxpy
#ifdef USE_CUDA_NAMES
    function hipblasCaxpy_orig(handle,n,alpha,x,incx,y,incy) bind(c, name="cublasCaxpy_v2")
#else
    function hipblasCaxpy_orig(handle,n,alpha,x,incx,y,incy) bind(c, name="hipblasCaxpy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpy_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCaxpy_rank_0,hipblasCaxpy_rank_1
#endif

  end interface
  
  interface hipblasZaxpy
#ifdef USE_CUDA_NAMES
    function hipblasZaxpy_orig(handle,n,alpha,x,incx,y,incy) bind(c, name="cublasZaxpy_v2")
#else
    function hipblasZaxpy_orig(handle,n,alpha,x,incx,y,incy) bind(c, name="hipblasZaxpy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpy_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZaxpy_rank_0,hipblasZaxpy_rank_1
#endif

  end interface
  
  interface hipblasSaxpyBatched
#ifdef USE_CUDA_NAMES
    function hipblasSaxpyBatched_orig(handle,n,alpha,x,incx,y,incy,batch_count) bind(c, name="cublasSaxpyBatched")
#else
    function hipblasSaxpyBatched_orig(handle,n,alpha,x,incx,y,incy,batch_count) bind(c, name="hipblasSaxpyBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpyBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSaxpyBatched_full_rank,hipblasSaxpyBatched_rank_0,hipblasSaxpyBatched_rank_1
#endif

  end interface
  
  interface hipblasDaxpyBatched
#ifdef USE_CUDA_NAMES
    function hipblasDaxpyBatched_orig(handle,n,alpha,x,incx,y,incy,batch_count) bind(c, name="cublasDaxpyBatched")
#else
    function hipblasDaxpyBatched_orig(handle,n,alpha,x,incx,y,incy,batch_count) bind(c, name="hipblasDaxpyBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpyBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDaxpyBatched_full_rank,hipblasDaxpyBatched_rank_0,hipblasDaxpyBatched_rank_1
#endif

  end interface
  
  interface hipblasCaxpyBatched
#ifdef USE_CUDA_NAMES
    function hipblasCaxpyBatched_orig(handle,n,alpha,x,incx,y,incy,batch_count) bind(c, name="cublasCaxpyBatched")
#else
    function hipblasCaxpyBatched_orig(handle,n,alpha,x,incx,y,incy,batch_count) bind(c, name="hipblasCaxpyBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpyBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCaxpyBatched_full_rank,hipblasCaxpyBatched_rank_0,hipblasCaxpyBatched_rank_1
#endif

  end interface
  
  interface hipblasZaxpyBatched
#ifdef USE_CUDA_NAMES
    function hipblasZaxpyBatched_orig(handle,n,alpha,x,incx,y,incy,batch_count) bind(c, name="cublasZaxpyBatched")
#else
    function hipblasZaxpyBatched_orig(handle,n,alpha,x,incx,y,incy,batch_count) bind(c, name="hipblasZaxpyBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpyBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZaxpyBatched_full_rank,hipblasZaxpyBatched_rank_0,hipblasZaxpyBatched_rank_1
#endif

  end interface
  
  interface hipblasSaxpyStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSaxpyStridedBatched_orig(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count) bind(c, name="cublasSaxpyStridedBatched")
#else
    function hipblasSaxpyStridedBatched_orig(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count) bind(c, name="hipblasSaxpyStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpyStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSaxpyStridedBatched_rank_0,hipblasSaxpyStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDaxpyStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDaxpyStridedBatched_orig(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count) bind(c, name="cublasDaxpyStridedBatched")
#else
    function hipblasDaxpyStridedBatched_orig(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count) bind(c, name="hipblasDaxpyStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpyStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDaxpyStridedBatched_rank_0,hipblasDaxpyStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCaxpyStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCaxpyStridedBatched_orig(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count) bind(c, name="cublasCaxpyStridedBatched")
#else
    function hipblasCaxpyStridedBatched_orig(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count) bind(c, name="hipblasCaxpyStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpyStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCaxpyStridedBatched_rank_0,hipblasCaxpyStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZaxpyStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZaxpyStridedBatched_orig(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count) bind(c, name="cublasZaxpyStridedBatched")
#else
    function hipblasZaxpyStridedBatched_orig(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count) bind(c, name="hipblasZaxpyStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpyStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZaxpyStridedBatched_rank_0,hipblasZaxpyStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasScopy
#ifdef USE_CUDA_NAMES
    function hipblasScopy_orig(handle,n,x,incx,y,incy) bind(c, name="cublasScopy_v2")
#else
    function hipblasScopy_orig(handle,n,x,incx,y,incy) bind(c, name="hipblasScopy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopy_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScopy_rank_0,hipblasScopy_rank_1
#endif

  end interface
  
  interface hipblasDcopy
#ifdef USE_CUDA_NAMES
    function hipblasDcopy_orig(handle,n,x,incx,y,incy) bind(c, name="cublasDcopy_v2")
#else
    function hipblasDcopy_orig(handle,n,x,incx,y,incy) bind(c, name="hipblasDcopy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopy_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDcopy_rank_0,hipblasDcopy_rank_1
#endif

  end interface
  
  interface hipblasCcopy
#ifdef USE_CUDA_NAMES
    function hipblasCcopy_orig(handle,n,x,incx,y,incy) bind(c, name="cublasCcopy_v2")
#else
    function hipblasCcopy_orig(handle,n,x,incx,y,incy) bind(c, name="hipblasCcopy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopy_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCcopy_rank_0,hipblasCcopy_rank_1
#endif

  end interface
  
  interface hipblasZcopy
#ifdef USE_CUDA_NAMES
    function hipblasZcopy_orig(handle,n,x,incx,y,incy) bind(c, name="cublasZcopy_v2")
#else
    function hipblasZcopy_orig(handle,n,x,incx,y,incy) bind(c, name="hipblasZcopy")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopy_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZcopy_rank_0,hipblasZcopy_rank_1
#endif

  end interface
  
  interface hipblasScopyBatched
#ifdef USE_CUDA_NAMES
    function hipblasScopyBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="cublasScopyBatched")
#else
    function hipblasScopyBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="hipblasScopyBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopyBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScopyBatched_full_rank,hipblasScopyBatched_rank_0,hipblasScopyBatched_rank_1
#endif

  end interface
  
  interface hipblasDcopyBatched
#ifdef USE_CUDA_NAMES
    function hipblasDcopyBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="cublasDcopyBatched")
#else
    function hipblasDcopyBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="hipblasDcopyBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopyBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDcopyBatched_full_rank,hipblasDcopyBatched_rank_0,hipblasDcopyBatched_rank_1
#endif

  end interface
  
  interface hipblasCcopyBatched
#ifdef USE_CUDA_NAMES
    function hipblasCcopyBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="cublasCcopyBatched")
#else
    function hipblasCcopyBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="hipblasCcopyBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopyBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCcopyBatched_full_rank,hipblasCcopyBatched_rank_0,hipblasCcopyBatched_rank_1
#endif

  end interface
  
  interface hipblasZcopyBatched
#ifdef USE_CUDA_NAMES
    function hipblasZcopyBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="cublasZcopyBatched")
#else
    function hipblasZcopyBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="hipblasZcopyBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopyBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZcopyBatched_full_rank,hipblasZcopyBatched_rank_0,hipblasZcopyBatched_rank_1
#endif

  end interface
  
  interface hipblasScopyStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasScopyStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="cublasScopyStridedBatched")
#else
    function hipblasScopyStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="hipblasScopyStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopyStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScopyStridedBatched_rank_0,hipblasScopyStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDcopyStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDcopyStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="cublasDcopyStridedBatched")
#else
    function hipblasDcopyStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="hipblasDcopyStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopyStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDcopyStridedBatched_rank_0,hipblasDcopyStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCcopyStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCcopyStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="cublasCcopyStridedBatched")
#else
    function hipblasCcopyStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="hipblasCcopyStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopyStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCcopyStridedBatched_rank_0,hipblasCcopyStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZcopyStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZcopyStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="cublasZcopyStridedBatched")
#else
    function hipblasZcopyStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="hipblasZcopyStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopyStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZcopyStridedBatched_rank_0,hipblasZcopyStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSdot
#ifdef USE_CUDA_NAMES
    function hipblasSdot_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="cublasSdot_v2")
#else
    function hipblasSdot_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="hipblasSdot")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdot_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSdot_rank_0,hipblasSdot_rank_1
#endif

  end interface
  
  interface hipblasDdot
#ifdef USE_CUDA_NAMES
    function hipblasDdot_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="cublasDdot_v2")
#else
    function hipblasDdot_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="hipblasDdot")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdot_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDdot_rank_0,hipblasDdot_rank_1
#endif

  end interface
  
  interface hipblasCdotc
#ifdef USE_CUDA_NAMES
    function hipblasCdotc_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="cublasCdotc_v2")
#else
    function hipblasCdotc_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="hipblasCdotc")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotc_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdotc_rank_0,hipblasCdotc_rank_1
#endif

  end interface
  
  interface hipblasCdotu
#ifdef USE_CUDA_NAMES
    function hipblasCdotu_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="cublasCdotu_v2")
#else
    function hipblasCdotu_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="hipblasCdotu")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotu_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdotu_rank_0,hipblasCdotu_rank_1
#endif

  end interface
  
  interface hipblasZdotc
#ifdef USE_CUDA_NAMES
    function hipblasZdotc_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="cublasZdotc_v2")
#else
    function hipblasZdotc_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="hipblasZdotc")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotc_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdotc_rank_0,hipblasZdotc_rank_1
#endif

  end interface
  
  interface hipblasZdotu
#ifdef USE_CUDA_NAMES
    function hipblasZdotu_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="cublasZdotu_v2")
#else
    function hipblasZdotu_orig(handle,n,x,incx,y,incy,myResult) bind(c, name="hipblasZdotu")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotu_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdotu_rank_0,hipblasZdotu_rank_1
#endif

  end interface
  
  interface hipblasSdotBatched
#ifdef USE_CUDA_NAMES
    function hipblasSdotBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="cublasSdotBatched")
#else
    function hipblasSdotBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="hipblasSdotBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdotBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSdotBatched_full_rank,hipblasSdotBatched_rank_0,hipblasSdotBatched_rank_1
#endif

  end interface
  
  interface hipblasDdotBatched
#ifdef USE_CUDA_NAMES
    function hipblasDdotBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="cublasDdotBatched")
#else
    function hipblasDdotBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="hipblasDdotBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdotBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDdotBatched_full_rank,hipblasDdotBatched_rank_0,hipblasDdotBatched_rank_1
#endif

  end interface
  
  interface hipblasCdotcBatched
#ifdef USE_CUDA_NAMES
    function hipblasCdotcBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="cublasCdotcBatched")
#else
    function hipblasCdotcBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="hipblasCdotcBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotcBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdotcBatched_full_rank,hipblasCdotcBatched_rank_0,hipblasCdotcBatched_rank_1
#endif

  end interface
  
  interface hipblasCdotuBatched
#ifdef USE_CUDA_NAMES
    function hipblasCdotuBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="cublasCdotuBatched")
#else
    function hipblasCdotuBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="hipblasCdotuBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotuBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdotuBatched_full_rank,hipblasCdotuBatched_rank_0,hipblasCdotuBatched_rank_1
#endif

  end interface
  
  interface hipblasZdotcBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdotcBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="cublasZdotcBatched")
#else
    function hipblasZdotcBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="hipblasZdotcBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotcBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdotcBatched_full_rank,hipblasZdotcBatched_rank_0,hipblasZdotcBatched_rank_1
#endif

  end interface
  
  interface hipblasZdotuBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdotuBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="cublasZdotuBatched")
#else
    function hipblasZdotuBatched_orig(handle,n,x,incx,y,incy,batch_count,myResult) bind(c, name="hipblasZdotuBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotuBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdotuBatched_full_rank,hipblasZdotuBatched_rank_0,hipblasZdotuBatched_rank_1
#endif

  end interface
  
  interface hipblasSdotStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSdotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="cublasSdotStridedBatched")
#else
    function hipblasSdotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="hipblasSdotStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdotStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSdotStridedBatched_rank_0,hipblasSdotStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDdotStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDdotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="cublasDdotStridedBatched")
#else
    function hipblasDdotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="hipblasDdotStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdotStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDdotStridedBatched_rank_0,hipblasDdotStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCdotcStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCdotcStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="cublasCdotcStridedBatched")
#else
    function hipblasCdotcStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="hipblasCdotcStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotcStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdotcStridedBatched_rank_0,hipblasCdotcStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCdotuStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCdotuStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="cublasCdotuStridedBatched")
#else
    function hipblasCdotuStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="hipblasCdotuStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotuStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdotuStridedBatched_rank_0,hipblasCdotuStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZdotcStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdotcStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="cublasZdotcStridedBatched")
#else
    function hipblasZdotcStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="hipblasZdotcStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotcStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdotcStridedBatched_rank_0,hipblasZdotcStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZdotuStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdotuStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="cublasZdotuStridedBatched")
#else
    function hipblasZdotuStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult) bind(c, name="hipblasZdotuStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotuStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdotuStridedBatched_rank_0,hipblasZdotuStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSnrm2
#ifdef USE_CUDA_NAMES
    function hipblasSnrm2_orig(handle,n,x,incx,myResult) bind(c, name="cublasSnrm2_v2")
#else
    function hipblasSnrm2_orig(handle,n,x,incx,myResult) bind(c, name="hipblasSnrm2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSnrm2_rank_0,hipblasSnrm2_rank_1
#endif

  end interface
  
  interface hipblasDnrm2
#ifdef USE_CUDA_NAMES
    function hipblasDnrm2_orig(handle,n,x,incx,myResult) bind(c, name="cublasDnrm2_v2")
#else
    function hipblasDnrm2_orig(handle,n,x,incx,myResult) bind(c, name="hipblasDnrm2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDnrm2_rank_0,hipblasDnrm2_rank_1
#endif

  end interface
  
  interface hipblasScnrm2
#ifdef USE_CUDA_NAMES
    function hipblasScnrm2_orig(handle,n,x,incx,myResult) bind(c, name="cublasScnrm2_v2")
#else
    function hipblasScnrm2_orig(handle,n,x,incx,myResult) bind(c, name="hipblasScnrm2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScnrm2_rank_0,hipblasScnrm2_rank_1
#endif

  end interface
  
  interface hipblasDznrm2
#ifdef USE_CUDA_NAMES
    function hipblasDznrm2_orig(handle,n,x,incx,myResult) bind(c, name="cublasDznrm2_v2")
#else
    function hipblasDznrm2_orig(handle,n,x,incx,myResult) bind(c, name="hipblasDznrm2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDznrm2_rank_0,hipblasDznrm2_rank_1
#endif

  end interface
  
  interface hipblasSnrm2Batched
#ifdef USE_CUDA_NAMES
    function hipblasSnrm2Batched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="cublasSnrm2Batched")
#else
    function hipblasSnrm2Batched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="hipblasSnrm2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2Batched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSnrm2Batched_full_rank,hipblasSnrm2Batched_rank_0,hipblasSnrm2Batched_rank_1
#endif

  end interface
  
  interface hipblasDnrm2Batched
#ifdef USE_CUDA_NAMES
    function hipblasDnrm2Batched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="cublasDnrm2Batched")
#else
    function hipblasDnrm2Batched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="hipblasDnrm2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2Batched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDnrm2Batched_full_rank,hipblasDnrm2Batched_rank_0,hipblasDnrm2Batched_rank_1
#endif

  end interface
  
  interface hipblasScnrm2Batched
#ifdef USE_CUDA_NAMES
    function hipblasScnrm2Batched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="cublasScnrm2Batched")
#else
    function hipblasScnrm2Batched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="hipblasScnrm2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2Batched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScnrm2Batched_full_rank,hipblasScnrm2Batched_rank_0,hipblasScnrm2Batched_rank_1
#endif

  end interface
  
  interface hipblasDznrm2Batched
#ifdef USE_CUDA_NAMES
    function hipblasDznrm2Batched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="cublasDznrm2Batched")
#else
    function hipblasDznrm2Batched_orig(handle,n,x,incx,batchCount,myResult) bind(c, name="hipblasDznrm2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2Batched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDznrm2Batched_full_rank,hipblasDznrm2Batched_rank_0,hipblasDznrm2Batched_rank_1
#endif

  end interface
  
  interface hipblasSnrm2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSnrm2StridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="cublasSnrm2StridedBatched")
#else
    function hipblasSnrm2StridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="hipblasSnrm2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSnrm2StridedBatched_rank_0,hipblasSnrm2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDnrm2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDnrm2StridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="cublasDnrm2StridedBatched")
#else
    function hipblasDnrm2StridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="hipblasDnrm2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDnrm2StridedBatched_rank_0,hipblasDnrm2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasScnrm2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasScnrm2StridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="cublasScnrm2StridedBatched")
#else
    function hipblasScnrm2StridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="hipblasScnrm2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasScnrm2StridedBatched_rank_0,hipblasScnrm2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDznrm2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDznrm2StridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="cublasDznrm2StridedBatched")
#else
    function hipblasDznrm2StridedBatched_orig(handle,n,x,incx,stridex,batchCount,myResult) bind(c, name="hipblasDznrm2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDznrm2StridedBatched_rank_0,hipblasDznrm2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSrot
#ifdef USE_CUDA_NAMES
    function hipblasSrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="cublasSrot_v2")
#else
    function hipblasSrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="hipblasSrot")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrot_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSrot_rank_0,hipblasSrot_rank_1
#endif

  end interface
  
  interface hipblasDrot
#ifdef USE_CUDA_NAMES
    function hipblasDrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="cublasDrot_v2")
#else
    function hipblasDrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="hipblasDrot")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrot_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDrot_rank_0,hipblasDrot_rank_1
#endif

  end interface
  
  interface hipblasCrot
#ifdef USE_CUDA_NAMES
    function hipblasCrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="cublasCrot_v2")
#else
    function hipblasCrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="hipblasCrot")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrot_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCrot_rank_0,hipblasCrot_rank_1
#endif

  end interface
  
  interface hipblasCsrot
#ifdef USE_CUDA_NAMES
    function hipblasCsrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="cublasCsrot_v2")
#else
    function hipblasCsrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="hipblasCsrot")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrot_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsrot_rank_0,hipblasCsrot_rank_1
#endif

  end interface
  
  interface hipblasZrot
#ifdef USE_CUDA_NAMES
    function hipblasZrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="cublasZrot_v2")
#else
    function hipblasZrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="hipblasZrot")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrot_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZrot_rank_0,hipblasZrot_rank_1
#endif

  end interface
  
  interface hipblasZdrot
#ifdef USE_CUDA_NAMES
    function hipblasZdrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="cublasZdrot_v2")
#else
    function hipblasZdrot_orig(handle,n,x,incx,y,incy,c,s) bind(c, name="hipblasZdrot")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrot_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdrot_rank_0,hipblasZdrot_rank_1
#endif

  end interface
  
  interface hipblasSrotBatched
#ifdef USE_CUDA_NAMES
    function hipblasSrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="cublasSrotBatched")
#else
    function hipblasSrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="hipblasSrotBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSrotBatched_full_rank,hipblasSrotBatched_rank_0,hipblasSrotBatched_rank_1
#endif

  end interface
  
  interface hipblasDrotBatched
#ifdef USE_CUDA_NAMES
    function hipblasDrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="cublasDrotBatched")
#else
    function hipblasDrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="hipblasDrotBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDrotBatched_full_rank,hipblasDrotBatched_rank_0,hipblasDrotBatched_rank_1
#endif

  end interface
  
  interface hipblasCrotBatched
#ifdef USE_CUDA_NAMES
    function hipblasCrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="cublasCrotBatched")
#else
    function hipblasCrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="hipblasCrotBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCrotBatched_full_rank,hipblasCrotBatched_rank_0,hipblasCrotBatched_rank_1
#endif

  end interface
  
  interface hipblasCsrotBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="cublasCsrotBatched")
#else
    function hipblasCsrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="hipblasCsrotBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrotBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsrotBatched_full_rank,hipblasCsrotBatched_rank_0,hipblasCsrotBatched_rank_1
#endif

  end interface
  
  interface hipblasZrotBatched
#ifdef USE_CUDA_NAMES
    function hipblasZrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="cublasZrotBatched")
#else
    function hipblasZrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="hipblasZrotBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZrotBatched_full_rank,hipblasZrotBatched_rank_0,hipblasZrotBatched_rank_1
#endif

  end interface
  
  interface hipblasZdrotBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="cublasZdrotBatched")
#else
    function hipblasZdrotBatched_orig(handle,n,x,incx,y,incy,c,s,batchCount) bind(c, name="hipblasZdrotBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrotBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdrotBatched_full_rank,hipblasZdrotBatched_rank_0,hipblasZdrotBatched_rank_1
#endif

  end interface
  
  interface hipblasSrotStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="cublasSrotStridedBatched")
#else
    function hipblasSrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="hipblasSrotStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSrotStridedBatched_rank_0,hipblasSrotStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDrotStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="cublasDrotStridedBatched")
#else
    function hipblasDrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="hipblasDrotStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDrotStridedBatched_rank_0,hipblasDrotStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCrotStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="cublasCrotStridedBatched")
#else
    function hipblasCrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="hipblasCrotStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCrotStridedBatched_rank_0,hipblasCrotStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsrotStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="cublasCsrotStridedBatched")
#else
    function hipblasCsrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="hipblasCsrotStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrotStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsrotStridedBatched_rank_0,hipblasCsrotStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZrotStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="cublasZrotStridedBatched")
#else
    function hipblasZrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="hipblasZrotStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZrotStridedBatched_rank_0,hipblasZrotStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZdrotStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="cublasZdrotStridedBatched")
#else
    function hipblasZdrotStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount) bind(c, name="hipblasZdrotStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrotStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdrotStridedBatched_rank_0,hipblasZdrotStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSrotg
#ifdef USE_CUDA_NAMES
    function hipblasSrotg_orig(handle,a,b,c,s) bind(c, name="cublasSrotg_v2")
#else
    function hipblasSrotg_orig(handle,a,b,c,s) bind(c, name="hipblasSrotg")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotg_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: a
      type(c_ptr),value :: b
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function


  end interface
  
  interface hipblasDrotg
#ifdef USE_CUDA_NAMES
    function hipblasDrotg_orig(handle,a,b,c,s) bind(c, name="cublasDrotg_v2")
#else
    function hipblasDrotg_orig(handle,a,b,c,s) bind(c, name="hipblasDrotg")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotg_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: a
      type(c_ptr),value :: b
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function


  end interface
  
  interface hipblasCrotg
#ifdef USE_CUDA_NAMES
    function hipblasCrotg_orig(handle,a,b,c,s) bind(c, name="cublasCrotg_v2")
#else
    function hipblasCrotg_orig(handle,a,b,c,s) bind(c, name="hipblasCrotg")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotg_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: a
      type(c_ptr),value :: b
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function


  end interface
  
  interface hipblasZrotg
#ifdef USE_CUDA_NAMES
    function hipblasZrotg_orig(handle,a,b,c,s) bind(c, name="cublasZrotg_v2")
#else
    function hipblasZrotg_orig(handle,a,b,c,s) bind(c, name="hipblasZrotg")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotg_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: a
      type(c_ptr),value :: b
      type(c_ptr),value :: c
      type(c_ptr),value :: s
    end function


  end interface
  
  interface hipblasSrotgBatched
#ifdef USE_CUDA_NAMES
    function hipblasSrotgBatched_orig(handle,a,b,c,s,batchCount) bind(c, name="cublasSrotgBatched")
#else
    function hipblasSrotgBatched_orig(handle,a,b,c,s,batchCount) bind(c, name="hipblasSrotgBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotgBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr) :: a
      type(c_ptr) :: b
      type(c_ptr) :: c
      type(c_ptr) :: s
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasDrotgBatched
#ifdef USE_CUDA_NAMES
    function hipblasDrotgBatched_orig(handle,a,b,c,s,batchCount) bind(c, name="cublasDrotgBatched")
#else
    function hipblasDrotgBatched_orig(handle,a,b,c,s,batchCount) bind(c, name="hipblasDrotgBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotgBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr) :: a
      type(c_ptr) :: b
      type(c_ptr) :: c
      type(c_ptr) :: s
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasCrotgBatched
#ifdef USE_CUDA_NAMES
    function hipblasCrotgBatched_orig(handle,a,b,c,s,batchCount) bind(c, name="cublasCrotgBatched")
#else
    function hipblasCrotgBatched_orig(handle,a,b,c,s,batchCount) bind(c, name="hipblasCrotgBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotgBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr) :: a
      type(c_ptr) :: b
      type(c_ptr) :: c
      type(c_ptr) :: s
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasZrotgBatched
#ifdef USE_CUDA_NAMES
    function hipblasZrotgBatched_orig(handle,a,b,c,s,batchCount) bind(c, name="cublasZrotgBatched")
#else
    function hipblasZrotgBatched_orig(handle,a,b,c,s,batchCount) bind(c, name="hipblasZrotgBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotgBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr) :: a
      type(c_ptr) :: b
      type(c_ptr) :: c
      type(c_ptr) :: s
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasSrotgStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSrotgStridedBatched_orig(handle,a,stride_a,b,stride_b,c,stride_c,s,stride_s,batchCount) bind(c, name="cublasSrotgStridedBatched")
#else
    function hipblasSrotgStridedBatched_orig(handle,a,stride_a,b,stride_b,c,stride_c,s,stride_s,batchCount) bind(c, name="hipblasSrotgStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotgStridedBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: a
      integer(c_int),value :: stride_a
      type(c_ptr),value :: b
      integer(c_int),value :: stride_b
      type(c_ptr),value :: c
      integer(c_int),value :: stride_c
      type(c_ptr),value :: s
      integer(c_int),value :: stride_s
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasDrotgStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDrotgStridedBatched_orig(handle,a,stride_a,b,stride_b,c,stride_c,s,stride_s,batchCount) bind(c, name="cublasDrotgStridedBatched")
#else
    function hipblasDrotgStridedBatched_orig(handle,a,stride_a,b,stride_b,c,stride_c,s,stride_s,batchCount) bind(c, name="hipblasDrotgStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotgStridedBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: a
      integer(c_int),value :: stride_a
      type(c_ptr),value :: b
      integer(c_int),value :: stride_b
      type(c_ptr),value :: c
      integer(c_int),value :: stride_c
      type(c_ptr),value :: s
      integer(c_int),value :: stride_s
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasCrotgStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCrotgStridedBatched_orig(handle,a,stride_a,b,stride_b,c,stride_c,s,stride_s,batchCount) bind(c, name="cublasCrotgStridedBatched")
#else
    function hipblasCrotgStridedBatched_orig(handle,a,stride_a,b,stride_b,c,stride_c,s,stride_s,batchCount) bind(c, name="hipblasCrotgStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotgStridedBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: a
      integer(c_int),value :: stride_a
      type(c_ptr),value :: b
      integer(c_int),value :: stride_b
      type(c_ptr),value :: c
      integer(c_int),value :: stride_c
      type(c_ptr),value :: s
      integer(c_int),value :: stride_s
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasZrotgStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZrotgStridedBatched_orig(handle,a,stride_a,b,stride_b,c,stride_c,s,stride_s,batchCount) bind(c, name="cublasZrotgStridedBatched")
#else
    function hipblasZrotgStridedBatched_orig(handle,a,stride_a,b,stride_b,c,stride_c,s,stride_s,batchCount) bind(c, name="hipblasZrotgStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotgStridedBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: a
      integer(c_int),value :: stride_a
      type(c_ptr),value :: b
      integer(c_int),value :: stride_b
      type(c_ptr),value :: c
      integer(c_int),value :: stride_c
      type(c_ptr),value :: s
      integer(c_int),value :: stride_s
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasSrotm
#ifdef USE_CUDA_NAMES
    function hipblasSrotm_orig(handle,n,x,incx,y,incy,param) bind(c, name="cublasSrotm_v2")
#else
    function hipblasSrotm_orig(handle,n,x,incx,y,incy,param) bind(c, name="hipblasSrotm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotm_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: param
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSrotm_rank_0,hipblasSrotm_rank_1
#endif

  end interface
  
  interface hipblasDrotm
#ifdef USE_CUDA_NAMES
    function hipblasDrotm_orig(handle,n,x,incx,y,incy,param) bind(c, name="cublasDrotm_v2")
#else
    function hipblasDrotm_orig(handle,n,x,incx,y,incy,param) bind(c, name="hipblasDrotm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotm_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: param
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDrotm_rank_0,hipblasDrotm_rank_1
#endif

  end interface
  
  interface hipblasSrotmBatched
#ifdef USE_CUDA_NAMES
    function hipblasSrotmBatched_orig(handle,n,x,incx,y,incy,param,batchCount) bind(c, name="cublasSrotmBatched")
#else
    function hipblasSrotmBatched_orig(handle,n,x,incx,y,incy,param,batchCount) bind(c, name="hipblasSrotmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSrotmBatched_full_rank,hipblasSrotmBatched_rank_0,hipblasSrotmBatched_rank_1
#endif

  end interface
  
  interface hipblasDrotmBatched
#ifdef USE_CUDA_NAMES
    function hipblasDrotmBatched_orig(handle,n,x,incx,y,incy,param,batchCount) bind(c, name="cublasDrotmBatched")
#else
    function hipblasDrotmBatched_orig(handle,n,x,incx,y,incy,param,batchCount) bind(c, name="hipblasDrotmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDrotmBatched_full_rank,hipblasDrotmBatched_rank_0,hipblasDrotmBatched_rank_1
#endif

  end interface
  
  interface hipblasSrotmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSrotmStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,param,stride_param,batchCount) bind(c, name="cublasSrotmStridedBatched")
#else
    function hipblasSrotmStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,param,stride_param,batchCount) bind(c, name="hipblasSrotmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: param
      integer(c_int),value :: stride_param
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSrotmStridedBatched_rank_0,hipblasSrotmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDrotmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDrotmStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,param,stride_param,batchCount) bind(c, name="cublasDrotmStridedBatched")
#else
    function hipblasDrotmStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,param,stride_param,batchCount) bind(c, name="hipblasDrotmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: param
      integer(c_int),value :: stride_param
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDrotmStridedBatched_rank_0,hipblasDrotmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSrotmg
#ifdef USE_CUDA_NAMES
    function hipblasSrotmg_orig(handle,d1,d2,x1,y1,param) bind(c, name="cublasSrotmg_v2")
#else
    function hipblasSrotmg_orig(handle,d1,d2,x1,y1,param) bind(c, name="hipblasSrotmg")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmg_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: d1
      type(c_ptr),value :: d2
      type(c_ptr),value :: x1
      type(c_ptr),value :: y1
      type(c_ptr),value :: param
    end function


  end interface
  
  interface hipblasDrotmg
#ifdef USE_CUDA_NAMES
    function hipblasDrotmg_orig(handle,d1,d2,x1,y1,param) bind(c, name="cublasDrotmg_v2")
#else
    function hipblasDrotmg_orig(handle,d1,d2,x1,y1,param) bind(c, name="hipblasDrotmg")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmg_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: d1
      type(c_ptr),value :: d2
      type(c_ptr),value :: x1
      type(c_ptr),value :: y1
      type(c_ptr),value :: param
    end function


  end interface
  
  interface hipblasSrotmgBatched
#ifdef USE_CUDA_NAMES
    function hipblasSrotmgBatched_orig(handle,d1,d2,x1,y1,param,batchCount) bind(c, name="cublasSrotmgBatched")
#else
    function hipblasSrotmgBatched_orig(handle,d1,d2,x1,y1,param,batchCount) bind(c, name="hipblasSrotmgBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmgBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr) :: d1
      type(c_ptr) :: d2
      type(c_ptr) :: x1
      type(c_ptr) :: y1
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasDrotmgBatched
#ifdef USE_CUDA_NAMES
    function hipblasDrotmgBatched_orig(handle,d1,d2,x1,y1,param,batchCount) bind(c, name="cublasDrotmgBatched")
#else
    function hipblasDrotmgBatched_orig(handle,d1,d2,x1,y1,param,batchCount) bind(c, name="hipblasDrotmgBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmgBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr) :: d1
      type(c_ptr) :: d2
      type(c_ptr) :: x1
      type(c_ptr) :: y1
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasSrotmgStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSrotmgStridedBatched_orig(handle,d1,stride_d1,d2,stride_d2,x1,stride_x1,y1,stride_y1,param,stride_param,batchCount) bind(c, name="cublasSrotmgStridedBatched")
#else
    function hipblasSrotmgStridedBatched_orig(handle,d1,stride_d1,d2,stride_d2,x1,stride_x1,y1,stride_y1,param,stride_param,batchCount) bind(c, name="hipblasSrotmgStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmgStridedBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: d1
      integer(c_int),value :: stride_d1
      type(c_ptr),value :: d2
      integer(c_int),value :: stride_d2
      type(c_ptr),value :: x1
      integer(c_int),value :: stride_x1
      type(c_ptr),value :: y1
      integer(c_int),value :: stride_y1
      type(c_ptr),value :: param
      integer(c_int),value :: stride_param
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasDrotmgStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDrotmgStridedBatched_orig(handle,d1,stride_d1,d2,stride_d2,x1,stride_x1,y1,stride_y1,param,stride_param,batchCount) bind(c, name="cublasDrotmgStridedBatched")
#else
    function hipblasDrotmgStridedBatched_orig(handle,d1,stride_d1,d2,stride_d2,x1,stride_x1,y1,stride_y1,param,stride_param,batchCount) bind(c, name="hipblasDrotmgStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmgStridedBatched_orig
      type(c_ptr),value :: handle
      type(c_ptr),value :: d1
      integer(c_int),value :: stride_d1
      type(c_ptr),value :: d2
      integer(c_int),value :: stride_d2
      type(c_ptr),value :: x1
      integer(c_int),value :: stride_x1
      type(c_ptr),value :: y1
      integer(c_int),value :: stride_y1
      type(c_ptr),value :: param
      integer(c_int),value :: stride_param
      integer(c_int),value :: batchCount
    end function


  end interface
  
  interface hipblasSscal
#ifdef USE_CUDA_NAMES
    function hipblasSscal_orig(handle,n,alpha,x,incx) bind(c, name="cublasSscal_v2")
#else
    function hipblasSscal_orig(handle,n,alpha,x,incx) bind(c, name="hipblasSscal")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscal_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSscal_rank_0,hipblasSscal_rank_1
#endif

  end interface
  
  interface hipblasDscal
#ifdef USE_CUDA_NAMES
    function hipblasDscal_orig(handle,n,alpha,x,incx) bind(c, name="cublasDscal_v2")
#else
    function hipblasDscal_orig(handle,n,alpha,x,incx) bind(c, name="hipblasDscal")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscal_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDscal_rank_0,hipblasDscal_rank_1
#endif

  end interface
  
  interface hipblasCscal
#ifdef USE_CUDA_NAMES
    function hipblasCscal_orig(handle,n,alpha,x,incx) bind(c, name="cublasCscal_v2")
#else
    function hipblasCscal_orig(handle,n,alpha,x,incx) bind(c, name="hipblasCscal")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscal_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCscal_rank_0,hipblasCscal_rank_1
#endif

  end interface
  
  interface hipblasCsscal
#ifdef USE_CUDA_NAMES
    function hipblasCsscal_orig(handle,n,alpha,x,incx) bind(c, name="cublasCsscal_v2")
#else
    function hipblasCsscal_orig(handle,n,alpha,x,incx) bind(c, name="hipblasCsscal")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscal_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsscal_rank_0,hipblasCsscal_rank_1
#endif

  end interface
  
  interface hipblasZscal
#ifdef USE_CUDA_NAMES
    function hipblasZscal_orig(handle,n,alpha,x,incx) bind(c, name="cublasZscal_v2")
#else
    function hipblasZscal_orig(handle,n,alpha,x,incx) bind(c, name="hipblasZscal")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscal_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZscal_rank_0,hipblasZscal_rank_1
#endif

  end interface
  
  interface hipblasZdscal
#ifdef USE_CUDA_NAMES
    function hipblasZdscal_orig(handle,n,alpha,x,incx) bind(c, name="cublasZdscal_v2")
#else
    function hipblasZdscal_orig(handle,n,alpha,x,incx) bind(c, name="hipblasZdscal")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscal_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdscal_rank_0,hipblasZdscal_rank_1
#endif

  end interface
  
  interface hipblasSscalBatched
#ifdef USE_CUDA_NAMES
    function hipblasSscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="cublasSscalBatched")
#else
    function hipblasSscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="hipblasSscalBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscalBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSscalBatched_full_rank,hipblasSscalBatched_rank_0,hipblasSscalBatched_rank_1
#endif

  end interface
  
  interface hipblasDscalBatched
#ifdef USE_CUDA_NAMES
    function hipblasDscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="cublasDscalBatched")
#else
    function hipblasDscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="hipblasDscalBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscalBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDscalBatched_full_rank,hipblasDscalBatched_rank_0,hipblasDscalBatched_rank_1
#endif

  end interface
  
  interface hipblasCscalBatched
#ifdef USE_CUDA_NAMES
    function hipblasCscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="cublasCscalBatched")
#else
    function hipblasCscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="hipblasCscalBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscalBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCscalBatched_full_rank,hipblasCscalBatched_rank_0,hipblasCscalBatched_rank_1
#endif

  end interface
  
  interface hipblasZscalBatched
#ifdef USE_CUDA_NAMES
    function hipblasZscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="cublasZscalBatched")
#else
    function hipblasZscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="hipblasZscalBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscalBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZscalBatched_full_rank,hipblasZscalBatched_rank_0,hipblasZscalBatched_rank_1
#endif

  end interface
  
  interface hipblasCsscalBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="cublasCsscalBatched")
#else
    function hipblasCsscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="hipblasCsscalBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscalBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsscalBatched_full_rank,hipblasCsscalBatched_rank_0,hipblasCsscalBatched_rank_1
#endif

  end interface
  
  interface hipblasZdscalBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="cublasZdscalBatched")
#else
    function hipblasZdscalBatched_orig(handle,n,alpha,x,incx,batchCount) bind(c, name="hipblasZdscalBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscalBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdscalBatched_full_rank,hipblasZdscalBatched_rank_0,hipblasZdscalBatched_rank_1
#endif

  end interface
  
  interface hipblasSscalStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="cublasSscalStridedBatched")
#else
    function hipblasSscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="hipblasSscalStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscalStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSscalStridedBatched_rank_0,hipblasSscalStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDscalStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="cublasDscalStridedBatched")
#else
    function hipblasDscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="hipblasDscalStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscalStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDscalStridedBatched_rank_0,hipblasDscalStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCscalStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="cublasCscalStridedBatched")
#else
    function hipblasCscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="hipblasCscalStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscalStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCscalStridedBatched_rank_0,hipblasCscalStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZscalStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="cublasZscalStridedBatched")
#else
    function hipblasZscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="hipblasZscalStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscalStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZscalStridedBatched_rank_0,hipblasZscalStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsscalStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="cublasCsscalStridedBatched")
#else
    function hipblasCsscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="hipblasCsscalStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscalStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsscalStridedBatched_rank_0,hipblasCsscalStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZdscalStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="cublasZdscalStridedBatched")
#else
    function hipblasZdscalStridedBatched_orig(handle,n,alpha,x,incx,stridex,batchCount) bind(c, name="hipblasZdscalStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscalStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdscalStridedBatched_rank_0,hipblasZdscalStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSswap
#ifdef USE_CUDA_NAMES
    function hipblasSswap_orig(handle,n,x,incx,y,incy) bind(c, name="cublasSswap_v2")
#else
    function hipblasSswap_orig(handle,n,x,incx,y,incy) bind(c, name="hipblasSswap")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswap_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSswap_rank_0,hipblasSswap_rank_1
#endif

  end interface
  
  interface hipblasDswap
#ifdef USE_CUDA_NAMES
    function hipblasDswap_orig(handle,n,x,incx,y,incy) bind(c, name="cublasDswap_v2")
#else
    function hipblasDswap_orig(handle,n,x,incx,y,incy) bind(c, name="hipblasDswap")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswap_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDswap_rank_0,hipblasDswap_rank_1
#endif

  end interface
  
  interface hipblasCswap
#ifdef USE_CUDA_NAMES
    function hipblasCswap_orig(handle,n,x,incx,y,incy) bind(c, name="cublasCswap_v2")
#else
    function hipblasCswap_orig(handle,n,x,incx,y,incy) bind(c, name="hipblasCswap")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswap_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCswap_rank_0,hipblasCswap_rank_1
#endif

  end interface
  
  interface hipblasZswap
#ifdef USE_CUDA_NAMES
    function hipblasZswap_orig(handle,n,x,incx,y,incy) bind(c, name="cublasZswap_v2")
#else
    function hipblasZswap_orig(handle,n,x,incx,y,incy) bind(c, name="hipblasZswap")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswap_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZswap_rank_0,hipblasZswap_rank_1
#endif

  end interface
  
  interface hipblasSswapBatched
#ifdef USE_CUDA_NAMES
    function hipblasSswapBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="cublasSswapBatched")
#else
    function hipblasSswapBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="hipblasSswapBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswapBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSswapBatched_full_rank,hipblasSswapBatched_rank_0,hipblasSswapBatched_rank_1
#endif

  end interface
  
  interface hipblasDswapBatched
#ifdef USE_CUDA_NAMES
    function hipblasDswapBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="cublasDswapBatched")
#else
    function hipblasDswapBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="hipblasDswapBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswapBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDswapBatched_full_rank,hipblasDswapBatched_rank_0,hipblasDswapBatched_rank_1
#endif

  end interface
  
  interface hipblasCswapBatched
#ifdef USE_CUDA_NAMES
    function hipblasCswapBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="cublasCswapBatched")
#else
    function hipblasCswapBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="hipblasCswapBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswapBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCswapBatched_full_rank,hipblasCswapBatched_rank_0,hipblasCswapBatched_rank_1
#endif

  end interface
  
  interface hipblasZswapBatched
#ifdef USE_CUDA_NAMES
    function hipblasZswapBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="cublasZswapBatched")
#else
    function hipblasZswapBatched_orig(handle,n,x,incx,y,incy,batchCount) bind(c, name="hipblasZswapBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswapBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZswapBatched_full_rank,hipblasZswapBatched_rank_0,hipblasZswapBatched_rank_1
#endif

  end interface
  
  interface hipblasSswapStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSswapStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="cublasSswapStridedBatched")
#else
    function hipblasSswapStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="hipblasSswapStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswapStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSswapStridedBatched_rank_0,hipblasSswapStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDswapStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDswapStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="cublasDswapStridedBatched")
#else
    function hipblasDswapStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="hipblasDswapStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswapStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDswapStridedBatched_rank_0,hipblasDswapStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCswapStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCswapStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="cublasCswapStridedBatched")
#else
    function hipblasCswapStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="hipblasCswapStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswapStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCswapStridedBatched_rank_0,hipblasCswapStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZswapStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZswapStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="cublasZswapStridedBatched")
#else
    function hipblasZswapStridedBatched_orig(handle,n,x,incx,stridex,y,incy,stridey,batchCount) bind(c, name="hipblasZswapStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswapStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZswapStridedBatched_rank_0,hipblasZswapStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSgbmv
#ifdef USE_CUDA_NAMES
    function hipblasSgbmv_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasSgbmv_v2")
#else
    function hipblasSgbmv_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasSgbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgbmv_full_rank,hipblasSgbmv_rank_0,hipblasSgbmv_rank_1
#endif

  end interface
  
  interface hipblasDgbmv
#ifdef USE_CUDA_NAMES
    function hipblasDgbmv_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasDgbmv_v2")
#else
    function hipblasDgbmv_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasDgbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgbmv_full_rank,hipblasDgbmv_rank_0,hipblasDgbmv_rank_1
#endif

  end interface
  
  interface hipblasCgbmv
#ifdef USE_CUDA_NAMES
    function hipblasCgbmv_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasCgbmv_v2")
#else
    function hipblasCgbmv_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasCgbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgbmv_full_rank,hipblasCgbmv_rank_0,hipblasCgbmv_rank_1
#endif

  end interface
  
  interface hipblasZgbmv
#ifdef USE_CUDA_NAMES
    function hipblasZgbmv_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasZgbmv_v2")
#else
    function hipblasZgbmv_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasZgbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgbmv_full_rank,hipblasZgbmv_rank_0,hipblasZgbmv_rank_1
#endif

  end interface
  
  interface hipblasSgbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="cublasSgbmvBatched")
#else
    function hipblasSgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="hipblasSgbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgbmvBatched_full_rank,hipblasSgbmvBatched_rank_0,hipblasSgbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasDgbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="cublasDgbmvBatched")
#else
    function hipblasDgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="hipblasDgbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgbmvBatched_full_rank,hipblasDgbmvBatched_rank_0,hipblasDgbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasCgbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="cublasCgbmvBatched")
#else
    function hipblasCgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="hipblasCgbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgbmvBatched_full_rank,hipblasCgbmvBatched_rank_0,hipblasCgbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasZgbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="cublasZgbmvBatched")
#else
    function hipblasZgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="hipblasZgbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgbmvBatched_full_rank,hipblasZgbmvBatched_rank_0,hipblasZgbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasSgbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="cublasSgbmvStridedBatched")
#else
    function hipblasSgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="hipblasSgbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgbmvStridedBatched_full_rank,hipblasSgbmvStridedBatched_rank_0,hipblasSgbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDgbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="cublasDgbmvStridedBatched")
#else
    function hipblasDgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="hipblasDgbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgbmvStridedBatched_full_rank,hipblasDgbmvStridedBatched_rank_0,hipblasDgbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="cublasCgbmvStridedBatched")
#else
    function hipblasCgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="hipblasCgbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgbmvStridedBatched_full_rank,hipblasCgbmvStridedBatched_rank_0,hipblasCgbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="cublasZgbmvStridedBatched")
#else
    function hipblasZgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="hipblasZgbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgbmvStridedBatched_full_rank,hipblasZgbmvStridedBatched_rank_0,hipblasZgbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSgemv
#ifdef USE_CUDA_NAMES
    function hipblasSgemv_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasSgemv_v2")
#else
    function hipblasSgemv_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasSgemv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgemv_full_rank,hipblasSgemv_rank_0,hipblasSgemv_rank_1
#endif

  end interface
  
  interface hipblasDgemv
#ifdef USE_CUDA_NAMES
    function hipblasDgemv_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasDgemv_v2")
#else
    function hipblasDgemv_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasDgemv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgemv_full_rank,hipblasDgemv_rank_0,hipblasDgemv_rank_1
#endif

  end interface
  
  interface hipblasCgemv
#ifdef USE_CUDA_NAMES
    function hipblasCgemv_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasCgemv_v2")
#else
    function hipblasCgemv_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasCgemv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgemv_full_rank,hipblasCgemv_rank_0,hipblasCgemv_rank_1
#endif

  end interface
  
  interface hipblasZgemv
#ifdef USE_CUDA_NAMES
    function hipblasZgemv_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasZgemv_v2")
#else
    function hipblasZgemv_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasZgemv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgemv_full_rank,hipblasZgemv_rank_0,hipblasZgemv_rank_1
#endif

  end interface
  
  interface hipblasSgemvBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgemvBatched_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasSgemvBatched")
#else
    function hipblasSgemvBatched_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasSgemvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgemvBatched_full_rank,hipblasSgemvBatched_rank_0,hipblasSgemvBatched_rank_1
#endif

  end interface
  
  interface hipblasDgemvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgemvBatched_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasDgemvBatched")
#else
    function hipblasDgemvBatched_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasDgemvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgemvBatched_full_rank,hipblasDgemvBatched_rank_0,hipblasDgemvBatched_rank_1
#endif

  end interface
  
  interface hipblasCgemvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgemvBatched_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasCgemvBatched")
#else
    function hipblasCgemvBatched_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasCgemvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgemvBatched_full_rank,hipblasCgemvBatched_rank_0,hipblasCgemvBatched_rank_1
#endif

  end interface
  
  interface hipblasZgemvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgemvBatched_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasZgemvBatched")
#else
    function hipblasZgemvBatched_orig(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasZgemvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgemvBatched_full_rank,hipblasZgemvBatched_rank_0,hipblasZgemvBatched_rank_1
#endif

  end interface
  
  interface hipblasSgemvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgemvStridedBatched_orig(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasSgemvStridedBatched")
#else
    function hipblasSgemvStridedBatched_orig(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasSgemvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgemvStridedBatched_full_rank,hipblasSgemvStridedBatched_rank_0,hipblasSgemvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDgemvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgemvStridedBatched_orig(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount) bind(c, name="cublasDgemvStridedBatched")
#else
    function hipblasDgemvStridedBatched_orig(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount) bind(c, name="hipblasDgemvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: stridey
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgemvStridedBatched_full_rank,hipblasDgemvStridedBatched_rank_0,hipblasDgemvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgemvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgemvStridedBatched_orig(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasCgemvStridedBatched")
#else
    function hipblasCgemvStridedBatched_orig(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasCgemvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgemvStridedBatched_full_rank,hipblasCgemvStridedBatched_rank_0,hipblasCgemvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgemvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgemvStridedBatched_orig(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount) bind(c, name="cublasZgemvStridedBatched")
#else
    function hipblasZgemvStridedBatched_orig(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount) bind(c, name="hipblasZgemvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: stridey
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgemvStridedBatched_full_rank,hipblasZgemvStridedBatched_rank_0,hipblasZgemvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSger
#ifdef USE_CUDA_NAMES
    function hipblasSger_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasSger_v2")
#else
    function hipblasSger_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasSger")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSger_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSger_full_rank,hipblasSger_rank_0,hipblasSger_rank_1
#endif

  end interface
  
  interface hipblasDger
#ifdef USE_CUDA_NAMES
    function hipblasDger_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasDger_v2")
#else
    function hipblasDger_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasDger")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDger_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDger_full_rank,hipblasDger_rank_0,hipblasDger_rank_1
#endif

  end interface
  
  interface hipblasCgeru
#ifdef USE_CUDA_NAMES
    function hipblasCgeru_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasCgeru_v2")
#else
    function hipblasCgeru_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasCgeru")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeru_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeru_full_rank,hipblasCgeru_rank_0,hipblasCgeru_rank_1
#endif

  end interface
  
  interface hipblasCgerc
#ifdef USE_CUDA_NAMES
    function hipblasCgerc_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasCgerc_v2")
#else
    function hipblasCgerc_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasCgerc")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgerc_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgerc_full_rank,hipblasCgerc_rank_0,hipblasCgerc_rank_1
#endif

  end interface
  
  interface hipblasZgeru
#ifdef USE_CUDA_NAMES
    function hipblasZgeru_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasZgeru_v2")
#else
    function hipblasZgeru_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasZgeru")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeru_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeru_full_rank,hipblasZgeru_rank_0,hipblasZgeru_rank_1
#endif

  end interface
  
  interface hipblasZgerc
#ifdef USE_CUDA_NAMES
    function hipblasZgerc_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasZgerc_v2")
#else
    function hipblasZgerc_orig(handle,m,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasZgerc")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgerc_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgerc_full_rank,hipblasZgerc_rank_0,hipblasZgerc_rank_1
#endif

  end interface
  
  interface hipblasSgerBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgerBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasSgerBatched")
#else
    function hipblasSgerBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasSgerBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgerBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgerBatched_full_rank,hipblasSgerBatched_rank_0,hipblasSgerBatched_rank_1
#endif

  end interface
  
  interface hipblasDgerBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgerBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasDgerBatched")
#else
    function hipblasDgerBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasDgerBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgerBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgerBatched_full_rank,hipblasDgerBatched_rank_0,hipblasDgerBatched_rank_1
#endif

  end interface
  
  interface hipblasCgeruBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgeruBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasCgeruBatched")
#else
    function hipblasCgeruBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasCgeruBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeruBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeruBatched_full_rank,hipblasCgeruBatched_rank_0,hipblasCgeruBatched_rank_1
#endif

  end interface
  
  interface hipblasCgercBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgercBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasCgercBatched")
#else
    function hipblasCgercBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasCgercBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgercBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgercBatched_full_rank,hipblasCgercBatched_rank_0,hipblasCgercBatched_rank_1
#endif

  end interface
  
  interface hipblasZgeruBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgeruBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasZgeruBatched")
#else
    function hipblasZgeruBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasZgeruBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeruBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeruBatched_full_rank,hipblasZgeruBatched_rank_0,hipblasZgeruBatched_rank_1
#endif

  end interface
  
  interface hipblasZgercBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgercBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasZgercBatched")
#else
    function hipblasZgercBatched_orig(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasZgercBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgercBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgercBatched_full_rank,hipblasZgercBatched_rank_0,hipblasZgercBatched_rank_1
#endif

  end interface
  
  interface hipblasSgerStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgerStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasSgerStridedBatched")
#else
    function hipblasSgerStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasSgerStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgerStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgerStridedBatched_full_rank,hipblasSgerStridedBatched_rank_0,hipblasSgerStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDgerStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgerStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasDgerStridedBatched")
#else
    function hipblasDgerStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasDgerStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgerStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgerStridedBatched_full_rank,hipblasDgerStridedBatched_rank_0,hipblasDgerStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgeruStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgeruStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasCgeruStridedBatched")
#else
    function hipblasCgeruStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasCgeruStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeruStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeruStridedBatched_full_rank,hipblasCgeruStridedBatched_rank_0,hipblasCgeruStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgercStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgercStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasCgercStridedBatched")
#else
    function hipblasCgercStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasCgercStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgercStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgercStridedBatched_full_rank,hipblasCgercStridedBatched_rank_0,hipblasCgercStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgeruStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgeruStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasZgeruStridedBatched")
#else
    function hipblasZgeruStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasZgeruStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeruStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeruStridedBatched_full_rank,hipblasZgeruStridedBatched_rank_0,hipblasZgeruStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgercStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgercStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasZgercStridedBatched")
#else
    function hipblasZgercStridedBatched_orig(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasZgercStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgercStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgercStridedBatched_full_rank,hipblasZgercStridedBatched_rank_0,hipblasZgercStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasChbmv
#ifdef USE_CUDA_NAMES
    function hipblasChbmv_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasChbmv_v2")
#else
    function hipblasChbmv_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasChbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChbmv_full_rank,hipblasChbmv_rank_0,hipblasChbmv_rank_1
#endif

  end interface
  
  interface hipblasZhbmv
#ifdef USE_CUDA_NAMES
    function hipblasZhbmv_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasZhbmv_v2")
#else
    function hipblasZhbmv_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasZhbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhbmv_full_rank,hipblasZhbmv_rank_0,hipblasZhbmv_rank_1
#endif

  end interface
  
  interface hipblasChbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasChbmvBatched_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasChbmvBatched")
#else
    function hipblasChbmvBatched_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasChbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChbmvBatched_full_rank,hipblasChbmvBatched_rank_0,hipblasChbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasZhbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhbmvBatched_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasZhbmvBatched")
#else
    function hipblasZhbmvBatched_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasZhbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhbmvBatched_full_rank,hipblasZhbmvBatched_rank_0,hipblasZhbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasChbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasChbmvStridedBatched_orig(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasChbmvStridedBatched")
#else
    function hipblasChbmvStridedBatched_orig(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasChbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChbmvStridedBatched_full_rank,hipblasChbmvStridedBatched_rank_0,hipblasChbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZhbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhbmvStridedBatched_orig(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasZhbmvStridedBatched")
#else
    function hipblasZhbmvStridedBatched_orig(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasZhbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhbmvStridedBatched_full_rank,hipblasZhbmvStridedBatched_rank_0,hipblasZhbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasChemv
#ifdef USE_CUDA_NAMES
    function hipblasChemv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasChemv_v2")
#else
    function hipblasChemv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasChemv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChemv_full_rank,hipblasChemv_rank_0,hipblasChemv_rank_1
#endif

  end interface
  
  interface hipblasZhemv
#ifdef USE_CUDA_NAMES
    function hipblasZhemv_orig(handle,uplo,n,alpha,A,da,x,incx,beta,y,incy) bind(c, name="cublasZhemv_v2")
#else
    function hipblasZhemv_orig(handle,uplo,n,alpha,A,da,x,incx,beta,y,incy) bind(c, name="hipblasZhemv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: da
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhemv_full_rank,hipblasZhemv_rank_0,hipblasZhemv_rank_1
#endif

  end interface
  
  interface hipblasChemvBatched
#ifdef USE_CUDA_NAMES
    function hipblasChemvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="cublasChemvBatched")
#else
    function hipblasChemvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="hipblasChemvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChemvBatched_full_rank,hipblasChemvBatched_rank_0,hipblasChemvBatched_rank_1
#endif

  end interface
  
  interface hipblasZhemvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhemvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="cublasZhemvBatched")
#else
    function hipblasZhemvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count) bind(c, name="hipblasZhemvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhemvBatched_full_rank,hipblasZhemvBatched_rank_0,hipblasZhemvBatched_rank_1
#endif

  end interface
  
  interface hipblasChemvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasChemvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="cublasChemvStridedBatched")
#else
    function hipblasChemvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="hipblasChemvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChemvStridedBatched_full_rank,hipblasChemvStridedBatched_rank_0,hipblasChemvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZhemvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhemvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="cublasZhemvStridedBatched")
#else
    function hipblasZhemvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count) bind(c, name="hipblasZhemvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhemvStridedBatched_full_rank,hipblasZhemvStridedBatched_rank_0,hipblasZhemvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCher
#ifdef USE_CUDA_NAMES
    function hipblasCher_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="cublasCher_v2")
#else
    function hipblasCher_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="hipblasCher")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCher_full_rank,hipblasCher_rank_0,hipblasCher_rank_1
#endif

  end interface
  
  interface hipblasZher
#ifdef USE_CUDA_NAMES
    function hipblasZher_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="cublasZher_v2")
#else
    function hipblasZher_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="hipblasZher")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZher_full_rank,hipblasZher_rank_0,hipblasZher_rank_1
#endif

  end interface
  
  interface hipblasCherBatched
#ifdef USE_CUDA_NAMES
    function hipblasCherBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="cublasCherBatched")
#else
    function hipblasCherBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="hipblasCherBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCherBatched_full_rank,hipblasCherBatched_rank_0,hipblasCherBatched_rank_1
#endif

  end interface
  
  interface hipblasZherBatched
#ifdef USE_CUDA_NAMES
    function hipblasZherBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="cublasZherBatched")
#else
    function hipblasZherBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="hipblasZherBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZherBatched_full_rank,hipblasZherBatched_rank_0,hipblasZherBatched_rank_1
#endif

  end interface
  
  interface hipblasCherStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCherStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount) bind(c, name="cublasCherStridedBatched")
#else
    function hipblasCherStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount) bind(c, name="hipblasCherStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCherStridedBatched_full_rank,hipblasCherStridedBatched_rank_0,hipblasCherStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZherStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZherStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount) bind(c, name="cublasZherStridedBatched")
#else
    function hipblasZherStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount) bind(c, name="hipblasZherStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZherStridedBatched_full_rank,hipblasZherStridedBatched_rank_0,hipblasZherStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCher2
#ifdef USE_CUDA_NAMES
    function hipblasCher2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasCher2_v2")
#else
    function hipblasCher2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasCher2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCher2_full_rank,hipblasCher2_rank_0,hipblasCher2_rank_1
#endif

  end interface
  
  interface hipblasZher2
#ifdef USE_CUDA_NAMES
    function hipblasZher2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasZher2_v2")
#else
    function hipblasZher2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasZher2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZher2_full_rank,hipblasZher2_rank_0,hipblasZher2_rank_1
#endif

  end interface
  
  interface hipblasCher2Batched
#ifdef USE_CUDA_NAMES
    function hipblasCher2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasCher2Batched")
#else
    function hipblasCher2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasCher2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCher2Batched_full_rank,hipblasCher2Batched_rank_0,hipblasCher2Batched_rank_1
#endif

  end interface
  
  interface hipblasZher2Batched
#ifdef USE_CUDA_NAMES
    function hipblasZher2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasZher2Batched")
#else
    function hipblasZher2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasZher2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZher2Batched_full_rank,hipblasZher2Batched_rank_0,hipblasZher2Batched_rank_1
#endif

  end interface
  
  interface hipblasCher2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCher2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasCher2StridedBatched")
#else
    function hipblasCher2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasCher2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCher2StridedBatched_full_rank,hipblasCher2StridedBatched_rank_0,hipblasCher2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZher2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZher2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasZher2StridedBatched")
#else
    function hipblasZher2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasZher2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZher2StridedBatched_full_rank,hipblasZher2StridedBatched_rank_0,hipblasZher2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasChpmv
#ifdef USE_CUDA_NAMES
    function hipblasChpmv_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy) bind(c, name="cublasChpmv_v2")
#else
    function hipblasChpmv_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy) bind(c, name="hipblasChpmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChpmv_rank_0,hipblasChpmv_rank_1
#endif

  end interface
  
  interface hipblasZhpmv
#ifdef USE_CUDA_NAMES
    function hipblasZhpmv_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy) bind(c, name="cublasZhpmv_v2")
#else
    function hipblasZhpmv_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy) bind(c, name="hipblasZhpmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhpmv_rank_0,hipblasZhpmv_rank_1
#endif

  end interface
  
  interface hipblasChpmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasChpmvBatched_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount) bind(c, name="cublasChpmvBatched")
#else
    function hipblasChpmvBatched_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasChpmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChpmvBatched_full_rank,hipblasChpmvBatched_rank_0,hipblasChpmvBatched_rank_1
#endif

  end interface
  
  interface hipblasZhpmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhpmvBatched_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount) bind(c, name="cublasZhpmvBatched")
#else
    function hipblasZhpmvBatched_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasZhpmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhpmvBatched_full_rank,hipblasZhpmvBatched_rank_0,hipblasZhpmvBatched_rank_1
#endif

  end interface
  
  interface hipblasChpmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasChpmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasChpmvStridedBatched")
#else
    function hipblasChpmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasChpmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChpmvStridedBatched_rank_0,hipblasChpmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZhpmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhpmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasZhpmvStridedBatched")
#else
    function hipblasZhpmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasZhpmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhpmvStridedBatched_rank_0,hipblasZhpmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasChpr
#ifdef USE_CUDA_NAMES
    function hipblasChpr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="cublasChpr_v2")
#else
    function hipblasChpr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="hipblasChpr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChpr_rank_0,hipblasChpr_rank_1
#endif

  end interface
  
  interface hipblasZhpr
#ifdef USE_CUDA_NAMES
    function hipblasZhpr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="cublasZhpr_v2")
#else
    function hipblasZhpr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="hipblasZhpr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhpr_rank_0,hipblasZhpr_rank_1
#endif

  end interface
  
  interface hipblasChprBatched
#ifdef USE_CUDA_NAMES
    function hipblasChprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="cublasChprBatched")
#else
    function hipblasChprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="hipblasChprBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChprBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChprBatched_full_rank,hipblasChprBatched_rank_0,hipblasChprBatched_rank_1
#endif

  end interface
  
  interface hipblasZhprBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="cublasZhprBatched")
#else
    function hipblasZhprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="hipblasZhprBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhprBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhprBatched_full_rank,hipblasZhprBatched_rank_0,hipblasZhprBatched_rank_1
#endif

  end interface
  
  interface hipblasChprStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasChprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="cublasChprStridedBatched")
#else
    function hipblasChprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="hipblasChprStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChprStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChprStridedBatched_rank_0,hipblasChprStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZhprStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="cublasZhprStridedBatched")
#else
    function hipblasZhprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="hipblasZhprStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhprStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhprStridedBatched_rank_0,hipblasZhprStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasChpr2
#ifdef USE_CUDA_NAMES
    function hipblasChpr2_orig(handle,uplo,n,alpha,x,incx,y,incy,AP) bind(c, name="cublasChpr2_v2")
#else
    function hipblasChpr2_orig(handle,uplo,n,alpha,x,incx,y,incy,AP) bind(c, name="hipblasChpr2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChpr2_rank_0,hipblasChpr2_rank_1
#endif

  end interface
  
  interface hipblasZhpr2
#ifdef USE_CUDA_NAMES
    function hipblasZhpr2_orig(handle,uplo,n,alpha,x,incx,y,incy,AP) bind(c, name="cublasZhpr2_v2")
#else
    function hipblasZhpr2_orig(handle,uplo,n,alpha,x,incx,y,incy,AP) bind(c, name="hipblasZhpr2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhpr2_rank_0,hipblasZhpr2_rank_1
#endif

  end interface
  
  interface hipblasChpr2Batched
#ifdef USE_CUDA_NAMES
    function hipblasChpr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount) bind(c, name="cublasChpr2Batched")
#else
    function hipblasChpr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount) bind(c, name="hipblasChpr2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChpr2Batched_full_rank,hipblasChpr2Batched_rank_0,hipblasChpr2Batched_rank_1
#endif

  end interface
  
  interface hipblasZhpr2Batched
#ifdef USE_CUDA_NAMES
    function hipblasZhpr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount) bind(c, name="cublasZhpr2Batched")
#else
    function hipblasZhpr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount) bind(c, name="hipblasZhpr2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhpr2Batched_full_rank,hipblasZhpr2Batched_rank_0,hipblasZhpr2Batched_rank_1
#endif

  end interface
  
  interface hipblasChpr2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasChpr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount) bind(c, name="cublasChpr2StridedBatched")
#else
    function hipblasChpr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount) bind(c, name="hipblasChpr2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChpr2StridedBatched_rank_0,hipblasChpr2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZhpr2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhpr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount) bind(c, name="cublasZhpr2StridedBatched")
#else
    function hipblasZhpr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount) bind(c, name="hipblasZhpr2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhpr2StridedBatched_rank_0,hipblasZhpr2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSsbmv
#ifdef USE_CUDA_NAMES
    function hipblasSsbmv_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasSsbmv_v2")
#else
    function hipblasSsbmv_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasSsbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsbmv_full_rank,hipblasSsbmv_rank_0,hipblasSsbmv_rank_1
#endif

  end interface
  
  interface hipblasDsbmv
#ifdef USE_CUDA_NAMES
    function hipblasDsbmv_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasDsbmv_v2")
#else
    function hipblasDsbmv_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasDsbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsbmv_full_rank,hipblasDsbmv_rank_0,hipblasDsbmv_rank_1
#endif

  end interface
  
  interface hipblasSsbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsbmvBatched_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasSsbmvBatched")
#else
    function hipblasSsbmvBatched_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasSsbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsbmvBatched_full_rank,hipblasSsbmvBatched_rank_0,hipblasSsbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasDsbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsbmvBatched_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasDsbmvBatched")
#else
    function hipblasDsbmvBatched_orig(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasDsbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsbmvBatched_full_rank,hipblasDsbmvBatched_rank_0,hipblasDsbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasSsbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsbmvStridedBatched_orig(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasSsbmvStridedBatched")
#else
    function hipblasSsbmvStridedBatched_orig(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasSsbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsbmvStridedBatched_full_rank,hipblasSsbmvStridedBatched_rank_0,hipblasSsbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsbmvStridedBatched_orig(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasDsbmvStridedBatched")
#else
    function hipblasDsbmvStridedBatched_orig(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasDsbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsbmvStridedBatched_full_rank,hipblasDsbmvStridedBatched_rank_0,hipblasDsbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSspmv
#ifdef USE_CUDA_NAMES
    function hipblasSspmv_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy) bind(c, name="cublasSspmv_v2")
#else
    function hipblasSspmv_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy) bind(c, name="hipblasSspmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSspmv_rank_0,hipblasSspmv_rank_1
#endif

  end interface
  
  interface hipblasDspmv
#ifdef USE_CUDA_NAMES
    function hipblasDspmv_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy) bind(c, name="cublasDspmv_v2")
#else
    function hipblasDspmv_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy) bind(c, name="hipblasDspmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDspmv_rank_0,hipblasDspmv_rank_1
#endif

  end interface
  
  interface hipblasSspmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasSspmvBatched_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount) bind(c, name="cublasSspmvBatched")
#else
    function hipblasSspmvBatched_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasSspmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSspmvBatched_full_rank,hipblasSspmvBatched_rank_0,hipblasSspmvBatched_rank_1
#endif

  end interface
  
  interface hipblasDspmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDspmvBatched_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount) bind(c, name="cublasDspmvBatched")
#else
    function hipblasDspmvBatched_orig(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasDspmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDspmvBatched_full_rank,hipblasDspmvBatched_rank_0,hipblasDspmvBatched_rank_1
#endif

  end interface
  
  interface hipblasSspmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSspmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasSspmvStridedBatched")
#else
    function hipblasSspmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasSspmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSspmvStridedBatched_rank_0,hipblasSspmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDspmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDspmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasDspmvStridedBatched")
#else
    function hipblasDspmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasDspmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDspmvStridedBatched_rank_0,hipblasDspmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSspr
#ifdef USE_CUDA_NAMES
    function hipblasSspr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="cublasSspr_v2")
#else
    function hipblasSspr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="hipblasSspr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSspr_rank_0,hipblasSspr_rank_1
#endif

  end interface
  
  interface hipblasDspr
#ifdef USE_CUDA_NAMES
    function hipblasDspr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="cublasDspr_v2")
#else
    function hipblasDspr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="hipblasDspr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDspr_rank_0,hipblasDspr_rank_1
#endif

  end interface
  
  interface hipblasCspr
#ifdef USE_CUDA_NAMES
    function hipblasCspr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="cublasCspr")
#else
    function hipblasCspr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="hipblasCspr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCspr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCspr_rank_0,hipblasCspr_rank_1
#endif

  end interface
  
  interface hipblasZspr
#ifdef USE_CUDA_NAMES
    function hipblasZspr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="cublasZspr")
#else
    function hipblasZspr_orig(handle,uplo,n,alpha,x,incx,AP) bind(c, name="hipblasZspr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZspr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZspr_rank_0,hipblasZspr_rank_1
#endif

  end interface
  
  interface hipblasSsprBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="cublasSsprBatched")
#else
    function hipblasSsprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="hipblasSsprBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsprBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsprBatched_full_rank,hipblasSsprBatched_rank_0,hipblasSsprBatched_rank_1
#endif

  end interface
  
  interface hipblasDsprBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="cublasDsprBatched")
#else
    function hipblasDsprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="hipblasDsprBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsprBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsprBatched_full_rank,hipblasDsprBatched_rank_0,hipblasDsprBatched_rank_1
#endif

  end interface
  
  interface hipblasCsprBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="cublasCsprBatched")
#else
    function hipblasCsprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="hipblasCsprBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsprBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsprBatched_full_rank,hipblasCsprBatched_rank_0,hipblasCsprBatched_rank_1
#endif

  end interface
  
  interface hipblasZsprBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="cublasZsprBatched")
#else
    function hipblasZsprBatched_orig(handle,uplo,n,alpha,x,incx,AP,batchCount) bind(c, name="hipblasZsprBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsprBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsprBatched_full_rank,hipblasZsprBatched_rank_0,hipblasZsprBatched_rank_1
#endif

  end interface
  
  interface hipblasSsprStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="cublasSsprStridedBatched")
#else
    function hipblasSsprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="hipblasSsprStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsprStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsprStridedBatched_rank_0,hipblasSsprStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsprStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="cublasDsprStridedBatched")
#else
    function hipblasDsprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="hipblasDsprStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsprStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsprStridedBatched_rank_0,hipblasDsprStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsprStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="cublasCsprStridedBatched")
#else
    function hipblasCsprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="hipblasCsprStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsprStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsprStridedBatched_rank_0,hipblasCsprStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZsprStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="cublasZsprStridedBatched")
#else
    function hipblasZsprStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount) bind(c, name="hipblasZsprStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsprStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsprStridedBatched_rank_0,hipblasZsprStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSspr2
#ifdef USE_CUDA_NAMES
    function hipblasSspr2_orig(handle,uplo,n,alpha,x,incx,y,incy,AP) bind(c, name="cublasSspr2_v2")
#else
    function hipblasSspr2_orig(handle,uplo,n,alpha,x,incx,y,incy,AP) bind(c, name="hipblasSspr2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSspr2_rank_0,hipblasSspr2_rank_1
#endif

  end interface
  
  interface hipblasDspr2
#ifdef USE_CUDA_NAMES
    function hipblasDspr2_orig(handle,uplo,n,alpha,x,incx,y,incy,AP) bind(c, name="cublasDspr2_v2")
#else
    function hipblasDspr2_orig(handle,uplo,n,alpha,x,incx,y,incy,AP) bind(c, name="hipblasDspr2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDspr2_rank_0,hipblasDspr2_rank_1
#endif

  end interface
  
  interface hipblasSspr2Batched
#ifdef USE_CUDA_NAMES
    function hipblasSspr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount) bind(c, name="cublasSspr2Batched")
#else
    function hipblasSspr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount) bind(c, name="hipblasSspr2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSspr2Batched_full_rank,hipblasSspr2Batched_rank_0,hipblasSspr2Batched_rank_1
#endif

  end interface
  
  interface hipblasDspr2Batched
#ifdef USE_CUDA_NAMES
    function hipblasDspr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount) bind(c, name="cublasDspr2Batched")
#else
    function hipblasDspr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount) bind(c, name="hipblasDspr2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDspr2Batched_full_rank,hipblasDspr2Batched_rank_0,hipblasDspr2Batched_rank_1
#endif

  end interface
  
  interface hipblasSspr2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSspr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount) bind(c, name="cublasSspr2StridedBatched")
#else
    function hipblasSspr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount) bind(c, name="hipblasSspr2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSspr2StridedBatched_rank_0,hipblasSspr2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDspr2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDspr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount) bind(c, name="cublasDspr2StridedBatched")
#else
    function hipblasDspr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount) bind(c, name="hipblasDspr2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDspr2StridedBatched_rank_0,hipblasDspr2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSsymv
#ifdef USE_CUDA_NAMES
    function hipblasSsymv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasSsymv_v2")
#else
    function hipblasSsymv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasSsymv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsymv_full_rank,hipblasSsymv_rank_0,hipblasSsymv_rank_1
#endif

  end interface
  
  interface hipblasDsymv
#ifdef USE_CUDA_NAMES
    function hipblasDsymv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasDsymv_v2")
#else
    function hipblasDsymv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasDsymv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsymv_full_rank,hipblasDsymv_rank_0,hipblasDsymv_rank_1
#endif

  end interface
  
  interface hipblasCsymv
#ifdef USE_CUDA_NAMES
    function hipblasCsymv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasCsymv_v2")
#else
    function hipblasCsymv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasCsymv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsymv_full_rank,hipblasCsymv_rank_0,hipblasCsymv_rank_1
#endif

  end interface
  
  interface hipblasZsymv
#ifdef USE_CUDA_NAMES
    function hipblasZsymv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="cublasZsymv_v2")
#else
    function hipblasZsymv_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy) bind(c, name="hipblasZsymv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsymv_full_rank,hipblasZsymv_rank_0,hipblasZsymv_rank_1
#endif

  end interface
  
  interface hipblasSsymvBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsymvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasSsymvBatched")
#else
    function hipblasSsymvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasSsymvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsymvBatched_full_rank,hipblasSsymvBatched_rank_0,hipblasSsymvBatched_rank_1
#endif

  end interface
  
  interface hipblasDsymvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsymvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasDsymvBatched")
#else
    function hipblasDsymvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasDsymvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsymvBatched_full_rank,hipblasDsymvBatched_rank_0,hipblasDsymvBatched_rank_1
#endif

  end interface
  
  interface hipblasCsymvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsymvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasCsymvBatched")
#else
    function hipblasCsymvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasCsymvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsymvBatched_full_rank,hipblasCsymvBatched_rank_0,hipblasCsymvBatched_rank_1
#endif

  end interface
  
  interface hipblasZsymvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsymvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="cublasZsymvBatched")
#else
    function hipblasZsymvBatched_orig(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount) bind(c, name="hipblasZsymvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      type(c_ptr) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsymvBatched_full_rank,hipblasZsymvBatched_rank_0,hipblasZsymvBatched_rank_1
#endif

  end interface
  
  interface hipblasSsymvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsymvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasSsymvStridedBatched")
#else
    function hipblasSsymvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasSsymvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsymvStridedBatched_full_rank,hipblasSsymvStridedBatched_rank_0,hipblasSsymvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsymvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsymvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasDsymvStridedBatched")
#else
    function hipblasDsymvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasDsymvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsymvStridedBatched_full_rank,hipblasDsymvStridedBatched_rank_0,hipblasDsymvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsymvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsymvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasCsymvStridedBatched")
#else
    function hipblasCsymvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasCsymvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsymvStridedBatched_full_rank,hipblasCsymvStridedBatched_rank_0,hipblasCsymvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZsymvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsymvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="cublasZsymvStridedBatched")
#else
    function hipblasZsymvStridedBatched_orig(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount) bind(c, name="hipblasZsymvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsymvStridedBatched_full_rank,hipblasZsymvStridedBatched_rank_0,hipblasZsymvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyr
#ifdef USE_CUDA_NAMES
    function hipblasSsyr_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="cublasSsyr_v2")
#else
    function hipblasSsyr_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="hipblasSsyr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyr_full_rank,hipblasSsyr_rank_0,hipblasSsyr_rank_1
#endif

  end interface
  
  interface hipblasDsyr
#ifdef USE_CUDA_NAMES
    function hipblasDsyr_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="cublasDsyr_v2")
#else
    function hipblasDsyr_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="hipblasDsyr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyr_full_rank,hipblasDsyr_rank_0,hipblasDsyr_rank_1
#endif

  end interface
  
  interface hipblasCsyr
#ifdef USE_CUDA_NAMES
    function hipblasCsyr_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="cublasCsyr_v2")
#else
    function hipblasCsyr_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="hipblasCsyr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyr_full_rank,hipblasCsyr_rank_0,hipblasCsyr_rank_1
#endif

  end interface
  
  interface hipblasZsyr
#ifdef USE_CUDA_NAMES
    function hipblasZsyr_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="cublasZsyr_v2")
#else
    function hipblasZsyr_orig(handle,uplo,n,alpha,x,incx,A,lda) bind(c, name="hipblasZsyr")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyr_full_rank,hipblasZsyr_rank_0,hipblasZsyr_rank_1
#endif

  end interface
  
  interface hipblasSsyrBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyrBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="cublasSsyrBatched")
#else
    function hipblasSsyrBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="hipblasSsyrBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyrBatched_full_rank,hipblasSsyrBatched_rank_0,hipblasSsyrBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyrBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyrBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="cublasDsyrBatched")
#else
    function hipblasDsyrBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="hipblasDsyrBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyrBatched_full_rank,hipblasDsyrBatched_rank_0,hipblasDsyrBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyrBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyrBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="cublasCsyrBatched")
#else
    function hipblasCsyrBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="hipblasCsyrBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyrBatched_full_rank,hipblasCsyrBatched_rank_0,hipblasCsyrBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyrBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyrBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="cublasZsyrBatched")
#else
    function hipblasZsyrBatched_orig(handle,uplo,n,alpha,x,incx,A,lda,batchCount) bind(c, name="hipblasZsyrBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyrBatched_full_rank,hipblasZsyrBatched_rank_0,hipblasZsyrBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyrStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyrStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount) bind(c, name="cublasSsyrStridedBatched")
#else
    function hipblasSsyrStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount) bind(c, name="hipblasSsyrStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyrStridedBatched_full_rank,hipblasSsyrStridedBatched_rank_0,hipblasSsyrStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyrStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyrStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount) bind(c, name="cublasDsyrStridedBatched")
#else
    function hipblasDsyrStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount) bind(c, name="hipblasDsyrStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyrStridedBatched_full_rank,hipblasDsyrStridedBatched_rank_0,hipblasDsyrStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyrStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyrStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount) bind(c, name="cublasCsyrStridedBatched")
#else
    function hipblasCsyrStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount) bind(c, name="hipblasCsyrStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyrStridedBatched_full_rank,hipblasCsyrStridedBatched_rank_0,hipblasCsyrStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyrStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyrStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount) bind(c, name="cublasZsyrStridedBatched")
#else
    function hipblasZsyrStridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount) bind(c, name="hipblasZsyrStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyrStridedBatched_full_rank,hipblasZsyrStridedBatched_rank_0,hipblasZsyrStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyr2
#ifdef USE_CUDA_NAMES
    function hipblasSsyr2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasSsyr2_v2")
#else
    function hipblasSsyr2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasSsyr2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyr2_full_rank,hipblasSsyr2_rank_0,hipblasSsyr2_rank_1
#endif

  end interface
  
  interface hipblasDsyr2
#ifdef USE_CUDA_NAMES
    function hipblasDsyr2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasDsyr2_v2")
#else
    function hipblasDsyr2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasDsyr2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyr2_full_rank,hipblasDsyr2_rank_0,hipblasDsyr2_rank_1
#endif

  end interface
  
  interface hipblasCsyr2
#ifdef USE_CUDA_NAMES
    function hipblasCsyr2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasCsyr2_v2")
#else
    function hipblasCsyr2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasCsyr2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyr2_full_rank,hipblasCsyr2_rank_0,hipblasCsyr2_rank_1
#endif

  end interface
  
  interface hipblasZsyr2
#ifdef USE_CUDA_NAMES
    function hipblasZsyr2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="cublasZsyr2_v2")
#else
    function hipblasZsyr2_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda) bind(c, name="hipblasZsyr2")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: A
      integer(c_int),value :: lda
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyr2_full_rank,hipblasZsyr2_rank_0,hipblasZsyr2_rank_1
#endif

  end interface
  
  interface hipblasSsyr2Batched
#ifdef USE_CUDA_NAMES
    function hipblasSsyr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasSsyr2Batched")
#else
    function hipblasSsyr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasSsyr2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyr2Batched_full_rank,hipblasSsyr2Batched_rank_0,hipblasSsyr2Batched_rank_1
#endif

  end interface
  
  interface hipblasDsyr2Batched
#ifdef USE_CUDA_NAMES
    function hipblasDsyr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasDsyr2Batched")
#else
    function hipblasDsyr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasDsyr2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyr2Batched_full_rank,hipblasDsyr2Batched_rank_0,hipblasDsyr2Batched_rank_1
#endif

  end interface
  
  interface hipblasCsyr2Batched
#ifdef USE_CUDA_NAMES
    function hipblasCsyr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasCsyr2Batched")
#else
    function hipblasCsyr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasCsyr2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyr2Batched_full_rank,hipblasCsyr2Batched_rank_0,hipblasCsyr2Batched_rank_1
#endif

  end interface
  
  interface hipblasZsyr2Batched
#ifdef USE_CUDA_NAMES
    function hipblasZsyr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="cublasZsyr2Batched")
#else
    function hipblasZsyr2Batched_orig(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount) bind(c, name="hipblasZsyr2Batched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2Batched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyr2Batched_full_rank,hipblasZsyr2Batched_rank_0,hipblasZsyr2Batched_rank_1
#endif

  end interface
  
  interface hipblasSsyr2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasSsyr2StridedBatched")
#else
    function hipblasSsyr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasSsyr2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyr2StridedBatched_full_rank,hipblasSsyr2StridedBatched_rank_0,hipblasSsyr2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyr2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasDsyr2StridedBatched")
#else
    function hipblasDsyr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasDsyr2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyr2StridedBatched_full_rank,hipblasDsyr2StridedBatched_rank_0,hipblasDsyr2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyr2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasCsyr2StridedBatched")
#else
    function hipblasCsyr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasCsyr2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyr2StridedBatched_full_rank,hipblasCsyr2StridedBatched_rank_0,hipblasCsyr2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyr2StridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="cublasZsyr2StridedBatched")
#else
    function hipblasZsyr2StridedBatched_orig(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount) bind(c, name="hipblasZsyr2StridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2StridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyr2StridedBatched_full_rank,hipblasZsyr2StridedBatched_rank_0,hipblasZsyr2StridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStbmv
#ifdef USE_CUDA_NAMES
    function hipblasStbmv_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx) bind(c, name="cublasStbmv_v2")
#else
    function hipblasStbmv_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx) bind(c, name="hipblasStbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStbmv_full_rank,hipblasStbmv_rank_0,hipblasStbmv_rank_1
#endif

  end interface
  
  interface hipblasDtbmv
#ifdef USE_CUDA_NAMES
    function hipblasDtbmv_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx) bind(c, name="cublasDtbmv_v2")
#else
    function hipblasDtbmv_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx) bind(c, name="hipblasDtbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtbmv_full_rank,hipblasDtbmv_rank_0,hipblasDtbmv_rank_1
#endif

  end interface
  
  interface hipblasCtbmv
#ifdef USE_CUDA_NAMES
    function hipblasCtbmv_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx) bind(c, name="cublasCtbmv_v2")
#else
    function hipblasCtbmv_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx) bind(c, name="hipblasCtbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtbmv_full_rank,hipblasCtbmv_rank_0,hipblasCtbmv_rank_1
#endif

  end interface
  
  interface hipblasZtbmv
#ifdef USE_CUDA_NAMES
    function hipblasZtbmv_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx) bind(c, name="cublasZtbmv_v2")
#else
    function hipblasZtbmv_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx) bind(c, name="hipblasZtbmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtbmv_full_rank,hipblasZtbmv_rank_0,hipblasZtbmv_rank_1
#endif

  end interface
  
  interface hipblasStbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasStbmvBatched_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count) bind(c, name="cublasStbmvBatched")
#else
    function hipblasStbmvBatched_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count) bind(c, name="hipblasStbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStbmvBatched_full_rank,hipblasStbmvBatched_rank_0,hipblasStbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasDtbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtbmvBatched_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count) bind(c, name="cublasDtbmvBatched")
#else
    function hipblasDtbmvBatched_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count) bind(c, name="hipblasDtbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtbmvBatched_full_rank,hipblasDtbmvBatched_rank_0,hipblasDtbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasCtbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtbmvBatched_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count) bind(c, name="cublasCtbmvBatched")
#else
    function hipblasCtbmvBatched_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count) bind(c, name="hipblasCtbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtbmvBatched_full_rank,hipblasCtbmvBatched_rank_0,hipblasCtbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasZtbmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtbmvBatched_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count) bind(c, name="cublasZtbmvBatched")
#else
    function hipblasZtbmvBatched_orig(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count) bind(c, name="hipblasZtbmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtbmvBatched_full_rank,hipblasZtbmvBatched_rank_0,hipblasZtbmvBatched_rank_1
#endif

  end interface
  
  interface hipblasStbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="cublasStbmvStridedBatched")
#else
    function hipblasStbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="hipblasStbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStbmvStridedBatched_full_rank,hipblasStbmvStridedBatched_rank_0,hipblasStbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="cublasDtbmvStridedBatched")
#else
    function hipblasDtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="hipblasDtbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtbmvStridedBatched_full_rank,hipblasDtbmvStridedBatched_rank_0,hipblasDtbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="cublasCtbmvStridedBatched")
#else
    function hipblasCtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="hipblasCtbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtbmvStridedBatched_full_rank,hipblasCtbmvStridedBatched_rank_0,hipblasCtbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtbmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="cublasZtbmvStridedBatched")
#else
    function hipblasZtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="hipblasZtbmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtbmvStridedBatched_full_rank,hipblasZtbmvStridedBatched_rank_0,hipblasZtbmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStbsv
#ifdef USE_CUDA_NAMES
    function hipblasStbsv_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx) bind(c, name="cublasStbsv_v2")
#else
    function hipblasStbsv_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx) bind(c, name="hipblasStbsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStbsv_full_rank,hipblasStbsv_rank_0,hipblasStbsv_rank_1
#endif

  end interface
  
  interface hipblasDtbsv
#ifdef USE_CUDA_NAMES
    function hipblasDtbsv_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx) bind(c, name="cublasDtbsv_v2")
#else
    function hipblasDtbsv_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx) bind(c, name="hipblasDtbsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtbsv_full_rank,hipblasDtbsv_rank_0,hipblasDtbsv_rank_1
#endif

  end interface
  
  interface hipblasCtbsv
#ifdef USE_CUDA_NAMES
    function hipblasCtbsv_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx) bind(c, name="cublasCtbsv_v2")
#else
    function hipblasCtbsv_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx) bind(c, name="hipblasCtbsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtbsv_full_rank,hipblasCtbsv_rank_0,hipblasCtbsv_rank_1
#endif

  end interface
  
  interface hipblasZtbsv
#ifdef USE_CUDA_NAMES
    function hipblasZtbsv_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx) bind(c, name="cublasZtbsv_v2")
#else
    function hipblasZtbsv_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx) bind(c, name="hipblasZtbsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtbsv_full_rank,hipblasZtbsv_rank_0,hipblasZtbsv_rank_1
#endif

  end interface
  
  interface hipblasStbsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasStbsvBatched_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount) bind(c, name="cublasStbsvBatched")
#else
    function hipblasStbsvBatched_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount) bind(c, name="hipblasStbsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStbsvBatched_full_rank,hipblasStbsvBatched_rank_0,hipblasStbsvBatched_rank_1
#endif

  end interface
  
  interface hipblasDtbsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtbsvBatched_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount) bind(c, name="cublasDtbsvBatched")
#else
    function hipblasDtbsvBatched_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount) bind(c, name="hipblasDtbsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtbsvBatched_full_rank,hipblasDtbsvBatched_rank_0,hipblasDtbsvBatched_rank_1
#endif

  end interface
  
  interface hipblasCtbsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtbsvBatched_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount) bind(c, name="cublasCtbsvBatched")
#else
    function hipblasCtbsvBatched_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount) bind(c, name="hipblasCtbsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtbsvBatched_full_rank,hipblasCtbsvBatched_rank_0,hipblasCtbsvBatched_rank_1
#endif

  end interface
  
  interface hipblasZtbsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtbsvBatched_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount) bind(c, name="cublasZtbsvBatched")
#else
    function hipblasZtbsvBatched_orig(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount) bind(c, name="hipblasZtbsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtbsvBatched_full_rank,hipblasZtbsvBatched_rank_0,hipblasZtbsvBatched_rank_1
#endif

  end interface
  
  interface hipblasStbsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount) bind(c, name="cublasStbsvStridedBatched")
#else
    function hipblasStbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount) bind(c, name="hipblasStbsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStbsvStridedBatched_full_rank,hipblasStbsvStridedBatched_rank_0,hipblasStbsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtbsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount) bind(c, name="cublasDtbsvStridedBatched")
#else
    function hipblasDtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount) bind(c, name="hipblasDtbsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtbsvStridedBatched_full_rank,hipblasDtbsvStridedBatched_rank_0,hipblasDtbsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtbsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount) bind(c, name="cublasCtbsvStridedBatched")
#else
    function hipblasCtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount) bind(c, name="hipblasCtbsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtbsvStridedBatched_full_rank,hipblasCtbsvStridedBatched_rank_0,hipblasCtbsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtbsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount) bind(c, name="cublasZtbsvStridedBatched")
#else
    function hipblasZtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount) bind(c, name="hipblasZtbsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtbsvStridedBatched_full_rank,hipblasZtbsvStridedBatched_rank_0,hipblasZtbsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStpmv
#ifdef USE_CUDA_NAMES
    function hipblasStpmv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="cublasStpmv_v2")
#else
    function hipblasStpmv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="hipblasStpmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStpmv_rank_0,hipblasStpmv_rank_1
#endif

  end interface
  
  interface hipblasDtpmv
#ifdef USE_CUDA_NAMES
    function hipblasDtpmv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="cublasDtpmv_v2")
#else
    function hipblasDtpmv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="hipblasDtpmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtpmv_rank_0,hipblasDtpmv_rank_1
#endif

  end interface
  
  interface hipblasCtpmv
#ifdef USE_CUDA_NAMES
    function hipblasCtpmv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="cublasCtpmv_v2")
#else
    function hipblasCtpmv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="hipblasCtpmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtpmv_rank_0,hipblasCtpmv_rank_1
#endif

  end interface
  
  interface hipblasZtpmv
#ifdef USE_CUDA_NAMES
    function hipblasZtpmv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="cublasZtpmv_v2")
#else
    function hipblasZtpmv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="hipblasZtpmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtpmv_rank_0,hipblasZtpmv_rank_1
#endif

  end interface
  
  interface hipblasStpmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasStpmvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="cublasStpmvBatched")
#else
    function hipblasStpmvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="hipblasStpmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStpmvBatched_full_rank,hipblasStpmvBatched_rank_0,hipblasStpmvBatched_rank_1
#endif

  end interface
  
  interface hipblasDtpmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtpmvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="cublasDtpmvBatched")
#else
    function hipblasDtpmvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="hipblasDtpmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtpmvBatched_full_rank,hipblasDtpmvBatched_rank_0,hipblasDtpmvBatched_rank_1
#endif

  end interface
  
  interface hipblasCtpmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtpmvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="cublasCtpmvBatched")
#else
    function hipblasCtpmvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="hipblasCtpmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtpmvBatched_full_rank,hipblasCtpmvBatched_rank_0,hipblasCtpmvBatched_rank_1
#endif

  end interface
  
  interface hipblasZtpmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtpmvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="cublasZtpmvBatched")
#else
    function hipblasZtpmvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="hipblasZtpmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtpmvBatched_full_rank,hipblasZtpmvBatched_rank_0,hipblasZtpmvBatched_rank_1
#endif

  end interface
  
  interface hipblasStpmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount) bind(c, name="cublasStpmvStridedBatched")
#else
    function hipblasStpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount) bind(c, name="hipblasStpmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStpmvStridedBatched_rank_0,hipblasStpmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtpmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount) bind(c, name="cublasDtpmvStridedBatched")
#else
    function hipblasDtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount) bind(c, name="hipblasDtpmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtpmvStridedBatched_rank_0,hipblasDtpmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtpmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount) bind(c, name="cublasCtpmvStridedBatched")
#else
    function hipblasCtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount) bind(c, name="hipblasCtpmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtpmvStridedBatched_rank_0,hipblasCtpmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtpmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount) bind(c, name="cublasZtpmvStridedBatched")
#else
    function hipblasZtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount) bind(c, name="hipblasZtpmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtpmvStridedBatched_rank_0,hipblasZtpmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStpsv
#ifdef USE_CUDA_NAMES
    function hipblasStpsv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="cublasStpsv_v2")
#else
    function hipblasStpsv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="hipblasStpsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStpsv_rank_0,hipblasStpsv_rank_1
#endif

  end interface
  
  interface hipblasDtpsv
#ifdef USE_CUDA_NAMES
    function hipblasDtpsv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="cublasDtpsv_v2")
#else
    function hipblasDtpsv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="hipblasDtpsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtpsv_rank_0,hipblasDtpsv_rank_1
#endif

  end interface
  
  interface hipblasCtpsv
#ifdef USE_CUDA_NAMES
    function hipblasCtpsv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="cublasCtpsv_v2")
#else
    function hipblasCtpsv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="hipblasCtpsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtpsv_rank_0,hipblasCtpsv_rank_1
#endif

  end interface
  
  interface hipblasZtpsv
#ifdef USE_CUDA_NAMES
    function hipblasZtpsv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="cublasZtpsv_v2")
#else
    function hipblasZtpsv_orig(handle,uplo,transA,diag,m,AP,x,incx) bind(c, name="hipblasZtpsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtpsv_rank_0,hipblasZtpsv_rank_1
#endif

  end interface
  
  interface hipblasStpsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasStpsvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="cublasStpsvBatched")
#else
    function hipblasStpsvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="hipblasStpsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStpsvBatched_full_rank,hipblasStpsvBatched_rank_0,hipblasStpsvBatched_rank_1
#endif

  end interface
  
  interface hipblasDtpsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtpsvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="cublasDtpsvBatched")
#else
    function hipblasDtpsvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="hipblasDtpsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtpsvBatched_full_rank,hipblasDtpsvBatched_rank_0,hipblasDtpsvBatched_rank_1
#endif

  end interface
  
  interface hipblasCtpsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtpsvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="cublasCtpsvBatched")
#else
    function hipblasCtpsvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="hipblasCtpsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtpsvBatched_full_rank,hipblasCtpsvBatched_rank_0,hipblasCtpsvBatched_rank_1
#endif

  end interface
  
  interface hipblasZtpsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtpsvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="cublasZtpsvBatched")
#else
    function hipblasZtpsvBatched_orig(handle,uplo,transA,diag,m,AP,x,incx,batchCount) bind(c, name="hipblasZtpsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtpsvBatched_full_rank,hipblasZtpsvBatched_rank_0,hipblasZtpsvBatched_rank_1
#endif

  end interface
  
  interface hipblasStpsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount) bind(c, name="cublasStpsvStridedBatched")
#else
    function hipblasStpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount) bind(c, name="hipblasStpsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStpsvStridedBatched_rank_0,hipblasStpsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtpsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount) bind(c, name="cublasDtpsvStridedBatched")
#else
    function hipblasDtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount) bind(c, name="hipblasDtpsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtpsvStridedBatched_rank_0,hipblasDtpsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtpsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount) bind(c, name="cublasCtpsvStridedBatched")
#else
    function hipblasCtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount) bind(c, name="hipblasCtpsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtpsvStridedBatched_rank_0,hipblasCtpsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtpsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount) bind(c, name="cublasZtpsvStridedBatched")
#else
    function hipblasZtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount) bind(c, name="hipblasZtpsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtpsvStridedBatched_rank_0,hipblasZtpsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStrmv
#ifdef USE_CUDA_NAMES
    function hipblasStrmv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="cublasStrmv_v2")
#else
    function hipblasStrmv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="hipblasStrmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrmv_full_rank,hipblasStrmv_rank_0,hipblasStrmv_rank_1
#endif

  end interface
  
  interface hipblasDtrmv
#ifdef USE_CUDA_NAMES
    function hipblasDtrmv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="cublasDtrmv_v2")
#else
    function hipblasDtrmv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="hipblasDtrmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrmv_full_rank,hipblasDtrmv_rank_0,hipblasDtrmv_rank_1
#endif

  end interface
  
  interface hipblasCtrmv
#ifdef USE_CUDA_NAMES
    function hipblasCtrmv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="cublasCtrmv_v2")
#else
    function hipblasCtrmv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="hipblasCtrmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrmv_full_rank,hipblasCtrmv_rank_0,hipblasCtrmv_rank_1
#endif

  end interface
  
  interface hipblasZtrmv
#ifdef USE_CUDA_NAMES
    function hipblasZtrmv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="cublasZtrmv_v2")
#else
    function hipblasZtrmv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="hipblasZtrmv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrmv_full_rank,hipblasZtrmv_rank_0,hipblasZtrmv_rank_1
#endif

  end interface
  
  interface hipblasStrmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrmvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="cublasStrmvBatched")
#else
    function hipblasStrmvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="hipblasStrmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrmvBatched_full_rank,hipblasStrmvBatched_rank_0,hipblasStrmvBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrmvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="cublasDtrmvBatched")
#else
    function hipblasDtrmvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="hipblasDtrmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrmvBatched_full_rank,hipblasDtrmvBatched_rank_0,hipblasDtrmvBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrmvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="cublasCtrmvBatched")
#else
    function hipblasCtrmvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="hipblasCtrmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrmvBatched_full_rank,hipblasCtrmvBatched_rank_0,hipblasCtrmvBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrmvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrmvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="cublasZtrmvBatched")
#else
    function hipblasZtrmvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="hipblasZtrmvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrmvBatched_full_rank,hipblasZtrmvBatched_rank_0,hipblasZtrmvBatched_rank_1
#endif

  end interface
  
  interface hipblasStrmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrmvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="cublasStrmvStridedBatched")
#else
    function hipblasStrmvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="hipblasStrmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrmvStridedBatched_full_rank,hipblasStrmvStridedBatched_rank_0,hipblasStrmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrmvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="cublasDtrmvStridedBatched")
#else
    function hipblasDtrmvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="hipblasDtrmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrmvStridedBatched_full_rank,hipblasDtrmvStridedBatched_rank_0,hipblasDtrmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrmvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="cublasCtrmvStridedBatched")
#else
    function hipblasCtrmvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="hipblasCtrmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrmvStridedBatched_full_rank,hipblasCtrmvStridedBatched_rank_0,hipblasCtrmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrmvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrmvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="cublasZtrmvStridedBatched")
#else
    function hipblasZtrmvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count) bind(c, name="hipblasZtrmvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrmvStridedBatched_full_rank,hipblasZtrmvStridedBatched_rank_0,hipblasZtrmvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStrsv
#ifdef USE_CUDA_NAMES
    function hipblasStrsv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="cublasStrsv_v2")
#else
    function hipblasStrsv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="hipblasStrsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrsv_full_rank,hipblasStrsv_rank_0,hipblasStrsv_rank_1
#endif

  end interface
  
  interface hipblasDtrsv
#ifdef USE_CUDA_NAMES
    function hipblasDtrsv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="cublasDtrsv_v2")
#else
    function hipblasDtrsv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="hipblasDtrsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrsv_full_rank,hipblasDtrsv_rank_0,hipblasDtrsv_rank_1
#endif

  end interface
  
  interface hipblasCtrsv
#ifdef USE_CUDA_NAMES
    function hipblasCtrsv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="cublasCtrsv_v2")
#else
    function hipblasCtrsv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="hipblasCtrsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrsv_full_rank,hipblasCtrsv_rank_0,hipblasCtrsv_rank_1
#endif

  end interface
  
  interface hipblasZtrsv
#ifdef USE_CUDA_NAMES
    function hipblasZtrsv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="cublasZtrsv_v2")
#else
    function hipblasZtrsv_orig(handle,uplo,transA,diag,m,A,lda,x,incx) bind(c, name="hipblasZtrsv")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsv_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrsv_full_rank,hipblasZtrsv_rank_0,hipblasZtrsv_rank_1
#endif

  end interface
  
  interface hipblasStrsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrsvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="cublasStrsvBatched")
#else
    function hipblasStrsvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="hipblasStrsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrsvBatched_full_rank,hipblasStrsvBatched_rank_0,hipblasStrsvBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrsvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="cublasDtrsvBatched")
#else
    function hipblasDtrsvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="hipblasDtrsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrsvBatched_full_rank,hipblasDtrsvBatched_rank_0,hipblasDtrsvBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrsvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="cublasCtrsvBatched")
#else
    function hipblasCtrsvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="hipblasCtrsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrsvBatched_full_rank,hipblasCtrsvBatched_rank_0,hipblasCtrsvBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrsvBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrsvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="cublasZtrsvBatched")
#else
    function hipblasZtrsvBatched_orig(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count) bind(c, name="hipblasZtrsvBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsvBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrsvBatched_full_rank,hipblasZtrsvBatched_rank_0,hipblasZtrsvBatched_rank_1
#endif

  end interface
  
  interface hipblasStrsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrsvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count) bind(c, name="cublasStrsvStridedBatched")
#else
    function hipblasStrsvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count) bind(c, name="hipblasStrsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrsvStridedBatched_full_rank,hipblasStrsvStridedBatched_rank_0,hipblasStrsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrsvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count) bind(c, name="cublasDtrsvStridedBatched")
#else
    function hipblasDtrsvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count) bind(c, name="hipblasDtrsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrsvStridedBatched_full_rank,hipblasDtrsvStridedBatched_rank_0,hipblasDtrsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrsvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count) bind(c, name="cublasCtrsvStridedBatched")
#else
    function hipblasCtrsvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count) bind(c, name="hipblasCtrsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrsvStridedBatched_full_rank,hipblasCtrsvStridedBatched_rank_0,hipblasCtrsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrsvStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrsvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count) bind(c, name="cublasZtrsvStridedBatched")
#else
    function hipblasZtrsvStridedBatched_orig(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count) bind(c, name="hipblasZtrsvStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsvStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrsvStridedBatched_full_rank,hipblasZtrsvStridedBatched_rank_0,hipblasZtrsvStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCherk
#ifdef USE_CUDA_NAMES
    function hipblasCherk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="cublasCherk_v2")
#else
    function hipblasCherk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="hipblasCherk")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherk_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCherk_full_rank,hipblasCherk_rank_0,hipblasCherk_rank_1
#endif

  end interface
  
  interface hipblasZherk
#ifdef USE_CUDA_NAMES
    function hipblasZherk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="cublasZherk_v2")
#else
    function hipblasZherk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="hipblasZherk")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherk_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZherk_full_rank,hipblasZherk_rank_0,hipblasZherk_rank_1
#endif

  end interface
  
  interface hipblasCherkBatched
#ifdef USE_CUDA_NAMES
    function hipblasCherkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="cublasCherkBatched")
#else
    function hipblasCherkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="hipblasCherkBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCherkBatched_full_rank,hipblasCherkBatched_rank_0,hipblasCherkBatched_rank_1
#endif

  end interface
  
  interface hipblasZherkBatched
#ifdef USE_CUDA_NAMES
    function hipblasZherkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="cublasZherkBatched")
#else
    function hipblasZherkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="hipblasZherkBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZherkBatched_full_rank,hipblasZherkBatched_rank_0,hipblasZherkBatched_rank_1
#endif

  end interface
  
  interface hipblasCherkStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="cublasCherkStridedBatched")
#else
    function hipblasCherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasCherkStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCherkStridedBatched_full_rank,hipblasCherkStridedBatched_rank_0,hipblasCherkStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZherkStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="cublasZherkStridedBatched")
#else
    function hipblasZherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasZherkStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZherkStridedBatched_full_rank,hipblasZherkStridedBatched_rank_0,hipblasZherkStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCherkx
#ifdef USE_CUDA_NAMES
    function hipblasCherkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasCherkx")
#else
    function hipblasCherkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasCherkx")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkx_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCherkx_full_rank,hipblasCherkx_rank_0,hipblasCherkx_rank_1
#endif

  end interface
  
  interface hipblasZherkx
#ifdef USE_CUDA_NAMES
    function hipblasZherkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasZherkx")
#else
    function hipblasZherkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasZherkx")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkx_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZherkx_full_rank,hipblasZherkx_rank_0,hipblasZherkx_rank_1
#endif

  end interface
  
  interface hipblasCherkxBatched
#ifdef USE_CUDA_NAMES
    function hipblasCherkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasCherkxBatched")
#else
    function hipblasCherkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasCherkxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkxBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCherkxBatched_full_rank,hipblasCherkxBatched_rank_0,hipblasCherkxBatched_rank_1
#endif

  end interface
  
  interface hipblasZherkxBatched
#ifdef USE_CUDA_NAMES
    function hipblasZherkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasZherkxBatched")
#else
    function hipblasZherkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasZherkxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkxBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZherkxBatched_full_rank,hipblasZherkxBatched_rank_0,hipblasZherkxBatched_rank_1
#endif

  end interface
  
  interface hipblasCherkxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasCherkxStridedBatched")
#else
    function hipblasCherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasCherkxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCherkxStridedBatched_full_rank,hipblasCherkxStridedBatched_rank_0,hipblasCherkxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZherkxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasZherkxStridedBatched")
#else
    function hipblasZherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasZherkxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZherkxStridedBatched_full_rank,hipblasZherkxStridedBatched_rank_0,hipblasZherkxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCher2k
#ifdef USE_CUDA_NAMES
    function hipblasCher2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasCher2k_v2")
#else
    function hipblasCher2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasCher2k")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2k_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCher2k_full_rank,hipblasCher2k_rank_0,hipblasCher2k_rank_1
#endif

  end interface
  
  interface hipblasZher2k
#ifdef USE_CUDA_NAMES
    function hipblasZher2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasZher2k_v2")
#else
    function hipblasZher2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasZher2k")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2k_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZher2k_full_rank,hipblasZher2k_rank_0,hipblasZher2k_rank_1
#endif

  end interface
  
  interface hipblasCher2kBatched
#ifdef USE_CUDA_NAMES
    function hipblasCher2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasCher2kBatched")
#else
    function hipblasCher2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasCher2kBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2kBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCher2kBatched_full_rank,hipblasCher2kBatched_rank_0,hipblasCher2kBatched_rank_1
#endif

  end interface
  
  interface hipblasZher2kBatched
#ifdef USE_CUDA_NAMES
    function hipblasZher2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasZher2kBatched")
#else
    function hipblasZher2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasZher2kBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2kBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZher2kBatched_full_rank,hipblasZher2kBatched_rank_0,hipblasZher2kBatched_rank_1
#endif

  end interface
  
  interface hipblasCher2kStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasCher2kStridedBatched")
#else
    function hipblasCher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasCher2kStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2kStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCher2kStridedBatched_full_rank,hipblasCher2kStridedBatched_rank_0,hipblasCher2kStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZher2kStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasZher2kStridedBatched")
#else
    function hipblasZher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasZher2kStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2kStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZher2kStridedBatched_full_rank,hipblasZher2kStridedBatched_rank_0,hipblasZher2kStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSsymm
#ifdef USE_CUDA_NAMES
    function hipblasSsymm_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasSsymm_v2")
#else
    function hipblasSsymm_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasSsymm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsymm_full_rank,hipblasSsymm_rank_0,hipblasSsymm_rank_1
#endif

  end interface
  
  interface hipblasDsymm
#ifdef USE_CUDA_NAMES
    function hipblasDsymm_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasDsymm_v2")
#else
    function hipblasDsymm_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasDsymm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsymm_full_rank,hipblasDsymm_rank_0,hipblasDsymm_rank_1
#endif

  end interface
  
  interface hipblasCsymm
#ifdef USE_CUDA_NAMES
    function hipblasCsymm_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasCsymm_v2")
#else
    function hipblasCsymm_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasCsymm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsymm_full_rank,hipblasCsymm_rank_0,hipblasCsymm_rank_1
#endif

  end interface
  
  interface hipblasZsymm
#ifdef USE_CUDA_NAMES
    function hipblasZsymm_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasZsymm_v2")
#else
    function hipblasZsymm_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasZsymm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsymm_full_rank,hipblasZsymm_rank_0,hipblasZsymm_rank_1
#endif

  end interface
  
  interface hipblasSsymmBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsymmBatched_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasSsymmBatched")
#else
    function hipblasSsymmBatched_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasSsymmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsymmBatched_full_rank,hipblasSsymmBatched_rank_0,hipblasSsymmBatched_rank_1
#endif

  end interface
  
  interface hipblasDsymmBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsymmBatched_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasDsymmBatched")
#else
    function hipblasDsymmBatched_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasDsymmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsymmBatched_full_rank,hipblasDsymmBatched_rank_0,hipblasDsymmBatched_rank_1
#endif

  end interface
  
  interface hipblasCsymmBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsymmBatched_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasCsymmBatched")
#else
    function hipblasCsymmBatched_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasCsymmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsymmBatched_full_rank,hipblasCsymmBatched_rank_0,hipblasCsymmBatched_rank_1
#endif

  end interface
  
  interface hipblasZsymmBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsymmBatched_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasZsymmBatched")
#else
    function hipblasZsymmBatched_orig(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasZsymmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsymmBatched_full_rank,hipblasZsymmBatched_rank_0,hipblasZsymmBatched_rank_1
#endif

  end interface
  
  interface hipblasSsymmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasSsymmStridedBatched")
#else
    function hipblasSsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasSsymmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsymmStridedBatched_full_rank,hipblasSsymmStridedBatched_rank_0,hipblasSsymmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsymmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasDsymmStridedBatched")
#else
    function hipblasDsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasDsymmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsymmStridedBatched_full_rank,hipblasDsymmStridedBatched_rank_0,hipblasDsymmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsymmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasCsymmStridedBatched")
#else
    function hipblasCsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasCsymmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsymmStridedBatched_full_rank,hipblasCsymmStridedBatched_rank_0,hipblasCsymmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZsymmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasZsymmStridedBatched")
#else
    function hipblasZsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasZsymmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsymmStridedBatched_full_rank,hipblasZsymmStridedBatched_rank_0,hipblasZsymmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyrk
#ifdef USE_CUDA_NAMES
    function hipblasSsyrk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="cublasSsyrk_v2")
#else
    function hipblasSsyrk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="hipblasSsyrk")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrk_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyrk_full_rank,hipblasSsyrk_rank_0,hipblasSsyrk_rank_1
#endif

  end interface
  
  interface hipblasDsyrk
#ifdef USE_CUDA_NAMES
    function hipblasDsyrk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="cublasDsyrk_v2")
#else
    function hipblasDsyrk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="hipblasDsyrk")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrk_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyrk_full_rank,hipblasDsyrk_rank_0,hipblasDsyrk_rank_1
#endif

  end interface
  
  interface hipblasCsyrk
#ifdef USE_CUDA_NAMES
    function hipblasCsyrk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="cublasCsyrk_v2")
#else
    function hipblasCsyrk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="hipblasCsyrk")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrk_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyrk_full_rank,hipblasCsyrk_rank_0,hipblasCsyrk_rank_1
#endif

  end interface
  
  interface hipblasZsyrk
#ifdef USE_CUDA_NAMES
    function hipblasZsyrk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="cublasZsyrk_v2")
#else
    function hipblasZsyrk_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc) bind(c, name="hipblasZsyrk")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrk_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyrk_full_rank,hipblasZsyrk_rank_0,hipblasZsyrk_rank_1
#endif

  end interface
  
  interface hipblasSsyrkBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyrkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="cublasSsyrkBatched")
#else
    function hipblasSsyrkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="hipblasSsyrkBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyrkBatched_full_rank,hipblasSsyrkBatched_rank_0,hipblasSsyrkBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyrkBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyrkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="cublasDsyrkBatched")
#else
    function hipblasDsyrkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="hipblasDsyrkBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyrkBatched_full_rank,hipblasDsyrkBatched_rank_0,hipblasDsyrkBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyrkBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyrkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="cublasCsyrkBatched")
#else
    function hipblasCsyrkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="hipblasCsyrkBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyrkBatched_full_rank,hipblasCsyrkBatched_rank_0,hipblasCsyrkBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyrkBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyrkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="cublasZsyrkBatched")
#else
    function hipblasZsyrkBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount) bind(c, name="hipblasZsyrkBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyrkBatched_full_rank,hipblasZsyrkBatched_rank_0,hipblasZsyrkBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyrkStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="cublasSsyrkStridedBatched")
#else
    function hipblasSsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasSsyrkStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyrkStridedBatched_full_rank,hipblasSsyrkStridedBatched_rank_0,hipblasSsyrkStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyrkStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="cublasDsyrkStridedBatched")
#else
    function hipblasDsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasDsyrkStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyrkStridedBatched_full_rank,hipblasDsyrkStridedBatched_rank_0,hipblasDsyrkStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyrkStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="cublasCsyrkStridedBatched")
#else
    function hipblasCsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasCsyrkStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyrkStridedBatched_full_rank,hipblasCsyrkStridedBatched_rank_0,hipblasCsyrkStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyrkStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="cublasZsyrkStridedBatched")
#else
    function hipblasZsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasZsyrkStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyrkStridedBatched_full_rank,hipblasZsyrkStridedBatched_rank_0,hipblasZsyrkStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyr2k
#ifdef USE_CUDA_NAMES
    function hipblasSsyr2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasSsyr2k_v2")
#else
    function hipblasSsyr2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasSsyr2k")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2k_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyr2k_full_rank,hipblasSsyr2k_rank_0,hipblasSsyr2k_rank_1
#endif

  end interface
  
  interface hipblasDsyr2k
#ifdef USE_CUDA_NAMES
    function hipblasDsyr2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasDsyr2k_v2")
#else
    function hipblasDsyr2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasDsyr2k")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2k_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyr2k_full_rank,hipblasDsyr2k_rank_0,hipblasDsyr2k_rank_1
#endif

  end interface
  
  interface hipblasCsyr2k
#ifdef USE_CUDA_NAMES
    function hipblasCsyr2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasCsyr2k_v2")
#else
    function hipblasCsyr2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasCsyr2k")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2k_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyr2k_full_rank,hipblasCsyr2k_rank_0,hipblasCsyr2k_rank_1
#endif

  end interface
  
  interface hipblasZsyr2k
#ifdef USE_CUDA_NAMES
    function hipblasZsyr2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasZsyr2k_v2")
#else
    function hipblasZsyr2k_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasZsyr2k")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2k_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyr2k_full_rank,hipblasZsyr2k_rank_0,hipblasZsyr2k_rank_1
#endif

  end interface
  
  interface hipblasSsyr2kBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasSsyr2kBatched")
#else
    function hipblasSsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasSsyr2kBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2kBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyr2kBatched_full_rank,hipblasSsyr2kBatched_rank_0,hipblasSsyr2kBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyr2kBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasDsyr2kBatched")
#else
    function hipblasDsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasDsyr2kBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2kBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyr2kBatched_full_rank,hipblasDsyr2kBatched_rank_0,hipblasDsyr2kBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyr2kBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasCsyr2kBatched")
#else
    function hipblasCsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasCsyr2kBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2kBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyr2kBatched_full_rank,hipblasCsyr2kBatched_rank_0,hipblasCsyr2kBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyr2kBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasZsyr2kBatched")
#else
    function hipblasZsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasZsyr2kBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2kBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyr2kBatched_full_rank,hipblasZsyr2kBatched_rank_0,hipblasZsyr2kBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyr2kStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasSsyr2kStridedBatched")
#else
    function hipblasSsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasSsyr2kStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2kStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyr2kStridedBatched_full_rank,hipblasSsyr2kStridedBatched_rank_0,hipblasSsyr2kStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyr2kStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasDsyr2kStridedBatched")
#else
    function hipblasDsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasDsyr2kStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2kStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyr2kStridedBatched_full_rank,hipblasDsyr2kStridedBatched_rank_0,hipblasDsyr2kStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyr2kStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasCsyr2kStridedBatched")
#else
    function hipblasCsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasCsyr2kStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2kStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyr2kStridedBatched_full_rank,hipblasCsyr2kStridedBatched_rank_0,hipblasCsyr2kStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyr2kStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasZsyr2kStridedBatched")
#else
    function hipblasZsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasZsyr2kStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2kStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyr2kStridedBatched_full_rank,hipblasZsyr2kStridedBatched_rank_0,hipblasZsyr2kStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyrkx
#ifdef USE_CUDA_NAMES
    function hipblasSsyrkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasSsyrkx")
#else
    function hipblasSsyrkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasSsyrkx")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkx_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyrkx_full_rank,hipblasSsyrkx_rank_0,hipblasSsyrkx_rank_1
#endif

  end interface
  
  interface hipblasDsyrkx
#ifdef USE_CUDA_NAMES
    function hipblasDsyrkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasDsyrkx")
#else
    function hipblasDsyrkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasDsyrkx")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkx_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyrkx_full_rank,hipblasDsyrkx_rank_0,hipblasDsyrkx_rank_1
#endif

  end interface
  
  interface hipblasCsyrkx
#ifdef USE_CUDA_NAMES
    function hipblasCsyrkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasCsyrkx")
#else
    function hipblasCsyrkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasCsyrkx")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkx_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyrkx_full_rank,hipblasCsyrkx_rank_0,hipblasCsyrkx_rank_1
#endif

  end interface
  
  interface hipblasZsyrkx
#ifdef USE_CUDA_NAMES
    function hipblasZsyrkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasZsyrkx")
#else
    function hipblasZsyrkx_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasZsyrkx")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkx_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyrkx_full_rank,hipblasZsyrkx_rank_0,hipblasZsyrkx_rank_1
#endif

  end interface
  
  interface hipblasSsyrkxBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasSsyrkxBatched")
#else
    function hipblasSsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasSsyrkxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkxBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyrkxBatched_full_rank,hipblasSsyrkxBatched_rank_0,hipblasSsyrkxBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyrkxBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasDsyrkxBatched")
#else
    function hipblasDsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasDsyrkxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkxBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyrkxBatched_full_rank,hipblasDsyrkxBatched_rank_0,hipblasDsyrkxBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyrkxBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasCsyrkxBatched")
#else
    function hipblasCsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasCsyrkxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkxBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyrkxBatched_full_rank,hipblasCsyrkxBatched_rank_0,hipblasCsyrkxBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyrkxBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasZsyrkxBatched")
#else
    function hipblasZsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasZsyrkxBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkxBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyrkxBatched_full_rank,hipblasZsyrkxBatched_rank_0,hipblasZsyrkxBatched_rank_1
#endif

  end interface
  
  interface hipblasSsyrkxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount) bind(c, name="cublasSsyrkxStridedBatched")
#else
    function hipblasSsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount) bind(c, name="hipblasSsyrkxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSsyrkxStridedBatched_full_rank,hipblasSsyrkxStridedBatched_rank_0,hipblasSsyrkxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDsyrkxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount) bind(c, name="cublasDsyrkxStridedBatched")
#else
    function hipblasDsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount) bind(c, name="hipblasDsyrkxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDsyrkxStridedBatched_full_rank,hipblasDsyrkxStridedBatched_rank_0,hipblasDsyrkxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCsyrkxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount) bind(c, name="cublasCsyrkxStridedBatched")
#else
    function hipblasCsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount) bind(c, name="hipblasCsyrkxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCsyrkxStridedBatched_full_rank,hipblasCsyrkxStridedBatched_rank_0,hipblasCsyrkxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZsyrkxStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount) bind(c, name="cublasZsyrkxStridedBatched")
#else
    function hipblasZsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount) bind(c, name="hipblasZsyrkxStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkxStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZsyrkxStridedBatched_full_rank,hipblasZsyrkxStridedBatched_rank_0,hipblasZsyrkxStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSgeam
#ifdef USE_CUDA_NAMES
    function hipblasSgeam_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc) bind(c, name="cublasSgeam")
#else
    function hipblasSgeam_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc) bind(c, name="hipblasSgeam")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeam_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgeam_full_rank,hipblasSgeam_rank_0,hipblasSgeam_rank_1
#endif

  end interface
  
  interface hipblasDgeam
#ifdef USE_CUDA_NAMES
    function hipblasDgeam_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc) bind(c, name="cublasDgeam")
#else
    function hipblasDgeam_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc) bind(c, name="hipblasDgeam")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeam_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgeam_full_rank,hipblasDgeam_rank_0,hipblasDgeam_rank_1
#endif

  end interface
  
  interface hipblasCgeam
#ifdef USE_CUDA_NAMES
    function hipblasCgeam_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc) bind(c, name="cublasCgeam")
#else
    function hipblasCgeam_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc) bind(c, name="hipblasCgeam")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeam_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeam_full_rank,hipblasCgeam_rank_0,hipblasCgeam_rank_1
#endif

  end interface
  
  interface hipblasZgeam
#ifdef USE_CUDA_NAMES
    function hipblasZgeam_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc) bind(c, name="cublasZgeam")
#else
    function hipblasZgeam_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc) bind(c, name="hipblasZgeam")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeam_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeam_full_rank,hipblasZgeam_rank_0,hipblasZgeam_rank_1
#endif

  end interface
  
  interface hipblasSgeamBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgeamBatched_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount) bind(c, name="cublasSgeamBatched")
#else
    function hipblasSgeamBatched_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount) bind(c, name="hipblasSgeamBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeamBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgeamBatched_full_rank,hipblasSgeamBatched_rank_0,hipblasSgeamBatched_rank_1
#endif

  end interface
  
  interface hipblasDgeamBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgeamBatched_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount) bind(c, name="cublasDgeamBatched")
#else
    function hipblasDgeamBatched_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount) bind(c, name="hipblasDgeamBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeamBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgeamBatched_full_rank,hipblasDgeamBatched_rank_0,hipblasDgeamBatched_rank_1
#endif

  end interface
  
  interface hipblasCgeamBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgeamBatched_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount) bind(c, name="cublasCgeamBatched")
#else
    function hipblasCgeamBatched_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount) bind(c, name="hipblasCgeamBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeamBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeamBatched_full_rank,hipblasCgeamBatched_rank_0,hipblasCgeamBatched_rank_1
#endif

  end interface
  
  interface hipblasZgeamBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgeamBatched_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount) bind(c, name="cublasZgeamBatched")
#else
    function hipblasZgeamBatched_orig(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount) bind(c, name="hipblasZgeamBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeamBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeamBatched_full_rank,hipblasZgeamBatched_rank_0,hipblasZgeamBatched_rank_1
#endif

  end interface
  
  interface hipblasSgeamStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount) bind(c, name="cublasSgeamStridedBatched")
#else
    function hipblasSgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount) bind(c, name="hipblasSgeamStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeamStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgeamStridedBatched_full_rank,hipblasSgeamStridedBatched_rank_0,hipblasSgeamStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDgeamStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount) bind(c, name="cublasDgeamStridedBatched")
#else
    function hipblasDgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount) bind(c, name="hipblasDgeamStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeamStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgeamStridedBatched_full_rank,hipblasDgeamStridedBatched_rank_0,hipblasDgeamStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgeamStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount) bind(c, name="cublasCgeamStridedBatched")
#else
    function hipblasCgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount) bind(c, name="hipblasCgeamStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeamStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex) :: beta
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeamStridedBatched_full_rank,hipblasCgeamStridedBatched_rank_0,hipblasCgeamStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgeamStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount) bind(c, name="cublasZgeamStridedBatched")
#else
    function hipblasZgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount) bind(c, name="hipblasZgeamStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeamStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex) :: beta
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeamStridedBatched_full_rank,hipblasZgeamStridedBatched_rank_0,hipblasZgeamStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasChemm
#ifdef USE_CUDA_NAMES
    function hipblasChemm_orig(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasChemm_v2")
#else
    function hipblasChemm_orig(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasChemm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChemm_full_rank,hipblasChemm_rank_0,hipblasChemm_rank_1
#endif

  end interface
  
  interface hipblasZhemm
#ifdef USE_CUDA_NAMES
    function hipblasZhemm_orig(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasZhemm_v2")
#else
    function hipblasZhemm_orig(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasZhemm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhemm_full_rank,hipblasZhemm_rank_0,hipblasZhemm_rank_1
#endif

  end interface
  
  interface hipblasChemmBatched
#ifdef USE_CUDA_NAMES
    function hipblasChemmBatched_orig(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasChemmBatched")
#else
    function hipblasChemmBatched_orig(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasChemmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChemmBatched_full_rank,hipblasChemmBatched_rank_0,hipblasChemmBatched_rank_1
#endif

  end interface
  
  interface hipblasZhemmBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhemmBatched_orig(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasZhemmBatched")
#else
    function hipblasZhemmBatched_orig(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasZhemmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhemmBatched_full_rank,hipblasZhemmBatched_rank_0,hipblasZhemmBatched_rank_1
#endif

  end interface
  
  interface hipblasChemmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasChemmStridedBatched_orig(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasChemmStridedBatched")
#else
    function hipblasChemmStridedBatched_orig(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasChemmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasChemmStridedBatched_full_rank,hipblasChemmStridedBatched_rank_0,hipblasChemmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZhemmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZhemmStridedBatched_orig(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="cublasZhemmStridedBatched")
#else
    function hipblasZhemmStridedBatched_orig(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount) bind(c, name="hipblasZhemmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZhemmStridedBatched_full_rank,hipblasZhemmStridedBatched_rank_0,hipblasZhemmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStrmm
#ifdef USE_CUDA_NAMES
    function hipblasStrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="cublasStrmm_v2")
#else
    function hipblasStrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="hipblasStrmm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrmm_full_rank,hipblasStrmm_rank_0,hipblasStrmm_rank_1
#endif

  end interface
  
  interface hipblasDtrmm
#ifdef USE_CUDA_NAMES
    function hipblasDtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="cublasDtrmm_v2")
#else
    function hipblasDtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="hipblasDtrmm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrmm_full_rank,hipblasDtrmm_rank_0,hipblasDtrmm_rank_1
#endif

  end interface
  
  interface hipblasCtrmm
#ifdef USE_CUDA_NAMES
    function hipblasCtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="cublasCtrmm_v2")
#else
    function hipblasCtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="hipblasCtrmm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrmm_full_rank,hipblasCtrmm_rank_0,hipblasCtrmm_rank_1
#endif

  end interface
  
  interface hipblasZtrmm
#ifdef USE_CUDA_NAMES
    function hipblasZtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="cublasZtrmm_v2")
#else
    function hipblasZtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="hipblasZtrmm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrmm_full_rank,hipblasZtrmm_rank_0,hipblasZtrmm_rank_1
#endif

  end interface
  
  interface hipblasStrmmBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount) bind(c, name="cublasStrmmBatched")
#else
    function hipblasStrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount) bind(c, name="hipblasStrmmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrmmBatched_full_rank,hipblasStrmmBatched_rank_0,hipblasStrmmBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrmmBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount) bind(c, name="cublasDtrmmBatched")
#else
    function hipblasDtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount) bind(c, name="hipblasDtrmmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrmmBatched_full_rank,hipblasDtrmmBatched_rank_0,hipblasDtrmmBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrmmBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount) bind(c, name="cublasCtrmmBatched")
#else
    function hipblasCtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount) bind(c, name="hipblasCtrmmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrmmBatched_full_rank,hipblasCtrmmBatched_rank_0,hipblasCtrmmBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrmmBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount) bind(c, name="cublasZtrmmBatched")
#else
    function hipblasZtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount) bind(c, name="hipblasZtrmmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrmmBatched_full_rank,hipblasZtrmmBatched_rank_0,hipblasZtrmmBatched_rank_1
#endif

  end interface
  
  interface hipblasStrmmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount) bind(c, name="cublasStrmmStridedBatched")
#else
    function hipblasStrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount) bind(c, name="hipblasStrmmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrmmStridedBatched_full_rank,hipblasStrmmStridedBatched_rank_0,hipblasStrmmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrmmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount) bind(c, name="cublasDtrmmStridedBatched")
#else
    function hipblasDtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount) bind(c, name="hipblasDtrmmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrmmStridedBatched_full_rank,hipblasDtrmmStridedBatched_rank_0,hipblasDtrmmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrmmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount) bind(c, name="cublasCtrmmStridedBatched")
#else
    function hipblasCtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount) bind(c, name="hipblasCtrmmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrmmStridedBatched_full_rank,hipblasCtrmmStridedBatched_rank_0,hipblasCtrmmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrmmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount) bind(c, name="cublasZtrmmStridedBatched")
#else
    function hipblasZtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount) bind(c, name="hipblasZtrmmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrmmStridedBatched_full_rank,hipblasZtrmmStridedBatched_rank_0,hipblasZtrmmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStrsm
#ifdef USE_CUDA_NAMES
    function hipblasStrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="cublasStrsm_v2")
#else
    function hipblasStrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="hipblasStrsm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrsm_full_rank,hipblasStrsm_rank_0,hipblasStrsm_rank_1
#endif

  end interface
  
  interface hipblasDtrsm
#ifdef USE_CUDA_NAMES
    function hipblasDtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="cublasDtrsm_v2")
#else
    function hipblasDtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="hipblasDtrsm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrsm_full_rank,hipblasDtrsm_rank_0,hipblasDtrsm_rank_1
#endif

  end interface
  
  interface hipblasCtrsm
#ifdef USE_CUDA_NAMES
    function hipblasCtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="cublasCtrsm_v2")
#else
    function hipblasCtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="hipblasCtrsm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrsm_full_rank,hipblasCtrsm_rank_0,hipblasCtrsm_rank_1
#endif

  end interface
  
  interface hipblasZtrsm
#ifdef USE_CUDA_NAMES
    function hipblasZtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="cublasZtrsm_v2")
#else
    function hipblasZtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb) bind(c, name="hipblasZtrsm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrsm_full_rank,hipblasZtrsm_rank_0,hipblasZtrsm_rank_1
#endif

  end interface
  
  interface hipblasStrsmBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count) bind(c, name="cublasStrsmBatched")
#else
    function hipblasStrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count) bind(c, name="hipblasStrsmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrsmBatched_full_rank,hipblasStrsmBatched_rank_0,hipblasStrsmBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrsmBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count) bind(c, name="cublasDtrsmBatched")
#else
    function hipblasDtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count) bind(c, name="hipblasDtrsmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrsmBatched_full_rank,hipblasDtrsmBatched_rank_0,hipblasDtrsmBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrsmBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count) bind(c, name="cublasCtrsmBatched")
#else
    function hipblasCtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count) bind(c, name="hipblasCtrsmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrsmBatched_full_rank,hipblasCtrsmBatched_rank_0,hipblasCtrsmBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrsmBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count) bind(c, name="cublasZtrsmBatched")
#else
    function hipblasZtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count) bind(c, name="hipblasZtrsmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrsmBatched_full_rank,hipblasZtrsmBatched_rank_0,hipblasZtrsmBatched_rank_1
#endif

  end interface
  
  interface hipblasStrsmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count) bind(c, name="cublasStrsmStridedBatched")
#else
    function hipblasStrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count) bind(c, name="hipblasStrsmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrsmStridedBatched_full_rank,hipblasStrsmStridedBatched_rank_0,hipblasStrsmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrsmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count) bind(c, name="cublasDtrsmStridedBatched")
#else
    function hipblasDtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count) bind(c, name="hipblasDtrsmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrsmStridedBatched_full_rank,hipblasDtrsmStridedBatched_rank_0,hipblasDtrsmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrsmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count) bind(c, name="cublasCtrsmStridedBatched")
#else
    function hipblasCtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count) bind(c, name="hipblasCtrsmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrsmStridedBatched_full_rank,hipblasCtrsmStridedBatched_rank_0,hipblasCtrsmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrsmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count) bind(c, name="cublasZtrsmStridedBatched")
#else
    function hipblasZtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count) bind(c, name="hipblasZtrsmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrsmStridedBatched_full_rank,hipblasZtrsmStridedBatched_rank_0,hipblasZtrsmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasStrtri
#ifdef USE_CUDA_NAMES
    function hipblasStrtri_orig(handle,uplo,diag,n,A,lda,invA,ldinvA) bind(c, name="cublasStrtri")
#else
    function hipblasStrtri_orig(handle,uplo,diag,n,A,lda,invA,ldinvA) bind(c, name="hipblasStrtri")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtri_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: invA
      integer(c_int),value :: ldinvA
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrtri_full_rank,hipblasStrtri_rank_0,hipblasStrtri_rank_1
#endif

  end interface
  
  interface hipblasDtrtri
#ifdef USE_CUDA_NAMES
    function hipblasDtrtri_orig(handle,uplo,diag,n,A,lda,invA,ldinvA) bind(c, name="cublasDtrtri")
#else
    function hipblasDtrtri_orig(handle,uplo,diag,n,A,lda,invA,ldinvA) bind(c, name="hipblasDtrtri")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtri_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: invA
      integer(c_int),value :: ldinvA
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrtri_full_rank,hipblasDtrtri_rank_0,hipblasDtrtri_rank_1
#endif

  end interface
  
  interface hipblasCtrtri
#ifdef USE_CUDA_NAMES
    function hipblasCtrtri_orig(handle,uplo,diag,n,A,lda,invA,ldinvA) bind(c, name="cublasCtrtri")
#else
    function hipblasCtrtri_orig(handle,uplo,diag,n,A,lda,invA,ldinvA) bind(c, name="hipblasCtrtri")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtri_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: invA
      integer(c_int),value :: ldinvA
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrtri_full_rank,hipblasCtrtri_rank_0,hipblasCtrtri_rank_1
#endif

  end interface
  
  interface hipblasZtrtri
#ifdef USE_CUDA_NAMES
    function hipblasZtrtri_orig(handle,uplo,diag,n,A,lda,invA,ldinvA) bind(c, name="cublasZtrtri")
#else
    function hipblasZtrtri_orig(handle,uplo,diag,n,A,lda,invA,ldinvA) bind(c, name="hipblasZtrtri")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtri_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: invA
      integer(c_int),value :: ldinvA
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrtri_full_rank,hipblasZtrtri_rank_0,hipblasZtrtri_rank_1
#endif

  end interface
  
  interface hipblasStrtriBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrtriBatched_orig(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count) bind(c, name="cublasStrtriBatched")
#else
    function hipblasStrtriBatched_orig(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count) bind(c, name="hipblasStrtriBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtriBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrtriBatched_full_rank,hipblasStrtriBatched_rank_0,hipblasStrtriBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrtriBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrtriBatched_orig(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count) bind(c, name="cublasDtrtriBatched")
#else
    function hipblasDtrtriBatched_orig(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count) bind(c, name="hipblasDtrtriBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtriBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrtriBatched_full_rank,hipblasDtrtriBatched_rank_0,hipblasDtrtriBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrtriBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrtriBatched_orig(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count) bind(c, name="cublasCtrtriBatched")
#else
    function hipblasCtrtriBatched_orig(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count) bind(c, name="hipblasCtrtriBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtriBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrtriBatched_full_rank,hipblasCtrtriBatched_rank_0,hipblasCtrtriBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrtriBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrtriBatched_orig(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count) bind(c, name="cublasZtrtriBatched")
#else
    function hipblasZtrtriBatched_orig(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count) bind(c, name="hipblasZtrtriBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtriBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrtriBatched_full_rank,hipblasZtrtriBatched_rank_0,hipblasZtrtriBatched_rank_1
#endif

  end interface
  
  interface hipblasStrtriStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasStrtriStridedBatched_orig(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count) bind(c, name="cublasStrtriStridedBatched")
#else
    function hipblasStrtriStridedBatched_orig(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count) bind(c, name="hipblasStrtriStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtriStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      type(c_ptr),value :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasStrtriStridedBatched_full_rank,hipblasStrtriStridedBatched_rank_0,hipblasStrtriStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDtrtriStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDtrtriStridedBatched_orig(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count) bind(c, name="cublasDtrtriStridedBatched")
#else
    function hipblasDtrtriStridedBatched_orig(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count) bind(c, name="hipblasDtrtriStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtriStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      type(c_ptr),value :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDtrtriStridedBatched_full_rank,hipblasDtrtriStridedBatched_rank_0,hipblasDtrtriStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCtrtriStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCtrtriStridedBatched_orig(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count) bind(c, name="cublasCtrtriStridedBatched")
#else
    function hipblasCtrtriStridedBatched_orig(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count) bind(c, name="hipblasCtrtriStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtriStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      type(c_ptr),value :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCtrtriStridedBatched_full_rank,hipblasCtrtriStridedBatched_rank_0,hipblasCtrtriStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZtrtriStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZtrtriStridedBatched_orig(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count) bind(c, name="cublasZtrtriStridedBatched")
#else
    function hipblasZtrtriStridedBatched_orig(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count) bind(c, name="hipblasZtrtriStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtriStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      type(c_ptr),value :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZtrtriStridedBatched_full_rank,hipblasZtrtriStridedBatched_rank_0,hipblasZtrtriStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSdgmm
#ifdef USE_CUDA_NAMES
    function hipblasSdgmm_orig(handle,side,m,n,A,lda,x,incx,C,ldc) bind(c, name="cublasSdgmm")
#else
    function hipblasSdgmm_orig(handle,side,m,n,A,lda,x,incx,C,ldc) bind(c, name="hipblasSdgmm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSdgmm_full_rank,hipblasSdgmm_rank_0,hipblasSdgmm_rank_1
#endif

  end interface
  
  interface hipblasDdgmm
#ifdef USE_CUDA_NAMES
    function hipblasDdgmm_orig(handle,side,m,n,A,lda,x,incx,C,ldc) bind(c, name="cublasDdgmm")
#else
    function hipblasDdgmm_orig(handle,side,m,n,A,lda,x,incx,C,ldc) bind(c, name="hipblasDdgmm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDdgmm_full_rank,hipblasDdgmm_rank_0,hipblasDdgmm_rank_1
#endif

  end interface
  
  interface hipblasCdgmm
#ifdef USE_CUDA_NAMES
    function hipblasCdgmm_orig(handle,side,m,n,A,lda,x,incx,C,ldc) bind(c, name="cublasCdgmm")
#else
    function hipblasCdgmm_orig(handle,side,m,n,A,lda,x,incx,C,ldc) bind(c, name="hipblasCdgmm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdgmm_full_rank,hipblasCdgmm_rank_0,hipblasCdgmm_rank_1
#endif

  end interface
  
  interface hipblasZdgmm
#ifdef USE_CUDA_NAMES
    function hipblasZdgmm_orig(handle,side,m,n,A,lda,x,incx,C,ldc) bind(c, name="cublasZdgmm")
#else
    function hipblasZdgmm_orig(handle,side,m,n,A,lda,x,incx,C,ldc) bind(c, name="hipblasZdgmm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdgmm_full_rank,hipblasZdgmm_rank_0,hipblasZdgmm_rank_1
#endif

  end interface
  
  interface hipblasSdgmmBatched
#ifdef USE_CUDA_NAMES
    function hipblasSdgmmBatched_orig(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count) bind(c, name="cublasSdgmmBatched")
#else
    function hipblasSdgmmBatched_orig(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count) bind(c, name="hipblasSdgmmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSdgmmBatched_full_rank,hipblasSdgmmBatched_rank_0,hipblasSdgmmBatched_rank_1
#endif

  end interface
  
  interface hipblasDdgmmBatched
#ifdef USE_CUDA_NAMES
    function hipblasDdgmmBatched_orig(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count) bind(c, name="cublasDdgmmBatched")
#else
    function hipblasDdgmmBatched_orig(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count) bind(c, name="hipblasDdgmmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDdgmmBatched_full_rank,hipblasDdgmmBatched_rank_0,hipblasDdgmmBatched_rank_1
#endif

  end interface
  
  interface hipblasCdgmmBatched
#ifdef USE_CUDA_NAMES
    function hipblasCdgmmBatched_orig(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count) bind(c, name="cublasCdgmmBatched")
#else
    function hipblasCdgmmBatched_orig(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count) bind(c, name="hipblasCdgmmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdgmmBatched_full_rank,hipblasCdgmmBatched_rank_0,hipblasCdgmmBatched_rank_1
#endif

  end interface
  
  interface hipblasZdgmmBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdgmmBatched_orig(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count) bind(c, name="cublasZdgmmBatched")
#else
    function hipblasZdgmmBatched_orig(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count) bind(c, name="hipblasZdgmmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdgmmBatched_full_rank,hipblasZdgmmBatched_rank_0,hipblasZdgmmBatched_rank_1
#endif

  end interface
  
  interface hipblasSdgmmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSdgmmStridedBatched_orig(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count) bind(c, name="cublasSdgmmStridedBatched")
#else
    function hipblasSdgmmStridedBatched_orig(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count) bind(c, name="hipblasSdgmmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSdgmmStridedBatched_full_rank,hipblasSdgmmStridedBatched_rank_0,hipblasSdgmmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDdgmmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDdgmmStridedBatched_orig(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count) bind(c, name="cublasDdgmmStridedBatched")
#else
    function hipblasDdgmmStridedBatched_orig(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count) bind(c, name="hipblasDdgmmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDdgmmStridedBatched_full_rank,hipblasDdgmmStridedBatched_rank_0,hipblasDdgmmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCdgmmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCdgmmStridedBatched_orig(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count) bind(c, name="cublasCdgmmStridedBatched")
#else
    function hipblasCdgmmStridedBatched_orig(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count) bind(c, name="hipblasCdgmmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCdgmmStridedBatched_full_rank,hipblasCdgmmStridedBatched_rank_0,hipblasCdgmmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZdgmmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZdgmmStridedBatched_orig(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count) bind(c, name="cublasZdgmmStridedBatched")
#else
    function hipblasZdgmmStridedBatched_orig(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count) bind(c, name="hipblasZdgmmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      type(c_ptr),value :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZdgmmStridedBatched_full_rank,hipblasZdgmmStridedBatched_rank_0,hipblasZdgmmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSgetrf
#ifdef USE_CUDA_NAMES
    function hipblasSgetrf_orig(handle,n,A,lda,ipiv,myInfo) bind(c, name="cublasSgetrf")
#else
    function hipblasSgetrf_orig(handle,n,A,lda,ipiv,myInfo) bind(c, name="hipblasSgetrf")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrf_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgetrf_full_rank,hipblasSgetrf_rank_0,hipblasSgetrf_rank_1
#endif

  end interface
  
  interface hipblasDgetrf
#ifdef USE_CUDA_NAMES
    function hipblasDgetrf_orig(handle,n,A,lda,ipiv,myInfo) bind(c, name="cublasDgetrf")
#else
    function hipblasDgetrf_orig(handle,n,A,lda,ipiv,myInfo) bind(c, name="hipblasDgetrf")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrf_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgetrf_full_rank,hipblasDgetrf_rank_0,hipblasDgetrf_rank_1
#endif

  end interface
  
  interface hipblasCgetrf
#ifdef USE_CUDA_NAMES
    function hipblasCgetrf_orig(handle,n,A,lda,ipiv,myInfo) bind(c, name="cublasCgetrf")
#else
    function hipblasCgetrf_orig(handle,n,A,lda,ipiv,myInfo) bind(c, name="hipblasCgetrf")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrf_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgetrf_full_rank,hipblasCgetrf_rank_0,hipblasCgetrf_rank_1
#endif

  end interface
  
  interface hipblasZgetrf
#ifdef USE_CUDA_NAMES
    function hipblasZgetrf_orig(handle,n,A,lda,ipiv,myInfo) bind(c, name="cublasZgetrf")
#else
    function hipblasZgetrf_orig(handle,n,A,lda,ipiv,myInfo) bind(c, name="hipblasZgetrf")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrf_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgetrf_full_rank,hipblasZgetrf_rank_0,hipblasZgetrf_rank_1
#endif

  end interface
  
  interface hipblasSgetrfBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgetrfBatched_orig(handle,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="cublasSgetrfBatched")
#else
    function hipblasSgetrfBatched_orig(handle,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="hipblasSgetrfBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrfBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgetrfBatched_full_rank,hipblasSgetrfBatched_rank_0,hipblasSgetrfBatched_rank_1
#endif

  end interface
  
  interface hipblasDgetrfBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgetrfBatched_orig(handle,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="cublasDgetrfBatched")
#else
    function hipblasDgetrfBatched_orig(handle,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="hipblasDgetrfBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrfBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgetrfBatched_full_rank,hipblasDgetrfBatched_rank_0,hipblasDgetrfBatched_rank_1
#endif

  end interface
  
  interface hipblasCgetrfBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgetrfBatched_orig(handle,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="cublasCgetrfBatched")
#else
    function hipblasCgetrfBatched_orig(handle,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="hipblasCgetrfBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrfBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgetrfBatched_full_rank,hipblasCgetrfBatched_rank_0,hipblasCgetrfBatched_rank_1
#endif

  end interface
  
  interface hipblasZgetrfBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgetrfBatched_orig(handle,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="cublasZgetrfBatched")
#else
    function hipblasZgetrfBatched_orig(handle,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="hipblasZgetrfBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrfBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgetrfBatched_full_rank,hipblasZgetrfBatched_rank_0,hipblasZgetrfBatched_rank_1
#endif

  end interface
  
  interface hipblasSgetrfStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgetrfStridedBatched_orig(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="cublasSgetrfStridedBatched")
#else
    function hipblasSgetrfStridedBatched_orig(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="hipblasSgetrfStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrfStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgetrfStridedBatched_full_rank,hipblasSgetrfStridedBatched_rank_0,hipblasSgetrfStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDgetrfStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgetrfStridedBatched_orig(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="cublasDgetrfStridedBatched")
#else
    function hipblasDgetrfStridedBatched_orig(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="hipblasDgetrfStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrfStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgetrfStridedBatched_full_rank,hipblasDgetrfStridedBatched_rank_0,hipblasDgetrfStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgetrfStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgetrfStridedBatched_orig(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="cublasCgetrfStridedBatched")
#else
    function hipblasCgetrfStridedBatched_orig(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="hipblasCgetrfStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrfStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgetrfStridedBatched_full_rank,hipblasCgetrfStridedBatched_rank_0,hipblasCgetrfStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgetrfStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgetrfStridedBatched_orig(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="cublasZgetrfStridedBatched")
#else
    function hipblasZgetrfStridedBatched_orig(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="hipblasZgetrfStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrfStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgetrfStridedBatched_full_rank,hipblasZgetrfStridedBatched_rank_0,hipblasZgetrfStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSgetrs
#ifdef USE_CUDA_NAMES
    function hipblasSgetrs_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo) bind(c, name="cublasSgetrs")
#else
    function hipblasSgetrs_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo) bind(c, name="hipblasSgetrs")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrs_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgetrs_full_rank,hipblasSgetrs_rank_0,hipblasSgetrs_rank_1
#endif

  end interface
  
  interface hipblasDgetrs
#ifdef USE_CUDA_NAMES
    function hipblasDgetrs_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo) bind(c, name="cublasDgetrs")
#else
    function hipblasDgetrs_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo) bind(c, name="hipblasDgetrs")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrs_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgetrs_full_rank,hipblasDgetrs_rank_0,hipblasDgetrs_rank_1
#endif

  end interface
  
  interface hipblasCgetrs
#ifdef USE_CUDA_NAMES
    function hipblasCgetrs_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo) bind(c, name="cublasCgetrs")
#else
    function hipblasCgetrs_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo) bind(c, name="hipblasCgetrs")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrs_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgetrs_full_rank,hipblasCgetrs_rank_0,hipblasCgetrs_rank_1
#endif

  end interface
  
  interface hipblasZgetrs
#ifdef USE_CUDA_NAMES
    function hipblasZgetrs_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo) bind(c, name="cublasZgetrs")
#else
    function hipblasZgetrs_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo) bind(c, name="hipblasZgetrs")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrs_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgetrs_full_rank,hipblasZgetrs_rank_0,hipblasZgetrs_rank_1
#endif

  end interface
  
  interface hipblasSgetrsBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgetrsBatched_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count) bind(c, name="cublasSgetrsBatched")
#else
    function hipblasSgetrsBatched_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count) bind(c, name="hipblasSgetrsBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrsBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgetrsBatched_full_rank,hipblasSgetrsBatched_rank_0,hipblasSgetrsBatched_rank_1
#endif

  end interface
  
  interface hipblasDgetrsBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgetrsBatched_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count) bind(c, name="cublasDgetrsBatched")
#else
    function hipblasDgetrsBatched_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count) bind(c, name="hipblasDgetrsBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrsBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgetrsBatched_full_rank,hipblasDgetrsBatched_rank_0,hipblasDgetrsBatched_rank_1
#endif

  end interface
  
  interface hipblasCgetrsBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgetrsBatched_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count) bind(c, name="cublasCgetrsBatched")
#else
    function hipblasCgetrsBatched_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count) bind(c, name="hipblasCgetrsBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrsBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgetrsBatched_full_rank,hipblasCgetrsBatched_rank_0,hipblasCgetrsBatched_rank_1
#endif

  end interface
  
  interface hipblasZgetrsBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgetrsBatched_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count) bind(c, name="cublasZgetrsBatched")
#else
    function hipblasZgetrsBatched_orig(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count) bind(c, name="hipblasZgetrsBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrsBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgetrsBatched_full_rank,hipblasZgetrsBatched_rank_0,hipblasZgetrsBatched_rank_1
#endif

  end interface
  
  interface hipblasSgetrsStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgetrsStridedBatched_orig(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count) bind(c, name="cublasSgetrsStridedBatched")
#else
    function hipblasSgetrsStridedBatched_orig(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count) bind(c, name="hipblasSgetrsStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrsStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgetrsStridedBatched_full_rank,hipblasSgetrsStridedBatched_rank_0,hipblasSgetrsStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDgetrsStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgetrsStridedBatched_orig(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count) bind(c, name="cublasDgetrsStridedBatched")
#else
    function hipblasDgetrsStridedBatched_orig(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count) bind(c, name="hipblasDgetrsStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrsStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgetrsStridedBatched_full_rank,hipblasDgetrsStridedBatched_rank_0,hipblasDgetrsStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgetrsStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgetrsStridedBatched_orig(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count) bind(c, name="cublasCgetrsStridedBatched")
#else
    function hipblasCgetrsStridedBatched_orig(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count) bind(c, name="hipblasCgetrsStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrsStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgetrsStridedBatched_full_rank,hipblasCgetrsStridedBatched_rank_0,hipblasCgetrsStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgetrsStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgetrsStridedBatched_orig(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count) bind(c, name="cublasZgetrsStridedBatched")
#else
    function hipblasZgetrsStridedBatched_orig(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count) bind(c, name="hipblasZgetrsStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrsStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgetrsStridedBatched_full_rank,hipblasZgetrsStridedBatched_rank_0,hipblasZgetrsStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSgetriBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgetriBatched_orig(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count) bind(c, name="cublasSgetriBatched")
#else
    function hipblasSgetriBatched_orig(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count) bind(c, name="hipblasSgetriBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetriBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgetriBatched_full_rank,hipblasSgetriBatched_rank_0,hipblasSgetriBatched_rank_1
#endif

  end interface
  
  interface hipblasDgetriBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgetriBatched_orig(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count) bind(c, name="cublasDgetriBatched")
#else
    function hipblasDgetriBatched_orig(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count) bind(c, name="hipblasDgetriBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetriBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgetriBatched_full_rank,hipblasDgetriBatched_rank_0,hipblasDgetriBatched_rank_1
#endif

  end interface
  
  interface hipblasCgetriBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgetriBatched_orig(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count) bind(c, name="cublasCgetriBatched")
#else
    function hipblasCgetriBatched_orig(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count) bind(c, name="hipblasCgetriBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetriBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgetriBatched_full_rank,hipblasCgetriBatched_rank_0,hipblasCgetriBatched_rank_1
#endif

  end interface
  
  interface hipblasZgetriBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgetriBatched_orig(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count) bind(c, name="cublasZgetriBatched")
#else
    function hipblasZgetriBatched_orig(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count) bind(c, name="hipblasZgetriBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetriBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgetriBatched_full_rank,hipblasZgetriBatched_rank_0,hipblasZgetriBatched_rank_1
#endif

  end interface
  
  interface hipblasSgeqrf
#ifdef USE_CUDA_NAMES
    function hipblasSgeqrf_orig(handle,m,n,A,lda,ipiv,myInfo) bind(c, name="cublasSgeqrf")
#else
    function hipblasSgeqrf_orig(handle,m,n,A,lda,ipiv,myInfo) bind(c, name="hipblasSgeqrf")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrf_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgeqrf_full_rank,hipblasSgeqrf_rank_0,hipblasSgeqrf_rank_1
#endif

  end interface
  
  interface hipblasDgeqrf
#ifdef USE_CUDA_NAMES
    function hipblasDgeqrf_orig(handle,m,n,A,lda,ipiv,myInfo) bind(c, name="cublasDgeqrf")
#else
    function hipblasDgeqrf_orig(handle,m,n,A,lda,ipiv,myInfo) bind(c, name="hipblasDgeqrf")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrf_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgeqrf_full_rank,hipblasDgeqrf_rank_0,hipblasDgeqrf_rank_1
#endif

  end interface
  
  interface hipblasCgeqrf
#ifdef USE_CUDA_NAMES
    function hipblasCgeqrf_orig(handle,m,n,A,lda,ipiv,myInfo) bind(c, name="cublasCgeqrf")
#else
    function hipblasCgeqrf_orig(handle,m,n,A,lda,ipiv,myInfo) bind(c, name="hipblasCgeqrf")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrf_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeqrf_full_rank,hipblasCgeqrf_rank_0,hipblasCgeqrf_rank_1
#endif

  end interface
  
  interface hipblasZgeqrf
#ifdef USE_CUDA_NAMES
    function hipblasZgeqrf_orig(handle,m,n,A,lda,ipiv,myInfo) bind(c, name="cublasZgeqrf")
#else
    function hipblasZgeqrf_orig(handle,m,n,A,lda,ipiv,myInfo) bind(c, name="hipblasZgeqrf")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrf_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeqrf_full_rank,hipblasZgeqrf_rank_0,hipblasZgeqrf_rank_1
#endif

  end interface
  
  interface hipblasSgeqrfBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgeqrfBatched_orig(handle,m,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="cublasSgeqrfBatched")
#else
    function hipblasSgeqrfBatched_orig(handle,m,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="hipblasSgeqrfBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrfBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgeqrfBatched_full_rank,hipblasSgeqrfBatched_rank_0,hipblasSgeqrfBatched_rank_1
#endif

  end interface
  
  interface hipblasDgeqrfBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgeqrfBatched_orig(handle,m,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="cublasDgeqrfBatched")
#else
    function hipblasDgeqrfBatched_orig(handle,m,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="hipblasDgeqrfBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrfBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgeqrfBatched_full_rank,hipblasDgeqrfBatched_rank_0,hipblasDgeqrfBatched_rank_1
#endif

  end interface
  
  interface hipblasCgeqrfBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgeqrfBatched_orig(handle,m,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="cublasCgeqrfBatched")
#else
    function hipblasCgeqrfBatched_orig(handle,m,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="hipblasCgeqrfBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrfBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeqrfBatched_full_rank,hipblasCgeqrfBatched_rank_0,hipblasCgeqrfBatched_rank_1
#endif

  end interface
  
  interface hipblasZgeqrfBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgeqrfBatched_orig(handle,m,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="cublasZgeqrfBatched")
#else
    function hipblasZgeqrfBatched_orig(handle,m,n,A,lda,ipiv,myInfo,batch_count) bind(c, name="hipblasZgeqrfBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrfBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeqrfBatched_full_rank,hipblasZgeqrfBatched_rank_0,hipblasZgeqrfBatched_rank_1
#endif

  end interface
  
  interface hipblasSgeqrfStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgeqrfStridedBatched_orig(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="cublasSgeqrfStridedBatched")
#else
    function hipblasSgeqrfStridedBatched_orig(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="hipblasSgeqrfStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrfStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgeqrfStridedBatched_full_rank,hipblasSgeqrfStridedBatched_rank_0,hipblasSgeqrfStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDgeqrfStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgeqrfStridedBatched_orig(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="cublasDgeqrfStridedBatched")
#else
    function hipblasDgeqrfStridedBatched_orig(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="hipblasDgeqrfStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrfStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgeqrfStridedBatched_full_rank,hipblasDgeqrfStridedBatched_rank_0,hipblasDgeqrfStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgeqrfStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgeqrfStridedBatched_orig(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="cublasCgeqrfStridedBatched")
#else
    function hipblasCgeqrfStridedBatched_orig(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="hipblasCgeqrfStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrfStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgeqrfStridedBatched_full_rank,hipblasCgeqrfStridedBatched_rank_0,hipblasCgeqrfStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgeqrfStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgeqrfStridedBatched_orig(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="cublasZgeqrfStridedBatched")
#else
    function hipblasZgeqrfStridedBatched_orig(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count) bind(c, name="hipblasZgeqrfStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrfStridedBatched_orig
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgeqrfStridedBatched_full_rank,hipblasZgeqrfStridedBatched_rank_0,hipblasZgeqrfStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasSgemm
#ifdef USE_CUDA_NAMES
    function hipblasSgemm_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasSgemm_v2")
#else
    function hipblasSgemm_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasSgemm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgemm_full_rank,hipblasSgemm_rank_0,hipblasSgemm_rank_1
#endif

  end interface
  
  interface hipblasDgemm
#ifdef USE_CUDA_NAMES
    function hipblasDgemm_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasDgemm_v2")
#else
    function hipblasDgemm_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasDgemm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgemm_full_rank,hipblasDgemm_rank_0,hipblasDgemm_rank_1
#endif

  end interface
  
  interface hipblasCgemm
#ifdef USE_CUDA_NAMES
    function hipblasCgemm_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasCgemm_v2")
#else
    function hipblasCgemm_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasCgemm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgemm_full_rank,hipblasCgemm_rank_0,hipblasCgemm_rank_1
#endif

  end interface
  
  interface hipblasZgemm
#ifdef USE_CUDA_NAMES
    function hipblasZgemm_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="cublasZgemm_v2")
#else
    function hipblasZgemm_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc) bind(c, name="hipblasZgemm")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemm_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgemm_full_rank,hipblasZgemm_rank_0,hipblasZgemm_rank_1
#endif

  end interface
  
  interface hipblasSgemmBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgemmBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasSgemmBatched")
#else
    function hipblasSgemmBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasSgemmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgemmBatched_full_rank,hipblasSgemmBatched_rank_0,hipblasSgemmBatched_rank_1
#endif

  end interface
  
  interface hipblasDgemmBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgemmBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasDgemmBatched")
#else
    function hipblasDgemmBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasDgemmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgemmBatched_full_rank,hipblasDgemmBatched_rank_0,hipblasDgemmBatched_rank_1
#endif

  end interface
  
  interface hipblasCgemmBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgemmBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasCgemmBatched")
#else
    function hipblasCgemmBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasCgemmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgemmBatched_full_rank,hipblasCgemmBatched_rank_0,hipblasCgemmBatched_rank_1
#endif

  end interface
  
  interface hipblasZgemmBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgemmBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="cublasZgemmBatched")
#else
    function hipblasZgemmBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount) bind(c, name="hipblasZgemmBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemmBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      type(c_ptr) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgemmBatched_full_rank,hipblasZgemmBatched_rank_0,hipblasZgemmBatched_rank_1
#endif

  end interface
  
  interface hipblasSgemmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasSgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount) bind(c, name="cublasSgemmStridedBatched")
#else
    function hipblasSgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount) bind(c, name="hipblasSgemmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      real(c_float) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasSgemmStridedBatched_full_rank,hipblasSgemmStridedBatched_rank_0,hipblasSgemmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasDgemmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasDgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount) bind(c, name="cublasDgemmStridedBatched")
#else
    function hipblasDgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount) bind(c, name="hipblasDgemmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      real(c_double) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasDgemmStridedBatched_full_rank,hipblasDgemmStridedBatched_rank_0,hipblasDgemmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasCgemmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasCgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount) bind(c, name="cublasCgemmStridedBatched")
#else
    function hipblasCgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount) bind(c, name="hipblasCgemmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      complex(c_float_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasCgemmStridedBatched_full_rank,hipblasCgemmStridedBatched_rank_0,hipblasCgemmStridedBatched_rank_1
#endif

  end interface
  
  interface hipblasZgemmStridedBatched
#ifdef USE_CUDA_NAMES
    function hipblasZgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount) bind(c, name="cublasZgemmStridedBatched")
#else
    function hipblasZgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount) bind(c, name="hipblasZgemmStridedBatched")
#endif
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemmStridedBatched_orig
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      type(c_ptr),value :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      complex(c_double_complex) :: beta
      type(c_ptr),value :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
    end function

#ifdef USE_FPOINTER_INTERFACES
    module procedure hipblasZgemmStridedBatched_full_rank,hipblasZgemmStridedBatched_rank_0,hipblasZgemmStridedBatched_rank_1
#endif

  end interface

#ifdef USE_FPOINTER_INTERFACES
  contains
    function hipblasIsamax_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamax_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIsamax_rank_0 = hipblasIsamax_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIsamax_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamax_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIsamax_rank_1 = hipblasIsamax_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIdamax_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamax_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIdamax_rank_0 = hipblasIdamax_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIdamax_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamax_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIdamax_rank_1 = hipblasIdamax_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIcamax_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamax_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIcamax_rank_0 = hipblasIcamax_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIcamax_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamax_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIcamax_rank_1 = hipblasIcamax_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIzamax_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamax_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIzamax_rank_0 = hipblasIzamax_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIzamax_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamax_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIzamax_rank_1 = hipblasIzamax_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIsamaxBatched_full_rank(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamaxBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsamaxBatched_full_rank = hipblasIsamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIsamaxBatched_rank_0(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamaxBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsamaxBatched_rank_0 = hipblasIsamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIsamaxBatched_rank_1(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamaxBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsamaxBatched_rank_1 = hipblasIsamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIdamaxBatched_full_rank(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamaxBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdamaxBatched_full_rank = hipblasIdamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIdamaxBatched_rank_0(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamaxBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdamaxBatched_rank_0 = hipblasIdamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIdamaxBatched_rank_1(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamaxBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdamaxBatched_rank_1 = hipblasIdamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIcamaxBatched_full_rank(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamaxBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcamaxBatched_full_rank = hipblasIcamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIcamaxBatched_rank_0(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamaxBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcamaxBatched_rank_0 = hipblasIcamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIcamaxBatched_rank_1(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamaxBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcamaxBatched_rank_1 = hipblasIcamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIzamaxBatched_full_rank(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamaxBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzamaxBatched_full_rank = hipblasIzamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIzamaxBatched_rank_0(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamaxBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzamaxBatched_rank_0 = hipblasIzamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIzamaxBatched_rank_1(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamaxBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzamaxBatched_rank_1 = hipblasIzamaxBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIsamaxStridedBatched_rank_0(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamaxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsamaxStridedBatched_rank_0 = hipblasIsamaxStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIsamaxStridedBatched_rank_1(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamaxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsamaxStridedBatched_rank_1 = hipblasIsamaxStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIdamaxStridedBatched_rank_0(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamaxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdamaxStridedBatched_rank_0 = hipblasIdamaxStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIdamaxStridedBatched_rank_1(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamaxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdamaxStridedBatched_rank_1 = hipblasIdamaxStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIcamaxStridedBatched_rank_0(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamaxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcamaxStridedBatched_rank_0 = hipblasIcamaxStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIcamaxStridedBatched_rank_1(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamaxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcamaxStridedBatched_rank_1 = hipblasIcamaxStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIzamaxStridedBatched_rank_0(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamaxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzamaxStridedBatched_rank_0 = hipblasIzamaxStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIzamaxStridedBatched_rank_1(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamaxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzamaxStridedBatched_rank_1 = hipblasIzamaxStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIsamin_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamin_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIsamin_rank_0 = hipblasIsamin_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIsamin_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsamin_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIsamin_rank_1 = hipblasIsamin_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIdamin_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamin_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIdamin_rank_0 = hipblasIdamin_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIdamin_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdamin_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIdamin_rank_1 = hipblasIdamin_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIcamin_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamin_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIcamin_rank_0 = hipblasIcamin_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIcamin_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcamin_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIcamin_rank_1 = hipblasIcamin_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIzamin_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamin_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIzamin_rank_0 = hipblasIzamin_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIzamin_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzamin_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasIzamin_rank_1 = hipblasIzamin_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasIsaminBatched_full_rank(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsaminBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsaminBatched_full_rank = hipblasIsaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIsaminBatched_rank_0(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsaminBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsaminBatched_rank_0 = hipblasIsaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIsaminBatched_rank_1(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsaminBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsaminBatched_rank_1 = hipblasIsaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIdaminBatched_full_rank(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdaminBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdaminBatched_full_rank = hipblasIdaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIdaminBatched_rank_0(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdaminBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdaminBatched_rank_0 = hipblasIdaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIdaminBatched_rank_1(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdaminBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdaminBatched_rank_1 = hipblasIdaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIcaminBatched_full_rank(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcaminBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcaminBatched_full_rank = hipblasIcaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIcaminBatched_rank_0(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcaminBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcaminBatched_rank_0 = hipblasIcaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIcaminBatched_rank_1(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcaminBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcaminBatched_rank_1 = hipblasIcaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIzaminBatched_full_rank(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzaminBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzaminBatched_full_rank = hipblasIzaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIzaminBatched_rank_0(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzaminBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzaminBatched_rank_0 = hipblasIzaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIzaminBatched_rank_1(handle,n,x,incx,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzaminBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzaminBatched_rank_1 = hipblasIzaminBatched_orig(handle,n,c_loc(x),incx,batch_count,myResult)
    end function

    function hipblasIsaminStridedBatched_rank_0(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsaminStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsaminStridedBatched_rank_0 = hipblasIsaminStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIsaminStridedBatched_rank_1(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIsaminStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIsaminStridedBatched_rank_1 = hipblasIsaminStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIdaminStridedBatched_rank_0(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdaminStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdaminStridedBatched_rank_0 = hipblasIdaminStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIdaminStridedBatched_rank_1(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIdaminStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIdaminStridedBatched_rank_1 = hipblasIdaminStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIcaminStridedBatched_rank_0(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcaminStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcaminStridedBatched_rank_0 = hipblasIcaminStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIcaminStridedBatched_rank_1(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIcaminStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIcaminStridedBatched_rank_1 = hipblasIcaminStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIzaminStridedBatched_rank_0(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzaminStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzaminStridedBatched_rank_0 = hipblasIzaminStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasIzaminStridedBatched_rank_1(handle,n,x,incx,stridex,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasIzaminStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasIzaminStridedBatched_rank_1 = hipblasIzaminStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batch_count,myResult)
    end function

    function hipblasSasum_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasum_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasSasum_rank_0 = hipblasSasum_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasSasum_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasum_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasSasum_rank_1 = hipblasSasum_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasDasum_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasum_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasDasum_rank_0 = hipblasDasum_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasDasum_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasum_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasDasum_rank_1 = hipblasDasum_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasScasum_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasum_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasScasum_rank_0 = hipblasScasum_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasScasum_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasum_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasScasum_rank_1 = hipblasScasum_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasDzasum_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasum_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasDzasum_rank_0 = hipblasDzasum_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasDzasum_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasum_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasDzasum_rank_1 = hipblasDzasum_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasSasumBatched_full_rank(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasumBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSasumBatched_full_rank = hipblasSasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasSasumBatched_rank_0(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasumBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSasumBatched_rank_0 = hipblasSasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasSasumBatched_rank_1(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasumBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSasumBatched_rank_1 = hipblasSasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDasumBatched_full_rank(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasumBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDasumBatched_full_rank = hipblasDasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDasumBatched_rank_0(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasumBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDasumBatched_rank_0 = hipblasDasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDasumBatched_rank_1(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasumBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDasumBatched_rank_1 = hipblasDasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasScasumBatched_full_rank(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasumBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScasumBatched_full_rank = hipblasScasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasScasumBatched_rank_0(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasumBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScasumBatched_rank_0 = hipblasScasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasScasumBatched_rank_1(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasumBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScasumBatched_rank_1 = hipblasScasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDzasumBatched_full_rank(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasumBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDzasumBatched_full_rank = hipblasDzasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDzasumBatched_rank_0(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasumBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDzasumBatched_rank_0 = hipblasDzasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDzasumBatched_rank_1(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasumBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDzasumBatched_rank_1 = hipblasDzasumBatched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasSasumStridedBatched_rank_0(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasumStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSasumStridedBatched_rank_0 = hipblasSasumStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasSasumStridedBatched_rank_1(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSasumStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSasumStridedBatched_rank_1 = hipblasSasumStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasDasumStridedBatched_rank_0(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasumStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDasumStridedBatched_rank_0 = hipblasDasumStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasDasumStridedBatched_rank_1(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDasumStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDasumStridedBatched_rank_1 = hipblasDasumStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasScasumStridedBatched_rank_0(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasumStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScasumStridedBatched_rank_0 = hipblasScasumStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasScasumStridedBatched_rank_1(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScasumStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScasumStridedBatched_rank_1 = hipblasScasumStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasDzasumStridedBatched_rank_0(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasumStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDzasumStridedBatched_rank_0 = hipblasDzasumStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasDzasumStridedBatched_rank_1(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDzasumStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDzasumStridedBatched_rank_1 = hipblasDzasumStridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasSaxpy_rank_0(handle,n,alpha,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpy_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      !
      hipblasSaxpy_rank_0 = hipblasSaxpy_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasSaxpy_rank_1(handle,n,alpha,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpy_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSaxpy_rank_1 = hipblasSaxpy_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasDaxpy_rank_0(handle,n,alpha,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpy_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      !
      hipblasDaxpy_rank_0 = hipblasDaxpy_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasDaxpy_rank_1(handle,n,alpha,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpy_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDaxpy_rank_1 = hipblasDaxpy_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasCaxpy_rank_0(handle,n,alpha,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpy_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasCaxpy_rank_0 = hipblasCaxpy_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasCaxpy_rank_1(handle,n,alpha,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpy_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCaxpy_rank_1 = hipblasCaxpy_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasZaxpy_rank_0(handle,n,alpha,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpy_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZaxpy_rank_0 = hipblasZaxpy_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasZaxpy_rank_1(handle,n,alpha,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpy_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZaxpy_rank_1 = hipblasZaxpy_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasSaxpyBatched_full_rank(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpyBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasSaxpyBatched_full_rank = hipblasSaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasSaxpyBatched_rank_0(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpyBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasSaxpyBatched_rank_0 = hipblasSaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasSaxpyBatched_rank_1(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpyBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasSaxpyBatched_rank_1 = hipblasSaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasDaxpyBatched_full_rank(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpyBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasDaxpyBatched_full_rank = hipblasDaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasDaxpyBatched_rank_0(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpyBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasDaxpyBatched_rank_0 = hipblasDaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasDaxpyBatched_rank_1(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpyBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasDaxpyBatched_rank_1 = hipblasDaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasCaxpyBatched_full_rank(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpyBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasCaxpyBatched_full_rank = hipblasCaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasCaxpyBatched_rank_0(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpyBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasCaxpyBatched_rank_0 = hipblasCaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasCaxpyBatched_rank_1(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpyBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasCaxpyBatched_rank_1 = hipblasCaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasZaxpyBatched_full_rank(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpyBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZaxpyBatched_full_rank = hipblasZaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasZaxpyBatched_rank_0(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpyBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZaxpyBatched_rank_0 = hipblasZaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasZaxpyBatched_rank_1(handle,n,alpha,x,incx,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpyBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZaxpyBatched_rank_1 = hipblasZaxpyBatched_orig(handle,n,alpha,c_loc(x),incx,c_loc(y),incy,batch_count)
    end function

    function hipblasSaxpyStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpyStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      !
      hipblasSaxpyStridedBatched_rank_0 = hipblasSaxpyStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count)
    end function

    function hipblasSaxpyStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSaxpyStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      !
      hipblasSaxpyStridedBatched_rank_1 = hipblasSaxpyStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count)
    end function

    function hipblasDaxpyStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpyStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      !
      hipblasDaxpyStridedBatched_rank_0 = hipblasDaxpyStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count)
    end function

    function hipblasDaxpyStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDaxpyStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      !
      hipblasDaxpyStridedBatched_rank_1 = hipblasDaxpyStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count)
    end function

    function hipblasCaxpyStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpyStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      !
      hipblasCaxpyStridedBatched_rank_0 = hipblasCaxpyStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count)
    end function

    function hipblasCaxpyStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCaxpyStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      !
      hipblasCaxpyStridedBatched_rank_1 = hipblasCaxpyStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count)
    end function

    function hipblasZaxpyStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpyStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      !
      hipblasZaxpyStridedBatched_rank_0 = hipblasZaxpyStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count)
    end function

    function hipblasZaxpyStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,y,incy,stridey,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZaxpyStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      !
      hipblasZaxpyStridedBatched_rank_1 = hipblasZaxpyStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count)
    end function

    function hipblasScopy_rank_0(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopy_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      !
      hipblasScopy_rank_0 = hipblasScopy_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasScopy_rank_1(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopy_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasScopy_rank_1 = hipblasScopy_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasDcopy_rank_0(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopy_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      !
      hipblasDcopy_rank_0 = hipblasDcopy_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasDcopy_rank_1(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopy_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDcopy_rank_1 = hipblasDcopy_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasCcopy_rank_0(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopy_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasCcopy_rank_0 = hipblasCcopy_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasCcopy_rank_1(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopy_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCcopy_rank_1 = hipblasCcopy_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasZcopy_rank_0(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopy_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZcopy_rank_0 = hipblasZcopy_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasZcopy_rank_1(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopy_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZcopy_rank_1 = hipblasZcopy_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasScopyBatched_full_rank(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopyBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasScopyBatched_full_rank = hipblasScopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasScopyBatched_rank_0(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopyBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasScopyBatched_rank_0 = hipblasScopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasScopyBatched_rank_1(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopyBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasScopyBatched_rank_1 = hipblasScopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasDcopyBatched_full_rank(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopyBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDcopyBatched_full_rank = hipblasDcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasDcopyBatched_rank_0(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopyBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDcopyBatched_rank_0 = hipblasDcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasDcopyBatched_rank_1(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopyBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDcopyBatched_rank_1 = hipblasDcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasCcopyBatched_full_rank(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopyBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCcopyBatched_full_rank = hipblasCcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasCcopyBatched_rank_0(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopyBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCcopyBatched_rank_0 = hipblasCcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasCcopyBatched_rank_1(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopyBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCcopyBatched_rank_1 = hipblasCcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasZcopyBatched_full_rank(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopyBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZcopyBatched_full_rank = hipblasZcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasZcopyBatched_rank_0(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopyBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZcopyBatched_rank_0 = hipblasZcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasZcopyBatched_rank_1(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopyBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZcopyBatched_rank_1 = hipblasZcopyBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasScopyStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopyStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasScopyStridedBatched_rank_0 = hipblasScopyStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasScopyStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScopyStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasScopyStridedBatched_rank_1 = hipblasScopyStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDcopyStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopyStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDcopyStridedBatched_rank_0 = hipblasDcopyStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDcopyStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDcopyStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDcopyStridedBatched_rank_1 = hipblasDcopyStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCcopyStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopyStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCcopyStridedBatched_rank_0 = hipblasCcopyStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCcopyStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCcopyStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCcopyStridedBatched_rank_1 = hipblasCcopyStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZcopyStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopyStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZcopyStridedBatched_rank_0 = hipblasZcopyStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZcopyStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZcopyStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZcopyStridedBatched_rank_1 = hipblasZcopyStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSdot_rank_0(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdot_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasSdot_rank_0 = hipblasSdot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasSdot_rank_1(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdot_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasSdot_rank_1 = hipblasSdot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasDdot_rank_0(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdot_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasDdot_rank_0 = hipblasDdot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasDdot_rank_1(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdot_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasDdot_rank_1 = hipblasDdot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasCdotc_rank_0(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotc_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasCdotc_rank_0 = hipblasCdotc_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasCdotc_rank_1(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotc_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasCdotc_rank_1 = hipblasCdotc_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasCdotu_rank_0(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotu_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasCdotu_rank_0 = hipblasCdotu_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasCdotu_rank_1(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotu_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasCdotu_rank_1 = hipblasCdotu_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasZdotc_rank_0(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotc_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasZdotc_rank_0 = hipblasZdotc_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasZdotc_rank_1(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotc_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasZdotc_rank_1 = hipblasZdotc_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasZdotu_rank_0(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotu_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasZdotu_rank_0 = hipblasZdotu_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasZdotu_rank_1(handle,n,x,incx,y,incy,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotu_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: myResult
      !
      hipblasZdotu_rank_1 = hipblasZdotu_orig(handle,n,c_loc(x),incx,c_loc(y),incy,myResult)
    end function

    function hipblasSdotBatched_full_rank(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdotBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasSdotBatched_full_rank = hipblasSdotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasSdotBatched_rank_0(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdotBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasSdotBatched_rank_0 = hipblasSdotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasSdotBatched_rank_1(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdotBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasSdotBatched_rank_1 = hipblasSdotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasDdotBatched_full_rank(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdotBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasDdotBatched_full_rank = hipblasDdotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasDdotBatched_rank_0(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdotBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasDdotBatched_rank_0 = hipblasDdotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasDdotBatched_rank_1(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdotBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasDdotBatched_rank_1 = hipblasDdotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasCdotcBatched_full_rank(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotcBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotcBatched_full_rank = hipblasCdotcBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasCdotcBatched_rank_0(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotcBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotcBatched_rank_0 = hipblasCdotcBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasCdotcBatched_rank_1(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotcBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotcBatched_rank_1 = hipblasCdotcBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasCdotuBatched_full_rank(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotuBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotuBatched_full_rank = hipblasCdotuBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasCdotuBatched_rank_0(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotuBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotuBatched_rank_0 = hipblasCdotuBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasCdotuBatched_rank_1(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotuBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotuBatched_rank_1 = hipblasCdotuBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasZdotcBatched_full_rank(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotcBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotcBatched_full_rank = hipblasZdotcBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasZdotcBatched_rank_0(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotcBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotcBatched_rank_0 = hipblasZdotcBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasZdotcBatched_rank_1(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotcBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotcBatched_rank_1 = hipblasZdotcBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasZdotuBatched_full_rank(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotuBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotuBatched_full_rank = hipblasZdotuBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasZdotuBatched_rank_0(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotuBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotuBatched_rank_0 = hipblasZdotuBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasZdotuBatched_rank_1(handle,n,x,incx,y,incy,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotuBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotuBatched_rank_1 = hipblasZdotuBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batch_count,myResult)
    end function

    function hipblasSdotStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdotStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasSdotStridedBatched_rank_0 = hipblasSdotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasSdotStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdotStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasSdotStridedBatched_rank_1 = hipblasSdotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasDdotStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdotStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasDdotStridedBatched_rank_0 = hipblasDdotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasDdotStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdotStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasDdotStridedBatched_rank_1 = hipblasDdotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasCdotcStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotcStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotcStridedBatched_rank_0 = hipblasCdotcStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasCdotcStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotcStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotcStridedBatched_rank_1 = hipblasCdotcStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasCdotuStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotuStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotuStridedBatched_rank_0 = hipblasCdotuStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasCdotuStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdotuStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasCdotuStridedBatched_rank_1 = hipblasCdotuStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasZdotcStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotcStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotcStridedBatched_rank_0 = hipblasZdotcStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasZdotcStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotcStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotcStridedBatched_rank_1 = hipblasZdotcStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasZdotuStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotuStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotuStridedBatched_rank_0 = hipblasZdotuStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasZdotuStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batch_count,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdotuStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batch_count
      type(c_ptr),value :: myResult
      !
      hipblasZdotuStridedBatched_rank_1 = hipblasZdotuStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batch_count,myResult)
    end function

    function hipblasSnrm2_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasSnrm2_rank_0 = hipblasSnrm2_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasSnrm2_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasSnrm2_rank_1 = hipblasSnrm2_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasDnrm2_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasDnrm2_rank_0 = hipblasDnrm2_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasDnrm2_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasDnrm2_rank_1 = hipblasDnrm2_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasScnrm2_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasScnrm2_rank_0 = hipblasScnrm2_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasScnrm2_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasScnrm2_rank_1 = hipblasScnrm2_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasDznrm2_rank_0(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasDznrm2_rank_0 = hipblasDznrm2_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasDznrm2_rank_1(handle,n,x,incx,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: myResult
      !
      hipblasDznrm2_rank_1 = hipblasDznrm2_orig(handle,n,c_loc(x),incx,myResult)
    end function

    function hipblasSnrm2Batched_full_rank(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2Batched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSnrm2Batched_full_rank = hipblasSnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasSnrm2Batched_rank_0(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2Batched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSnrm2Batched_rank_0 = hipblasSnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasSnrm2Batched_rank_1(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2Batched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSnrm2Batched_rank_1 = hipblasSnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDnrm2Batched_full_rank(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2Batched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDnrm2Batched_full_rank = hipblasDnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDnrm2Batched_rank_0(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2Batched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDnrm2Batched_rank_0 = hipblasDnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDnrm2Batched_rank_1(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2Batched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDnrm2Batched_rank_1 = hipblasDnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasScnrm2Batched_full_rank(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2Batched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScnrm2Batched_full_rank = hipblasScnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasScnrm2Batched_rank_0(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2Batched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScnrm2Batched_rank_0 = hipblasScnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasScnrm2Batched_rank_1(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2Batched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScnrm2Batched_rank_1 = hipblasScnrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDznrm2Batched_full_rank(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2Batched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDznrm2Batched_full_rank = hipblasDznrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDznrm2Batched_rank_0(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2Batched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDznrm2Batched_rank_0 = hipblasDznrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasDznrm2Batched_rank_1(handle,n,x,incx,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2Batched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDznrm2Batched_rank_1 = hipblasDznrm2Batched_orig(handle,n,c_loc(x),incx,batchCount,myResult)
    end function

    function hipblasSnrm2StridedBatched_rank_0(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSnrm2StridedBatched_rank_0 = hipblasSnrm2StridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasSnrm2StridedBatched_rank_1(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSnrm2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasSnrm2StridedBatched_rank_1 = hipblasSnrm2StridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasDnrm2StridedBatched_rank_0(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDnrm2StridedBatched_rank_0 = hipblasDnrm2StridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasDnrm2StridedBatched_rank_1(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDnrm2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDnrm2StridedBatched_rank_1 = hipblasDnrm2StridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasScnrm2StridedBatched_rank_0(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScnrm2StridedBatched_rank_0 = hipblasScnrm2StridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasScnrm2StridedBatched_rank_1(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasScnrm2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasScnrm2StridedBatched_rank_1 = hipblasScnrm2StridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasDznrm2StridedBatched_rank_0(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDznrm2StridedBatched_rank_0 = hipblasDznrm2StridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasDznrm2StridedBatched_rank_1(handle,n,x,incx,stridex,batchCount,myResult)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDznrm2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      type(c_ptr),value :: myResult
      !
      hipblasDznrm2StridedBatched_rank_1 = hipblasDznrm2StridedBatched_orig(handle,n,c_loc(x),incx,stridex,batchCount,myResult)
    end function

    function hipblasSrot_rank_0(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrot_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasSrot_rank_0 = hipblasSrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasSrot_rank_1(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrot_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasSrot_rank_1 = hipblasSrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasDrot_rank_0(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrot_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasDrot_rank_0 = hipblasDrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasDrot_rank_1(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrot_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasDrot_rank_1 = hipblasDrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasCrot_rank_0(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrot_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasCrot_rank_0 = hipblasCrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasCrot_rank_1(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrot_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasCrot_rank_1 = hipblasCrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasCsrot_rank_0(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrot_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasCsrot_rank_0 = hipblasCsrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasCsrot_rank_1(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrot_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasCsrot_rank_1 = hipblasCsrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasZrot_rank_0(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrot_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasZrot_rank_0 = hipblasZrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasZrot_rank_1(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrot_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasZrot_rank_1 = hipblasZrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasZdrot_rank_0(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrot_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasZdrot_rank_0 = hipblasZdrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasZdrot_rank_1(handle,n,x,incx,y,incy,c,s)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrot_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      !
      hipblasZdrot_rank_1 = hipblasZdrot_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s)
    end function

    function hipblasSrotBatched_full_rank(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasSrotBatched_full_rank = hipblasSrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasSrotBatched_rank_0(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasSrotBatched_rank_0 = hipblasSrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasSrotBatched_rank_1(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasSrotBatched_rank_1 = hipblasSrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasDrotBatched_full_rank(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasDrotBatched_full_rank = hipblasDrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasDrotBatched_rank_0(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasDrotBatched_rank_0 = hipblasDrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasDrotBatched_rank_1(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasDrotBatched_rank_1 = hipblasDrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasCrotBatched_full_rank(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCrotBatched_full_rank = hipblasCrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasCrotBatched_rank_0(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCrotBatched_rank_0 = hipblasCrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasCrotBatched_rank_1(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCrotBatched_rank_1 = hipblasCrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasCsrotBatched_full_rank(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrotBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCsrotBatched_full_rank = hipblasCsrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasCsrotBatched_rank_0(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrotBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCsrotBatched_rank_0 = hipblasCsrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasCsrotBatched_rank_1(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrotBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCsrotBatched_rank_1 = hipblasCsrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasZrotBatched_full_rank(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZrotBatched_full_rank = hipblasZrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasZrotBatched_rank_0(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZrotBatched_rank_0 = hipblasZrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasZrotBatched_rank_1(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZrotBatched_rank_1 = hipblasZrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasZdrotBatched_full_rank(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrotBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZdrotBatched_full_rank = hipblasZdrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasZdrotBatched_rank_0(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrotBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZdrotBatched_rank_0 = hipblasZdrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasZdrotBatched_rank_1(handle,n,x,incx,y,incy,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrotBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZdrotBatched_rank_1 = hipblasZdrotBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,c,s,batchCount)
    end function

    function hipblasSrotStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasSrotStridedBatched_rank_0 = hipblasSrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasSrotStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasSrotStridedBatched_rank_1 = hipblasSrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasDrotStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasDrotStridedBatched_rank_0 = hipblasDrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasDrotStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasDrotStridedBatched_rank_1 = hipblasDrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasCrotStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCrotStridedBatched_rank_0 = hipblasCrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasCrotStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCrotStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCrotStridedBatched_rank_1 = hipblasCrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasCsrotStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrotStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCsrotStridedBatched_rank_0 = hipblasCsrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasCsrotStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsrotStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasCsrotStridedBatched_rank_1 = hipblasCsrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasZrotStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZrotStridedBatched_rank_0 = hipblasZrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasZrotStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZrotStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZrotStridedBatched_rank_1 = hipblasZrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasZdrotStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrotStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZdrotStridedBatched_rank_0 = hipblasZdrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasZdrotStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,c,s,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdrotStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: c
      type(c_ptr),value :: s
      integer(c_int),value :: batchCount
      !
      hipblasZdrotStridedBatched_rank_1 = hipblasZdrotStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c,s,batchCount)
    end function

    function hipblasSrotm_rank_0(handle,n,x,incx,y,incy,param)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotm_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: param
      !
      hipblasSrotm_rank_0 = hipblasSrotm_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param)
    end function

    function hipblasSrotm_rank_1(handle,n,x,incx,y,incy,param)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotm_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: param
      !
      hipblasSrotm_rank_1 = hipblasSrotm_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param)
    end function

    function hipblasDrotm_rank_0(handle,n,x,incx,y,incy,param)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotm_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: param
      !
      hipblasDrotm_rank_0 = hipblasDrotm_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param)
    end function

    function hipblasDrotm_rank_1(handle,n,x,incx,y,incy,param)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotm_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: param
      !
      hipblasDrotm_rank_1 = hipblasDrotm_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param)
    end function

    function hipblasSrotmBatched_full_rank(handle,n,x,incx,y,incy,param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
      !
      hipblasSrotmBatched_full_rank = hipblasSrotmBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param,batchCount)
    end function

    function hipblasSrotmBatched_rank_0(handle,n,x,incx,y,incy,param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
      !
      hipblasSrotmBatched_rank_0 = hipblasSrotmBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param,batchCount)
    end function

    function hipblasSrotmBatched_rank_1(handle,n,x,incx,y,incy,param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
      !
      hipblasSrotmBatched_rank_1 = hipblasSrotmBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param,batchCount)
    end function

    function hipblasDrotmBatched_full_rank(handle,n,x,incx,y,incy,param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
      !
      hipblasDrotmBatched_full_rank = hipblasDrotmBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param,batchCount)
    end function

    function hipblasDrotmBatched_rank_0(handle,n,x,incx,y,incy,param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
      !
      hipblasDrotmBatched_rank_0 = hipblasDrotmBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param,batchCount)
    end function

    function hipblasDrotmBatched_rank_1(handle,n,x,incx,y,incy,param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: param
      integer(c_int),value :: batchCount
      !
      hipblasDrotmBatched_rank_1 = hipblasDrotmBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,param,batchCount)
    end function

    function hipblasSrotmStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,param,stride_param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: param
      integer(c_int),value :: stride_param
      integer(c_int),value :: batchCount
      !
      hipblasSrotmStridedBatched_rank_0 = hipblasSrotmStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,param,stride_param,batchCount)
    end function

    function hipblasSrotmStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,param,stride_param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSrotmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: param
      integer(c_int),value :: stride_param
      integer(c_int),value :: batchCount
      !
      hipblasSrotmStridedBatched_rank_1 = hipblasSrotmStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,param,stride_param,batchCount)
    end function

    function hipblasDrotmStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,param,stride_param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: param
      integer(c_int),value :: stride_param
      integer(c_int),value :: batchCount
      !
      hipblasDrotmStridedBatched_rank_0 = hipblasDrotmStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,param,stride_param,batchCount)
    end function

    function hipblasDrotmStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,param,stride_param,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDrotmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: param
      integer(c_int),value :: stride_param
      integer(c_int),value :: batchCount
      !
      hipblasDrotmStridedBatched_rank_1 = hipblasDrotmStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,param,stride_param,batchCount)
    end function

    function hipblasSscal_rank_0(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscal_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      !
      hipblasSscal_rank_0 = hipblasSscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasSscal_rank_1(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscal_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasSscal_rank_1 = hipblasSscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasDscal_rank_0(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscal_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      !
      hipblasDscal_rank_0 = hipblasDscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasDscal_rank_1(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscal_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDscal_rank_1 = hipblasDscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasCscal_rank_0(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscal_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasCscal_rank_0 = hipblasCscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasCscal_rank_1(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscal_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCscal_rank_1 = hipblasCscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasCsscal_rank_0(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscal_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasCsscal_rank_0 = hipblasCsscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasCsscal_rank_1(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscal_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCsscal_rank_1 = hipblasCsscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasZscal_rank_0(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscal_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasZscal_rank_0 = hipblasZscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasZscal_rank_1(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscal_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZscal_rank_1 = hipblasZscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasZdscal_rank_0(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscal_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasZdscal_rank_0 = hipblasZdscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasZdscal_rank_1(handle,n,alpha,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscal_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZdscal_rank_1 = hipblasZdscal_orig(handle,n,alpha,c_loc(x),incx)
    end function

    function hipblasSscalBatched_full_rank(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscalBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasSscalBatched_full_rank = hipblasSscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasSscalBatched_rank_0(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscalBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasSscalBatched_rank_0 = hipblasSscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasSscalBatched_rank_1(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscalBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasSscalBatched_rank_1 = hipblasSscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasDscalBatched_full_rank(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscalBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDscalBatched_full_rank = hipblasDscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasDscalBatched_rank_0(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscalBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDscalBatched_rank_0 = hipblasDscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasDscalBatched_rank_1(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscalBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDscalBatched_rank_1 = hipblasDscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasCscalBatched_full_rank(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscalBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCscalBatched_full_rank = hipblasCscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasCscalBatched_rank_0(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscalBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCscalBatched_rank_0 = hipblasCscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasCscalBatched_rank_1(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscalBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCscalBatched_rank_1 = hipblasCscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasZscalBatched_full_rank(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscalBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZscalBatched_full_rank = hipblasZscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasZscalBatched_rank_0(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscalBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZscalBatched_rank_0 = hipblasZscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasZscalBatched_rank_1(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscalBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZscalBatched_rank_1 = hipblasZscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasCsscalBatched_full_rank(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscalBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCsscalBatched_full_rank = hipblasCsscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasCsscalBatched_rank_0(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscalBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCsscalBatched_rank_0 = hipblasCsscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasCsscalBatched_rank_1(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscalBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCsscalBatched_rank_1 = hipblasCsscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasZdscalBatched_full_rank(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscalBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZdscalBatched_full_rank = hipblasZdscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasZdscalBatched_rank_0(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscalBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZdscalBatched_rank_0 = hipblasZdscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasZdscalBatched_rank_1(handle,n,alpha,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscalBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZdscalBatched_rank_1 = hipblasZdscalBatched_orig(handle,n,alpha,c_loc(x),incx,batchCount)
    end function

    function hipblasSscalStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscalStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasSscalStridedBatched_rank_0 = hipblasSscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasSscalStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSscalStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasSscalStridedBatched_rank_1 = hipblasSscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasDscalStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscalStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasDscalStridedBatched_rank_0 = hipblasDscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasDscalStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDscalStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasDscalStridedBatched_rank_1 = hipblasDscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCscalStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscalStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCscalStridedBatched_rank_0 = hipblasCscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCscalStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCscalStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCscalStridedBatched_rank_1 = hipblasCscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZscalStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscalStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZscalStridedBatched_rank_0 = hipblasZscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZscalStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZscalStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZscalStridedBatched_rank_1 = hipblasZscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCsscalStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscalStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCsscalStridedBatched_rank_0 = hipblasCsscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCsscalStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsscalStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCsscalStridedBatched_rank_1 = hipblasCsscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZdscalStridedBatched_rank_0(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscalStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZdscalStridedBatched_rank_0 = hipblasZdscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZdscalStridedBatched_rank_1(handle,n,alpha,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdscalStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZdscalStridedBatched_rank_1 = hipblasZdscalStridedBatched_orig(handle,n,alpha,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasSswap_rank_0(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswap_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      !
      hipblasSswap_rank_0 = hipblasSswap_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasSswap_rank_1(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswap_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSswap_rank_1 = hipblasSswap_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasDswap_rank_0(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswap_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      !
      hipblasDswap_rank_0 = hipblasDswap_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasDswap_rank_1(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswap_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDswap_rank_1 = hipblasDswap_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasCswap_rank_0(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswap_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasCswap_rank_0 = hipblasCswap_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasCswap_rank_1(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswap_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCswap_rank_1 = hipblasCswap_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasZswap_rank_0(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswap_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZswap_rank_0 = hipblasZswap_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasZswap_rank_1(handle,n,x,incx,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswap_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZswap_rank_1 = hipblasZswap_orig(handle,n,c_loc(x),incx,c_loc(y),incy)
    end function

    function hipblasSswapBatched_full_rank(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswapBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSswapBatched_full_rank = hipblasSswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasSswapBatched_rank_0(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswapBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSswapBatched_rank_0 = hipblasSswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasSswapBatched_rank_1(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswapBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSswapBatched_rank_1 = hipblasSswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasDswapBatched_full_rank(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswapBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDswapBatched_full_rank = hipblasDswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasDswapBatched_rank_0(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswapBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDswapBatched_rank_0 = hipblasDswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasDswapBatched_rank_1(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswapBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDswapBatched_rank_1 = hipblasDswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasCswapBatched_full_rank(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswapBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCswapBatched_full_rank = hipblasCswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasCswapBatched_rank_0(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswapBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCswapBatched_rank_0 = hipblasCswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasCswapBatched_rank_1(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswapBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCswapBatched_rank_1 = hipblasCswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasZswapBatched_full_rank(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswapBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZswapBatched_full_rank = hipblasZswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasZswapBatched_rank_0(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswapBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZswapBatched_rank_0 = hipblasZswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasZswapBatched_rank_1(handle,n,x,incx,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswapBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZswapBatched_rank_1 = hipblasZswapBatched_orig(handle,n,c_loc(x),incx,c_loc(y),incy,batchCount)
    end function

    function hipblasSswapStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswapStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSswapStridedBatched_rank_0 = hipblasSswapStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSswapStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSswapStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSswapStridedBatched_rank_1 = hipblasSswapStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDswapStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswapStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDswapStridedBatched_rank_0 = hipblasDswapStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDswapStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDswapStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDswapStridedBatched_rank_1 = hipblasDswapStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCswapStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswapStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCswapStridedBatched_rank_0 = hipblasCswapStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCswapStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCswapStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCswapStridedBatched_rank_1 = hipblasCswapStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZswapStridedBatched_rank_0(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswapStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZswapStridedBatched_rank_0 = hipblasZswapStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZswapStridedBatched_rank_1(handle,n,x,incx,stridex,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZswapStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZswapStridedBatched_rank_1 = hipblasZswapStridedBatched_orig(handle,n,c_loc(x),incx,stridex,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSgbmv_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSgbmv_full_rank = hipblasSgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSgbmv_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      !
      hipblasSgbmv_rank_0 = hipblasSgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSgbmv_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSgbmv_rank_1 = hipblasSgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDgbmv_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDgbmv_full_rank = hipblasDgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDgbmv_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      !
      hipblasDgbmv_rank_0 = hipblasDgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDgbmv_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDgbmv_rank_1 = hipblasDgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCgbmv_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCgbmv_full_rank = hipblasCgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCgbmv_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasCgbmv_rank_0 = hipblasCgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCgbmv_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCgbmv_rank_1 = hipblasCgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZgbmv_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZgbmv_full_rank = hipblasZgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZgbmv_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZgbmv_rank_0 = hipblasZgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZgbmv_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZgbmv_rank_1 = hipblasZgbmv_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSgbmvBatched_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasSgbmvBatched_full_rank = hipblasSgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasSgbmvBatched_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasSgbmvBatched_rank_0 = hipblasSgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasSgbmvBatched_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasSgbmvBatched_rank_1 = hipblasSgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasDgbmvBatched_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasDgbmvBatched_full_rank = hipblasDgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasDgbmvBatched_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasDgbmvBatched_rank_0 = hipblasDgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasDgbmvBatched_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasDgbmvBatched_rank_1 = hipblasDgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasCgbmvBatched_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasCgbmvBatched_full_rank = hipblasCgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasCgbmvBatched_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasCgbmvBatched_rank_0 = hipblasCgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasCgbmvBatched_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasCgbmvBatched_rank_1 = hipblasCgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasZgbmvBatched_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZgbmvBatched_full_rank = hipblasZgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasZgbmvBatched_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZgbmvBatched_rank_0 = hipblasZgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasZgbmvBatched_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZgbmvBatched_rank_1 = hipblasZgbmvBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasSgbmvStridedBatched_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasSgbmvStridedBatched_full_rank = hipblasSgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasSgbmvStridedBatched_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasSgbmvStridedBatched_rank_0 = hipblasSgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasSgbmvStridedBatched_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasSgbmvStridedBatched_rank_1 = hipblasSgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasDgbmvStridedBatched_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasDgbmvStridedBatched_full_rank = hipblasDgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasDgbmvStridedBatched_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasDgbmvStridedBatched_rank_0 = hipblasDgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasDgbmvStridedBatched_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasDgbmvStridedBatched_rank_1 = hipblasDgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasCgbmvStridedBatched_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasCgbmvStridedBatched_full_rank = hipblasCgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasCgbmvStridedBatched_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasCgbmvStridedBatched_rank_0 = hipblasCgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasCgbmvStridedBatched_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasCgbmvStridedBatched_rank_1 = hipblasCgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasZgbmvStridedBatched_full_rank(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasZgbmvStridedBatched_full_rank = hipblasZgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasZgbmvStridedBatched_rank_0(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasZgbmvStridedBatched_rank_0 = hipblasZgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasZgbmvStridedBatched_rank_1(handle,trans,m,n,kl,ku,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: kl
      integer(c_int),value :: ku
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasZgbmvStridedBatched_rank_1 = hipblasZgbmvStridedBatched_orig(handle,trans,m,n,kl,ku,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasSgemv_full_rank(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSgemv_full_rank = hipblasSgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSgemv_rank_0(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      !
      hipblasSgemv_rank_0 = hipblasSgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSgemv_rank_1(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSgemv_rank_1 = hipblasSgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDgemv_full_rank(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDgemv_full_rank = hipblasDgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDgemv_rank_0(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      !
      hipblasDgemv_rank_0 = hipblasDgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDgemv_rank_1(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDgemv_rank_1 = hipblasDgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCgemv_full_rank(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCgemv_full_rank = hipblasCgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCgemv_rank_0(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasCgemv_rank_0 = hipblasCgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCgemv_rank_1(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCgemv_rank_1 = hipblasCgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZgemv_full_rank(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZgemv_full_rank = hipblasZgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZgemv_rank_0(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZgemv_rank_0 = hipblasZgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZgemv_rank_1(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZgemv_rank_1 = hipblasZgemv_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSgemvBatched_full_rank(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSgemvBatched_full_rank = hipblasSgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSgemvBatched_rank_0(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSgemvBatched_rank_0 = hipblasSgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSgemvBatched_rank_1(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSgemvBatched_rank_1 = hipblasSgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDgemvBatched_full_rank(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDgemvBatched_full_rank = hipblasDgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDgemvBatched_rank_0(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDgemvBatched_rank_0 = hipblasDgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDgemvBatched_rank_1(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDgemvBatched_rank_1 = hipblasDgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasCgemvBatched_full_rank(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCgemvBatched_full_rank = hipblasCgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasCgemvBatched_rank_0(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCgemvBatched_rank_0 = hipblasCgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasCgemvBatched_rank_1(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCgemvBatched_rank_1 = hipblasCgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZgemvBatched_full_rank(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZgemvBatched_full_rank = hipblasZgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZgemvBatched_rank_0(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZgemvBatched_rank_0 = hipblasZgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZgemvBatched_rank_1(handle,trans,m,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZgemvBatched_rank_1 = hipblasZgemvBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSgemvStridedBatched_full_rank(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSgemvStridedBatched_full_rank = hipblasSgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSgemvStridedBatched_rank_0(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSgemvStridedBatched_rank_0 = hipblasSgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSgemvStridedBatched_rank_1(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSgemvStridedBatched_rank_1 = hipblasSgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDgemvStridedBatched_full_rank(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: stridey
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDgemvStridedBatched_full_rank = hipblasDgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),stridey,incy,batchCount)
    end function

    function hipblasDgemvStridedBatched_rank_0(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: stridey
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDgemvStridedBatched_rank_0 = hipblasDgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),stridey,incy,batchCount)
    end function

    function hipblasDgemvStridedBatched_rank_1(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: stridey
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDgemvStridedBatched_rank_1 = hipblasDgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),stridey,incy,batchCount)
    end function

    function hipblasCgemvStridedBatched_full_rank(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCgemvStridedBatched_full_rank = hipblasCgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCgemvStridedBatched_rank_0(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCgemvStridedBatched_rank_0 = hipblasCgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCgemvStridedBatched_rank_1(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCgemvStridedBatched_rank_1 = hipblasCgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZgemvStridedBatched_full_rank(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: stridey
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZgemvStridedBatched_full_rank = hipblasZgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),stridey,incy,batchCount)
    end function

    function hipblasZgemvStridedBatched_rank_0(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: stridey
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZgemvStridedBatched_rank_0 = hipblasZgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),stridey,incy,batchCount)
    end function

    function hipblasZgemvStridedBatched_rank_1(handle,trans,m,n,alpha,A,lda,strideA,x,incx,stridex,beta,y,stridey,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: stridey
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZgemvStridedBatched_rank_1 = hipblasZgemvStridedBatched_orig(handle,trans,m,n,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),stridey,incy,batchCount)
    end function

    function hipblasSger_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSger_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasSger_full_rank = hipblasSger_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasSger_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSger_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      real(c_float),target :: A
      integer(c_int),value :: lda
      !
      hipblasSger_rank_0 = hipblasSger_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasSger_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSger_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasSger_rank_1 = hipblasSger_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasDger_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDger_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasDger_full_rank = hipblasDger_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasDger_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDger_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      real(c_double),target :: A
      integer(c_int),value :: lda
      !
      hipblasDger_rank_0 = hipblasDger_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasDger_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDger_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasDger_rank_1 = hipblasDger_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCgeru_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeru_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasCgeru_full_rank = hipblasCgeru_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCgeru_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeru_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasCgeru_rank_0 = hipblasCgeru_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCgeru_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeru_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasCgeru_rank_1 = hipblasCgeru_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCgerc_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgerc_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasCgerc_full_rank = hipblasCgerc_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCgerc_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgerc_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasCgerc_rank_0 = hipblasCgerc_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCgerc_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgerc_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasCgerc_rank_1 = hipblasCgerc_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZgeru_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeru_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasZgeru_full_rank = hipblasZgeru_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZgeru_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeru_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasZgeru_rank_0 = hipblasZgeru_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZgeru_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeru_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasZgeru_rank_1 = hipblasZgeru_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZgerc_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgerc_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasZgerc_full_rank = hipblasZgerc_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZgerc_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgerc_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasZgerc_rank_0 = hipblasZgerc_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZgerc_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgerc_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasZgerc_rank_1 = hipblasZgerc_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasSgerBatched_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgerBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSgerBatched_full_rank = hipblasSgerBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasSgerBatched_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgerBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSgerBatched_rank_0 = hipblasSgerBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasSgerBatched_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgerBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSgerBatched_rank_1 = hipblasSgerBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasDgerBatched_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgerBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDgerBatched_full_rank = hipblasDgerBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasDgerBatched_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgerBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDgerBatched_rank_0 = hipblasDgerBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasDgerBatched_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgerBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDgerBatched_rank_1 = hipblasDgerBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCgeruBatched_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeruBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCgeruBatched_full_rank = hipblasCgeruBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCgeruBatched_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeruBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCgeruBatched_rank_0 = hipblasCgeruBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCgeruBatched_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeruBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCgeruBatched_rank_1 = hipblasCgeruBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCgercBatched_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgercBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCgercBatched_full_rank = hipblasCgercBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCgercBatched_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgercBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCgercBatched_rank_0 = hipblasCgercBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCgercBatched_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgercBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCgercBatched_rank_1 = hipblasCgercBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZgeruBatched_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeruBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZgeruBatched_full_rank = hipblasZgeruBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZgeruBatched_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeruBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZgeruBatched_rank_0 = hipblasZgeruBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZgeruBatched_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeruBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZgeruBatched_rank_1 = hipblasZgeruBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZgercBatched_full_rank(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgercBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZgercBatched_full_rank = hipblasZgercBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZgercBatched_rank_0(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgercBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZgercBatched_rank_0 = hipblasZgercBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZgercBatched_rank_1(handle,m,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgercBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZgercBatched_rank_1 = hipblasZgercBatched_orig(handle,m,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasSgerStridedBatched_full_rank(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgerStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasSgerStridedBatched_full_rank = hipblasSgerStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasSgerStridedBatched_rank_0(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgerStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasSgerStridedBatched_rank_0 = hipblasSgerStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasSgerStridedBatched_rank_1(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgerStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasSgerStridedBatched_rank_1 = hipblasSgerStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasDgerStridedBatched_full_rank(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgerStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasDgerStridedBatched_full_rank = hipblasDgerStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasDgerStridedBatched_rank_0(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgerStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasDgerStridedBatched_rank_0 = hipblasDgerStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasDgerStridedBatched_rank_1(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgerStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasDgerStridedBatched_rank_1 = hipblasDgerStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCgeruStridedBatched_full_rank(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeruStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCgeruStridedBatched_full_rank = hipblasCgeruStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCgeruStridedBatched_rank_0(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeruStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCgeruStridedBatched_rank_0 = hipblasCgeruStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCgeruStridedBatched_rank_1(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeruStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCgeruStridedBatched_rank_1 = hipblasCgeruStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCgercStridedBatched_full_rank(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgercStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCgercStridedBatched_full_rank = hipblasCgercStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCgercStridedBatched_rank_0(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgercStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCgercStridedBatched_rank_0 = hipblasCgercStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCgercStridedBatched_rank_1(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgercStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCgercStridedBatched_rank_1 = hipblasCgercStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZgeruStridedBatched_full_rank(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeruStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZgeruStridedBatched_full_rank = hipblasZgeruStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZgeruStridedBatched_rank_0(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeruStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZgeruStridedBatched_rank_0 = hipblasZgeruStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZgeruStridedBatched_rank_1(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeruStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZgeruStridedBatched_rank_1 = hipblasZgeruStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZgercStridedBatched_full_rank(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgercStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZgercStridedBatched_full_rank = hipblasZgercStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZgercStridedBatched_rank_0(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgercStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZgercStridedBatched_rank_0 = hipblasZgercStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZgercStridedBatched_rank_1(handle,m,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgercStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZgercStridedBatched_rank_1 = hipblasZgercStridedBatched_orig(handle,m,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasChbmv_full_rank(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasChbmv_full_rank = hipblasChbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasChbmv_rank_0(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasChbmv_rank_0 = hipblasChbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasChbmv_rank_1(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasChbmv_rank_1 = hipblasChbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZhbmv_full_rank(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZhbmv_full_rank = hipblasZhbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZhbmv_rank_0(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZhbmv_rank_0 = hipblasZhbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZhbmv_rank_1(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZhbmv_rank_1 = hipblasZhbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasChbmvBatched_full_rank(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasChbmvBatched_full_rank = hipblasChbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasChbmvBatched_rank_0(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasChbmvBatched_rank_0 = hipblasChbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasChbmvBatched_rank_1(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasChbmvBatched_rank_1 = hipblasChbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZhbmvBatched_full_rank(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZhbmvBatched_full_rank = hipblasZhbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZhbmvBatched_rank_0(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZhbmvBatched_rank_0 = hipblasZhbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZhbmvBatched_rank_1(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZhbmvBatched_rank_1 = hipblasZhbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasChbmvStridedBatched_full_rank(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasChbmvStridedBatched_full_rank = hipblasChbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasChbmvStridedBatched_rank_0(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasChbmvStridedBatched_rank_0 = hipblasChbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasChbmvStridedBatched_rank_1(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasChbmvStridedBatched_rank_1 = hipblasChbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZhbmvStridedBatched_full_rank(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZhbmvStridedBatched_full_rank = hipblasZhbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZhbmvStridedBatched_rank_0(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZhbmvStridedBatched_rank_0 = hipblasZhbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZhbmvStridedBatched_rank_1(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZhbmvStridedBatched_rank_1 = hipblasZhbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasChemv_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasChemv_full_rank = hipblasChemv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasChemv_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasChemv_rank_0 = hipblasChemv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasChemv_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasChemv_rank_1 = hipblasChemv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZhemv_full_rank(handle,uplo,n,alpha,A,da,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: da
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZhemv_full_rank = hipblasZhemv_orig(handle,uplo,n,alpha,c_loc(A),da,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZhemv_rank_0(handle,uplo,n,alpha,A,da,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: da
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZhemv_rank_0 = hipblasZhemv_orig(handle,uplo,n,alpha,c_loc(A),da,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZhemv_rank_1(handle,uplo,n,alpha,A,da,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: da
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZhemv_rank_1 = hipblasZhemv_orig(handle,uplo,n,alpha,c_loc(A),da,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasChemvBatched_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasChemvBatched_full_rank = hipblasChemvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasChemvBatched_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasChemvBatched_rank_0 = hipblasChemvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasChemvBatched_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasChemvBatched_rank_1 = hipblasChemvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasZhemvBatched_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZhemvBatched_full_rank = hipblasZhemvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasZhemvBatched_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZhemvBatched_rank_0 = hipblasZhemvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasZhemvBatched_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batch_count
      !
      hipblasZhemvBatched_rank_1 = hipblasZhemvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batch_count)
    end function

    function hipblasChemvStridedBatched_full_rank(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasChemvStridedBatched_full_rank = hipblasChemvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasChemvStridedBatched_rank_0(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasChemvStridedBatched_rank_0 = hipblasChemvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasChemvStridedBatched_rank_1(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasChemvStridedBatched_rank_1 = hipblasChemvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasZhemvStridedBatched_full_rank(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasZhemvStridedBatched_full_rank = hipblasZhemvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasZhemvStridedBatched_rank_0(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasZhemvStridedBatched_rank_0 = hipblasZhemvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasZhemvStridedBatched_rank_1(handle,uplo,n,alpha,A,lda,stride_a,x,incx,stride_x,beta,y,incy,stride_y,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stride_y
      integer(c_int),value :: batch_count
      !
      hipblasZhemvStridedBatched_rank_1 = hipblasZhemvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,beta,c_loc(y),incy,stride_y,batch_count)
    end function

    function hipblasCher_full_rank(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasCher_full_rank = hipblasCher_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasCher_rank_0(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasCher_rank_0 = hipblasCher_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasCher_rank_1(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasCher_rank_1 = hipblasCher_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasZher_full_rank(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasZher_full_rank = hipblasZher_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasZher_rank_0(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasZher_rank_0 = hipblasZher_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasZher_rank_1(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasZher_rank_1 = hipblasZher_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasCherBatched_full_rank(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCherBatched_full_rank = hipblasCherBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasCherBatched_rank_0(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCherBatched_rank_0 = hipblasCherBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasCherBatched_rank_1(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCherBatched_rank_1 = hipblasCherBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasZherBatched_full_rank(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZherBatched_full_rank = hipblasZherBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasZherBatched_rank_0(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZherBatched_rank_0 = hipblasZherBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasZherBatched_rank_1(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZherBatched_rank_1 = hipblasZherBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasCherStridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCherStridedBatched_full_rank = hipblasCherStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCherStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCherStridedBatched_rank_0 = hipblasCherStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCherStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCherStridedBatched_rank_1 = hipblasCherStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZherStridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZherStridedBatched_full_rank = hipblasZherStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZherStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZherStridedBatched_rank_0 = hipblasZherStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZherStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZherStridedBatched_rank_1 = hipblasZherStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCher2_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasCher2_full_rank = hipblasCher2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCher2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasCher2_rank_0 = hipblasCher2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCher2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasCher2_rank_1 = hipblasCher2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZher2_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasZher2_full_rank = hipblasZher2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZher2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasZher2_rank_0 = hipblasZher2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZher2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasZher2_rank_1 = hipblasZher2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCher2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCher2Batched_full_rank = hipblasCher2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCher2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCher2Batched_rank_0 = hipblasCher2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCher2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCher2Batched_rank_1 = hipblasCher2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZher2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZher2Batched_full_rank = hipblasZher2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZher2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZher2Batched_rank_0 = hipblasZher2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZher2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZher2Batched_rank_1 = hipblasZher2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCher2StridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2StridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCher2StridedBatched_full_rank = hipblasCher2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCher2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCher2StridedBatched_rank_0 = hipblasCher2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCher2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCher2StridedBatched_rank_1 = hipblasCher2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZher2StridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2StridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZher2StridedBatched_full_rank = hipblasZher2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZher2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZher2StridedBatched_rank_0 = hipblasZher2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZher2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZher2StridedBatched_rank_1 = hipblasZher2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasChpmv_rank_0(handle,uplo,n,alpha,AP,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: AP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasChpmv_rank_0 = hipblasChpmv_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasChpmv_rank_1(handle,uplo,n,alpha,AP,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: AP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasChpmv_rank_1 = hipblasChpmv_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZhpmv_rank_0(handle,uplo,n,alpha,AP,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: AP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZhpmv_rank_0 = hipblasZhpmv_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZhpmv_rank_1(handle,uplo,n,alpha,AP,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: AP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZhpmv_rank_1 = hipblasZhpmv_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasChpmvBatched_full_rank(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: AP
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasChpmvBatched_full_rank = hipblasChpmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasChpmvBatched_rank_0(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: AP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasChpmvBatched_rank_0 = hipblasChpmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasChpmvBatched_rank_1(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr) :: AP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasChpmvBatched_rank_1 = hipblasChpmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZhpmvBatched_full_rank(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: AP
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZhpmvBatched_full_rank = hipblasZhpmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZhpmvBatched_rank_0(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: AP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZhpmvBatched_rank_0 = hipblasZhpmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZhpmvBatched_rank_1(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr) :: AP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZhpmvBatched_rank_1 = hipblasZhpmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasChpmvStridedBatched_rank_0(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasChpmvStridedBatched_rank_0 = hipblasChpmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasChpmvStridedBatched_rank_1(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasChpmvStridedBatched_rank_1 = hipblasChpmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZhpmvStridedBatched_rank_0(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZhpmvStridedBatched_rank_0 = hipblasZhpmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZhpmvStridedBatched_rank_1(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZhpmvStridedBatched_rank_1 = hipblasZhpmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasChpr_rank_0(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasChpr_rank_0 = hipblasChpr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasChpr_rank_1(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasChpr_rank_1 = hipblasChpr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasZhpr_rank_0(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasZhpr_rank_0 = hipblasZhpr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasZhpr_rank_1(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasZhpr_rank_1 = hipblasZhpr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasChprBatched_full_rank(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChprBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasChprBatched_full_rank = hipblasChprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasChprBatched_rank_0(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChprBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasChprBatched_rank_0 = hipblasChprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasChprBatched_rank_1(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChprBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasChprBatched_rank_1 = hipblasChprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasZhprBatched_full_rank(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhprBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZhprBatched_full_rank = hipblasZhprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasZhprBatched_rank_0(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhprBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZhprBatched_rank_0 = hipblasZhprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasZhprBatched_rank_1(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhprBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZhprBatched_rank_1 = hipblasZhprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasChprStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChprStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasChprStridedBatched_rank_0 = hipblasChprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasChprStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChprStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasChprStridedBatched_rank_1 = hipblasChprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasZhprStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhprStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasZhprStridedBatched_rank_0 = hipblasZhprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasZhprStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhprStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasZhprStridedBatched_rank_1 = hipblasZhprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasChpr2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
      !
      hipblasChpr2_rank_0 = hipblasChpr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP)
    end function

    function hipblasChpr2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
      !
      hipblasChpr2_rank_1 = hipblasChpr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP)
    end function

    function hipblasZhpr2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
      !
      hipblasZhpr2_rank_0 = hipblasZhpr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP)
    end function

    function hipblasZhpr2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
      !
      hipblasZhpr2_rank_1 = hipblasZhpr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP)
    end function

    function hipblasChpr2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasChpr2Batched_full_rank = hipblasChpr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasChpr2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasChpr2Batched_rank_0 = hipblasChpr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasChpr2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasChpr2Batched_rank_1 = hipblasChpr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasZhpr2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZhpr2Batched_full_rank = hipblasZhpr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasZhpr2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZhpr2Batched_rank_0 = hipblasZhpr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasZhpr2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZhpr2Batched_rank_1 = hipblasZhpr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasChpr2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasChpr2StridedBatched_rank_0 = hipblasChpr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,AP,strideAP,batchCount)
    end function

    function hipblasChpr2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChpr2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasChpr2StridedBatched_rank_1 = hipblasChpr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,AP,strideAP,batchCount)
    end function

    function hipblasZhpr2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasZhpr2StridedBatched_rank_0 = hipblasZhpr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,AP,strideAP,batchCount)
    end function

    function hipblasZhpr2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhpr2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasZhpr2StridedBatched_rank_1 = hipblasZhpr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,AP,strideAP,batchCount)
    end function

    function hipblasSsbmv_full_rank(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSsbmv_full_rank = hipblasSsbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSsbmv_rank_0(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      !
      hipblasSsbmv_rank_0 = hipblasSsbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSsbmv_rank_1(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSsbmv_rank_1 = hipblasSsbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDsbmv_full_rank(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDsbmv_full_rank = hipblasDsbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDsbmv_rank_0(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      !
      hipblasDsbmv_rank_0 = hipblasDsbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDsbmv_rank_1(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDsbmv_rank_1 = hipblasDsbmv_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSsbmvBatched_full_rank(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSsbmvBatched_full_rank = hipblasSsbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSsbmvBatched_rank_0(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSsbmvBatched_rank_0 = hipblasSsbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSsbmvBatched_rank_1(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSsbmvBatched_rank_1 = hipblasSsbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDsbmvBatched_full_rank(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDsbmvBatched_full_rank = hipblasDsbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDsbmvBatched_rank_0(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDsbmvBatched_rank_0 = hipblasDsbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDsbmvBatched_rank_1(handle,uplo,n,k,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDsbmvBatched_rank_1 = hipblasDsbmvBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSsbmvStridedBatched_full_rank(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsbmvStridedBatched_full_rank = hipblasSsbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSsbmvStridedBatched_rank_0(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsbmvStridedBatched_rank_0 = hipblasSsbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSsbmvStridedBatched_rank_1(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsbmvStridedBatched_rank_1 = hipblasSsbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDsbmvStridedBatched_full_rank(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsbmvStridedBatched_full_rank = hipblasDsbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDsbmvStridedBatched_rank_0(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsbmvStridedBatched_rank_0 = hipblasDsbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDsbmvStridedBatched_rank_1(handle,uplo,n,k,alpha,A,lda,strideA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsbmvStridedBatched_rank_1 = hipblasDsbmvStridedBatched_orig(handle,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSspmv_rank_0(handle,uplo,n,alpha,AP,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: AP
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      !
      hipblasSspmv_rank_0 = hipblasSspmv_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSspmv_rank_1(handle,uplo,n,alpha,AP,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: AP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSspmv_rank_1 = hipblasSspmv_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDspmv_rank_0(handle,uplo,n,alpha,AP,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: AP
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      !
      hipblasDspmv_rank_0 = hipblasDspmv_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDspmv_rank_1(handle,uplo,n,alpha,AP,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: AP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDspmv_rank_1 = hipblasDspmv_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSspmvBatched_full_rank(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: AP
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSspmvBatched_full_rank = hipblasSspmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSspmvBatched_rank_0(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: AP
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSspmvBatched_rank_0 = hipblasSspmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSspmvBatched_rank_1(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr) :: AP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSspmvBatched_rank_1 = hipblasSspmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDspmvBatched_full_rank(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: AP
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDspmvBatched_full_rank = hipblasDspmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDspmvBatched_rank_0(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: AP
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDspmvBatched_rank_0 = hipblasDspmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDspmvBatched_rank_1(handle,uplo,n,alpha,AP,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr) :: AP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDspmvBatched_rank_1 = hipblasDspmvBatched_orig(handle,uplo,n,alpha,AP,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSspmvStridedBatched_rank_0(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSspmvStridedBatched_rank_0 = hipblasSspmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSspmvStridedBatched_rank_1(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSspmvStridedBatched_rank_1 = hipblasSspmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDspmvStridedBatched_rank_0(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDspmvStridedBatched_rank_0 = hipblasDspmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDspmvStridedBatched_rank_1(handle,uplo,n,alpha,AP,strideAP,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDspmvStridedBatched_rank_1 = hipblasDspmvStridedBatched_orig(handle,uplo,n,alpha,AP,strideAP,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSspr_rank_0(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasSspr_rank_0 = hipblasSspr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasSspr_rank_1(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasSspr_rank_1 = hipblasSspr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasDspr_rank_0(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasDspr_rank_0 = hipblasDspr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasDspr_rank_1(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasDspr_rank_1 = hipblasDspr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasCspr_rank_0(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCspr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasCspr_rank_0 = hipblasCspr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasCspr_rank_1(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCspr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasCspr_rank_1 = hipblasCspr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasZspr_rank_0(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZspr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasZspr_rank_0 = hipblasZspr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasZspr_rank_1(handle,uplo,n,alpha,x,incx,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZspr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr),value :: AP
      !
      hipblasZspr_rank_1 = hipblasZspr_orig(handle,uplo,n,alpha,c_loc(x),incx,AP)
    end function

    function hipblasSsprBatched_full_rank(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsprBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasSsprBatched_full_rank = hipblasSsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasSsprBatched_rank_0(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsprBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasSsprBatched_rank_0 = hipblasSsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasSsprBatched_rank_1(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsprBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasSsprBatched_rank_1 = hipblasSsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasDsprBatched_full_rank(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsprBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasDsprBatched_full_rank = hipblasDsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasDsprBatched_rank_0(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsprBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasDsprBatched_rank_0 = hipblasDsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasDsprBatched_rank_1(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsprBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasDsprBatched_rank_1 = hipblasDsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasCsprBatched_full_rank(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsprBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasCsprBatched_full_rank = hipblasCsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasCsprBatched_rank_0(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsprBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasCsprBatched_rank_0 = hipblasCsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasCsprBatched_rank_1(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsprBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasCsprBatched_rank_1 = hipblasCsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasZsprBatched_full_rank(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsprBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZsprBatched_full_rank = hipblasZsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasZsprBatched_rank_0(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsprBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZsprBatched_rank_0 = hipblasZsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasZsprBatched_rank_1(handle,uplo,n,alpha,x,incx,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsprBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasZsprBatched_rank_1 = hipblasZsprBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,AP,batchCount)
    end function

    function hipblasSsprStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsprStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasSsprStridedBatched_rank_0 = hipblasSsprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasSsprStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsprStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasSsprStridedBatched_rank_1 = hipblasSsprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasDsprStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsprStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasDsprStridedBatched_rank_0 = hipblasDsprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasDsprStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsprStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasDsprStridedBatched_rank_1 = hipblasDsprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasCsprStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsprStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasCsprStridedBatched_rank_0 = hipblasCsprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasCsprStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsprStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasCsprStridedBatched_rank_1 = hipblasCsprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasZsprStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsprStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasZsprStridedBatched_rank_0 = hipblasZsprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasZsprStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsprStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasZsprStridedBatched_rank_1 = hipblasZsprStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,AP,strideAP,batchCount)
    end function

    function hipblasSspr2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
      !
      hipblasSspr2_rank_0 = hipblasSspr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP)
    end function

    function hipblasSspr2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
      !
      hipblasSspr2_rank_1 = hipblasSspr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP)
    end function

    function hipblasDspr2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
      !
      hipblasDspr2_rank_0 = hipblasDspr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP)
    end function

    function hipblasDspr2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,AP)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr),value :: AP
      !
      hipblasDspr2_rank_1 = hipblasDspr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP)
    end function

    function hipblasSspr2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasSspr2Batched_full_rank = hipblasSspr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasSspr2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasSspr2Batched_rank_0 = hipblasSspr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasSspr2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasSspr2Batched_rank_1 = hipblasSspr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasDspr2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasDspr2Batched_full_rank = hipblasDspr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasDspr2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasDspr2Batched_rank_0 = hipblasDspr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasDspr2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,AP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      type(c_ptr) :: AP
      integer(c_int),value :: batchCount
      !
      hipblasDspr2Batched_rank_1 = hipblasDspr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,AP,batchCount)
    end function

    function hipblasSspr2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasSspr2StridedBatched_rank_0 = hipblasSspr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,AP,strideAP,batchCount)
    end function

    function hipblasSspr2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSspr2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasSspr2StridedBatched_rank_1 = hipblasSspr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,AP,strideAP,batchCount)
    end function

    function hipblasDspr2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasDspr2StridedBatched_rank_0 = hipblasDspr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,AP,strideAP,batchCount)
    end function

    function hipblasDspr2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,AP,strideAP,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDspr2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      integer(c_int),value :: batchCount
      !
      hipblasDspr2StridedBatched_rank_1 = hipblasDspr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,AP,strideAP,batchCount)
    end function

    function hipblasSsymv_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSsymv_full_rank = hipblasSsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSsymv_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      !
      hipblasSsymv_rank_0 = hipblasSsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSsymv_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasSsymv_rank_1 = hipblasSsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDsymv_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDsymv_full_rank = hipblasDsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDsymv_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      !
      hipblasDsymv_rank_0 = hipblasDsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasDsymv_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasDsymv_rank_1 = hipblasDsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCsymv_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCsymv_full_rank = hipblasCsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCsymv_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasCsymv_rank_0 = hipblasCsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasCsymv_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasCsymv_rank_1 = hipblasCsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZsymv_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZsymv_full_rank = hipblasZsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZsymv_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      !
      hipblasZsymv_rank_0 = hipblasZsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasZsymv_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      !
      hipblasZsymv_rank_1 = hipblasZsymv_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy)
    end function

    function hipblasSsymvBatched_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSsymvBatched_full_rank = hipblasSsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSsymvBatched_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSsymvBatched_rank_0 = hipblasSsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSsymvBatched_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasSsymvBatched_rank_1 = hipblasSsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDsymvBatched_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDsymvBatched_full_rank = hipblasDsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDsymvBatched_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDsymvBatched_rank_0 = hipblasDsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasDsymvBatched_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasDsymvBatched_rank_1 = hipblasDsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasCsymvBatched_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCsymvBatched_full_rank = hipblasCsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasCsymvBatched_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCsymvBatched_rank_0 = hipblasCsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasCsymvBatched_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasCsymvBatched_rank_1 = hipblasCsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZsymvBatched_full_rank(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZsymvBatched_full_rank = hipblasZsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZsymvBatched_rank_0(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZsymvBatched_rank_0 = hipblasZsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasZsymvBatched_rank_1(handle,uplo,n,alpha,A,lda,x,incx,beta,y,incy,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: batchCount
      !
      hipblasZsymvBatched_rank_1 = hipblasZsymvBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,c_loc(x),incx,beta,c_loc(y),incy,batchCount)
    end function

    function hipblasSsymvStridedBatched_full_rank(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsymvStridedBatched_full_rank = hipblasSsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSsymvStridedBatched_rank_0(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsymvStridedBatched_rank_0 = hipblasSsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSsymvStridedBatched_rank_1(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsymvStridedBatched_rank_1 = hipblasSsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDsymvStridedBatched_full_rank(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsymvStridedBatched_full_rank = hipblasDsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDsymvStridedBatched_rank_0(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsymvStridedBatched_rank_0 = hipblasDsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasDsymvStridedBatched_rank_1(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsymvStridedBatched_rank_1 = hipblasDsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCsymvStridedBatched_full_rank(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCsymvStridedBatched_full_rank = hipblasCsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCsymvStridedBatched_rank_0(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCsymvStridedBatched_rank_0 = hipblasCsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasCsymvStridedBatched_rank_1(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCsymvStridedBatched_rank_1 = hipblasCsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZsymvStridedBatched_full_rank(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZsymvStridedBatched_full_rank = hipblasZsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZsymvStridedBatched_rank_0(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZsymvStridedBatched_rank_0 = hipblasZsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasZsymvStridedBatched_rank_1(handle,uplo,n,alpha,A,lda,stirdeA,x,incx,stridex,beta,y,incy,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stirdeA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZsymvStridedBatched_rank_1 = hipblasZsymvStridedBatched_orig(handle,uplo,n,alpha,c_loc(A),lda,stirdeA,c_loc(x),incx,stridex,beta,c_loc(y),incy,stridey,batchCount)
    end function

    function hipblasSsyr_full_rank(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasSsyr_full_rank = hipblasSsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasSsyr_rank_0(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: A
      integer(c_int),value :: lda
      !
      hipblasSsyr_rank_0 = hipblasSsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasSsyr_rank_1(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasSsyr_rank_1 = hipblasSsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasDsyr_full_rank(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasDsyr_full_rank = hipblasDsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasDsyr_rank_0(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: A
      integer(c_int),value :: lda
      !
      hipblasDsyr_rank_0 = hipblasDsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasDsyr_rank_1(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasDsyr_rank_1 = hipblasDsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasCsyr_full_rank(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasCsyr_full_rank = hipblasCsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasCsyr_rank_0(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasCsyr_rank_0 = hipblasCsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasCsyr_rank_1(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasCsyr_rank_1 = hipblasCsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasZsyr_full_rank(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasZsyr_full_rank = hipblasZsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasZsyr_rank_0(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasZsyr_rank_0 = hipblasZsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasZsyr_rank_1(handle,uplo,n,alpha,x,incx,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasZsyr_rank_1 = hipblasZsyr_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda)
    end function

    function hipblasSsyrBatched_full_rank(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSsyrBatched_full_rank = hipblasSsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasSsyrBatched_rank_0(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSsyrBatched_rank_0 = hipblasSsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasSsyrBatched_rank_1(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSsyrBatched_rank_1 = hipblasSsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasDsyrBatched_full_rank(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDsyrBatched_full_rank = hipblasDsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasDsyrBatched_rank_0(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDsyrBatched_rank_0 = hipblasDsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasDsyrBatched_rank_1(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDsyrBatched_rank_1 = hipblasDsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasCsyrBatched_full_rank(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCsyrBatched_full_rank = hipblasCsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasCsyrBatched_rank_0(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCsyrBatched_rank_0 = hipblasCsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasCsyrBatched_rank_1(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCsyrBatched_rank_1 = hipblasCsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasZsyrBatched_full_rank(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZsyrBatched_full_rank = hipblasZsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasZsyrBatched_rank_0(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZsyrBatched_rank_0 = hipblasZsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasZsyrBatched_rank_1(handle,uplo,n,alpha,x,incx,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZsyrBatched_rank_1 = hipblasZsyrBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(A),lda,batchCount)
    end function

    function hipblasSsyrStridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsyrStridedBatched_full_rank = hipblasSsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasSsyrStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsyrStridedBatched_rank_0 = hipblasSsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasSsyrStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasSsyrStridedBatched_rank_1 = hipblasSsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasDsyrStridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsyrStridedBatched_full_rank = hipblasDsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasDsyrStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsyrStridedBatched_rank_0 = hipblasDsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasDsyrStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasDsyrStridedBatched_rank_1 = hipblasDsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasCsyrStridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCsyrStridedBatched_full_rank = hipblasCsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasCsyrStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCsyrStridedBatched_rank_0 = hipblasCsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasCsyrStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasCsyrStridedBatched_rank_1 = hipblasCsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasZsyrStridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZsyrStridedBatched_full_rank = hipblasZsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasZsyrStridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZsyrStridedBatched_rank_0 = hipblasZsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasZsyrStridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,A,lda,stridey,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stridey
      integer(c_int),value :: batchCount
      !
      hipblasZsyrStridedBatched_rank_1 = hipblasZsyrStridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(A),lda,stridey,batchCount)
    end function

    function hipblasSsyr2_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasSsyr2_full_rank = hipblasSsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasSsyr2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      real(c_float),target :: A
      integer(c_int),value :: lda
      !
      hipblasSsyr2_rank_0 = hipblasSsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasSsyr2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasSsyr2_rank_1 = hipblasSsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasDsyr2_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasDsyr2_full_rank = hipblasDsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasDsyr2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      real(c_double),target :: A
      integer(c_int),value :: lda
      !
      hipblasDsyr2_rank_0 = hipblasDsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasDsyr2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasDsyr2_rank_1 = hipblasDsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCsyr2_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasCsyr2_full_rank = hipblasCsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCsyr2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasCsyr2_rank_0 = hipblasCsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasCsyr2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasCsyr2_rank_1 = hipblasCsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZsyr2_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      !
      hipblasZsyr2_full_rank = hipblasZsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZsyr2_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      !
      hipblasZsyr2_rank_0 = hipblasZsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasZsyr2_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      !
      hipblasZsyr2_rank_1 = hipblasZsyr2_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda)
    end function

    function hipblasSsyr2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2Batched_full_rank = hipblasSsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasSsyr2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: y
      integer(c_int),value :: incy
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2Batched_rank_0 = hipblasSsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasSsyr2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2Batched_rank_1 = hipblasSsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasDsyr2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2Batched_full_rank = hipblasDsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasDsyr2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: y
      integer(c_int),value :: incy
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2Batched_rank_0 = hipblasDsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasDsyr2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2Batched_rank_1 = hipblasDsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCsyr2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2Batched_full_rank = hipblasCsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCsyr2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2Batched_rank_0 = hipblasCsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasCsyr2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2Batched_rank_1 = hipblasCsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZsyr2Batched_full_rank(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2Batched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2Batched_full_rank = hipblasZsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZsyr2Batched_rank_0(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2Batched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2Batched_rank_0 = hipblasZsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasZsyr2Batched_rank_1(handle,uplo,n,alpha,x,incx,y,incy,A,lda,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2Batched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2Batched_rank_1 = hipblasZsyr2Batched_orig(handle,uplo,n,alpha,c_loc(x),incx,c_loc(y),incy,c_loc(A),lda,batchCount)
    end function

    function hipblasSsyr2StridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2StridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2StridedBatched_full_rank = hipblasSsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasSsyr2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2StridedBatched_rank_0 = hipblasSsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasSsyr2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_float),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2StridedBatched_rank_1 = hipblasSsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasDsyr2StridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2StridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2StridedBatched_full_rank = hipblasDsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasDsyr2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2StridedBatched_rank_0 = hipblasDsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasDsyr2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      real(c_double),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2StridedBatched_rank_1 = hipblasDsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCsyr2StridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2StridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2StridedBatched_full_rank = hipblasCsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCsyr2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2StridedBatched_rank_0 = hipblasCsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasCsyr2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_float_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2StridedBatched_rank_1 = hipblasCsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZsyr2StridedBatched_full_rank(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2StridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2StridedBatched_full_rank = hipblasZsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZsyr2StridedBatched_rank_0(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2StridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2StridedBatched_rank_0 = hipblasZsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasZsyr2StridedBatched_rank_1(handle,uplo,n,alpha,x,incx,stridex,y,incy,stridey,A,lda,strideA,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2StridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      complex(c_double_complex),target,dimension(:) :: y
      integer(c_int),value :: incy
      integer(c_int),value :: stridey
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2StridedBatched_rank_1 = hipblasZsyr2StridedBatched_orig(handle,uplo,n,alpha,c_loc(x),incx,stridex,c_loc(y),incy,stridey,c_loc(A),lda,strideA,batchCount)
    end function

    function hipblasStbmv_full_rank(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStbmv_full_rank = hipblasStbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStbmv_rank_0(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      !
      hipblasStbmv_rank_0 = hipblasStbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStbmv_rank_1(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStbmv_rank_1 = hipblasStbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtbmv_full_rank(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtbmv_full_rank = hipblasDtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtbmv_rank_0(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      !
      hipblasDtbmv_rank_0 = hipblasDtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtbmv_rank_1(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtbmv_rank_1 = hipblasDtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtbmv_full_rank(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtbmv_full_rank = hipblasCtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtbmv_rank_0(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasCtbmv_rank_0 = hipblasCtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtbmv_rank_1(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtbmv_rank_1 = hipblasCtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtbmv_full_rank(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtbmv_full_rank = hipblasZtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtbmv_rank_0(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasZtbmv_rank_0 = hipblasZtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtbmv_rank_1(handle,uplo,transA,diag,m,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtbmv_rank_1 = hipblasZtbmv_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStbmvBatched_full_rank(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStbmvBatched_full_rank = hipblasStbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStbmvBatched_rank_0(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStbmvBatched_rank_0 = hipblasStbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStbmvBatched_rank_1(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStbmvBatched_rank_1 = hipblasStbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtbmvBatched_full_rank(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtbmvBatched_full_rank = hipblasDtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtbmvBatched_rank_0(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtbmvBatched_rank_0 = hipblasDtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtbmvBatched_rank_1(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtbmvBatched_rank_1 = hipblasDtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtbmvBatched_full_rank(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtbmvBatched_full_rank = hipblasCtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtbmvBatched_rank_0(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtbmvBatched_rank_0 = hipblasCtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtbmvBatched_rank_1(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtbmvBatched_rank_1 = hipblasCtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtbmvBatched_full_rank(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtbmvBatched_full_rank = hipblasZtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtbmvBatched_rank_0(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtbmvBatched_rank_0 = hipblasZtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtbmvBatched_rank_1(handle,uplo,transA,diag,m,k,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtbmvBatched_rank_1 = hipblasZtbmvBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStbmvStridedBatched_full_rank(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasStbmvStridedBatched_full_rank = hipblasStbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasStbmvStridedBatched_rank_0(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasStbmvStridedBatched_rank_0 = hipblasStbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasStbmvStridedBatched_rank_1(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasStbmvStridedBatched_rank_1 = hipblasStbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasDtbmvStridedBatched_full_rank(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasDtbmvStridedBatched_full_rank = hipblasDtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasDtbmvStridedBatched_rank_0(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasDtbmvStridedBatched_rank_0 = hipblasDtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasDtbmvStridedBatched_rank_1(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasDtbmvStridedBatched_rank_1 = hipblasDtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasCtbmvStridedBatched_full_rank(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasCtbmvStridedBatched_full_rank = hipblasCtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasCtbmvStridedBatched_rank_0(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasCtbmvStridedBatched_rank_0 = hipblasCtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasCtbmvStridedBatched_rank_1(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasCtbmvStridedBatched_rank_1 = hipblasCtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasZtbmvStridedBatched_full_rank(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasZtbmvStridedBatched_full_rank = hipblasZtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasZtbmvStridedBatched_rank_0(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasZtbmvStridedBatched_rank_0 = hipblasZtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasZtbmvStridedBatched_rank_1(handle,uplo,transA,diag,m,k,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasZtbmvStridedBatched_rank_1 = hipblasZtbmvStridedBatched_orig(handle,uplo,transA,diag,m,k,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasStbsv_full_rank(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStbsv_full_rank = hipblasStbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStbsv_rank_0(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      !
      hipblasStbsv_rank_0 = hipblasStbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStbsv_rank_1(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStbsv_rank_1 = hipblasStbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtbsv_full_rank(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtbsv_full_rank = hipblasDtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtbsv_rank_0(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      !
      hipblasDtbsv_rank_0 = hipblasDtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtbsv_rank_1(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtbsv_rank_1 = hipblasDtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtbsv_full_rank(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtbsv_full_rank = hipblasCtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtbsv_rank_0(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasCtbsv_rank_0 = hipblasCtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtbsv_rank_1(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtbsv_rank_1 = hipblasCtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtbsv_full_rank(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtbsv_full_rank = hipblasZtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtbsv_rank_0(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasZtbsv_rank_0 = hipblasZtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtbsv_rank_1(handle,uplo,transA,diag,n,k,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtbsv_rank_1 = hipblasZtbsv_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStbsvBatched_full_rank(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStbsvBatched_full_rank = hipblasStbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasStbsvBatched_rank_0(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStbsvBatched_rank_0 = hipblasStbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasStbsvBatched_rank_1(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStbsvBatched_rank_1 = hipblasStbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasDtbsvBatched_full_rank(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtbsvBatched_full_rank = hipblasDtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasDtbsvBatched_rank_0(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtbsvBatched_rank_0 = hipblasDtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasDtbsvBatched_rank_1(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtbsvBatched_rank_1 = hipblasDtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasCtbsvBatched_full_rank(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtbsvBatched_full_rank = hipblasCtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasCtbsvBatched_rank_0(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtbsvBatched_rank_0 = hipblasCtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasCtbsvBatched_rank_1(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtbsvBatched_rank_1 = hipblasCtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasZtbsvBatched_full_rank(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtbsvBatched_full_rank = hipblasZtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasZtbsvBatched_rank_0(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtbsvBatched_rank_0 = hipblasZtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasZtbsvBatched_rank_1(handle,uplo,transA,diag,n,k,A,lda,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtbsvBatched_rank_1 = hipblasZtbsvBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,c_loc(x),incx,batchCount)
    end function

    function hipblasStbsvStridedBatched_full_rank(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasStbsvStridedBatched_full_rank = hipblasStbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasStbsvStridedBatched_rank_0(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasStbsvStridedBatched_rank_0 = hipblasStbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasStbsvStridedBatched_rank_1(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStbsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasStbsvStridedBatched_rank_1 = hipblasStbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasDtbsvStridedBatched_full_rank(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasDtbsvStridedBatched_full_rank = hipblasDtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasDtbsvStridedBatched_rank_0(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasDtbsvStridedBatched_rank_0 = hipblasDtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasDtbsvStridedBatched_rank_1(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtbsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasDtbsvStridedBatched_rank_1 = hipblasDtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCtbsvStridedBatched_full_rank(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCtbsvStridedBatched_full_rank = hipblasCtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCtbsvStridedBatched_rank_0(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCtbsvStridedBatched_rank_0 = hipblasCtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCtbsvStridedBatched_rank_1(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtbsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCtbsvStridedBatched_rank_1 = hipblasCtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZtbsvStridedBatched_full_rank(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZtbsvStridedBatched_full_rank = hipblasZtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZtbsvStridedBatched_rank_0(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZtbsvStridedBatched_rank_0 = hipblasZtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZtbsvStridedBatched_rank_1(handle,uplo,transA,diag,n,k,A,lda,strideA,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtbsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZtbsvStridedBatched_rank_1 = hipblasZtbsvStridedBatched_orig(handle,uplo,transA,diag,n,k,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasStpmv_rank_0(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      real(c_float),target :: x
      integer(c_int),value :: incx
      !
      hipblasStpmv_rank_0 = hipblasStpmv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasStpmv_rank_1(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStpmv_rank_1 = hipblasStpmv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasDtpmv_rank_0(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      real(c_double),target :: x
      integer(c_int),value :: incx
      !
      hipblasDtpmv_rank_0 = hipblasDtpmv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasDtpmv_rank_1(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtpmv_rank_1 = hipblasDtpmv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasCtpmv_rank_0(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasCtpmv_rank_0 = hipblasCtpmv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasCtpmv_rank_1(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtpmv_rank_1 = hipblasCtpmv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasZtpmv_rank_0(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasZtpmv_rank_0 = hipblasZtpmv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasZtpmv_rank_1(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtpmv_rank_1 = hipblasZtpmv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasStpmvBatched_full_rank(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStpmvBatched_full_rank = hipblasStpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasStpmvBatched_rank_0(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStpmvBatched_rank_0 = hipblasStpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasStpmvBatched_rank_1(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStpmvBatched_rank_1 = hipblasStpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasDtpmvBatched_full_rank(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtpmvBatched_full_rank = hipblasDtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasDtpmvBatched_rank_0(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtpmvBatched_rank_0 = hipblasDtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasDtpmvBatched_rank_1(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtpmvBatched_rank_1 = hipblasDtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasCtpmvBatched_full_rank(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtpmvBatched_full_rank = hipblasCtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasCtpmvBatched_rank_0(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtpmvBatched_rank_0 = hipblasCtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasCtpmvBatched_rank_1(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtpmvBatched_rank_1 = hipblasCtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasZtpmvBatched_full_rank(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtpmvBatched_full_rank = hipblasZtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasZtpmvBatched_rank_0(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtpmvBatched_rank_0 = hipblasZtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasZtpmvBatched_rank_1(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtpmvBatched_rank_1 = hipblasZtpmvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasStpmvStridedBatched_rank_0(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
      !
      hipblasStpmvStridedBatched_rank_0 = hipblasStpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stride,batchCount)
    end function

    function hipblasStpmvStridedBatched_rank_1(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
      !
      hipblasStpmvStridedBatched_rank_1 = hipblasStpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stride,batchCount)
    end function

    function hipblasDtpmvStridedBatched_rank_0(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
      !
      hipblasDtpmvStridedBatched_rank_0 = hipblasDtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stride,batchCount)
    end function

    function hipblasDtpmvStridedBatched_rank_1(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
      !
      hipblasDtpmvStridedBatched_rank_1 = hipblasDtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stride,batchCount)
    end function

    function hipblasCtpmvStridedBatched_rank_0(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
      !
      hipblasCtpmvStridedBatched_rank_0 = hipblasCtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stride,batchCount)
    end function

    function hipblasCtpmvStridedBatched_rank_1(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
      !
      hipblasCtpmvStridedBatched_rank_1 = hipblasCtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stride,batchCount)
    end function

    function hipblasZtpmvStridedBatched_rank_0(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
      !
      hipblasZtpmvStridedBatched_rank_0 = hipblasZtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stride,batchCount)
    end function

    function hipblasZtpmvStridedBatched_rank_1(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stride,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride
      integer(c_int),value :: batchCount
      !
      hipblasZtpmvStridedBatched_rank_1 = hipblasZtpmvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stride,batchCount)
    end function

    function hipblasStpsv_rank_0(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      real(c_float),target :: x
      integer(c_int),value :: incx
      !
      hipblasStpsv_rank_0 = hipblasStpsv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasStpsv_rank_1(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStpsv_rank_1 = hipblasStpsv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasDtpsv_rank_0(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      real(c_double),target :: x
      integer(c_int),value :: incx
      !
      hipblasDtpsv_rank_0 = hipblasDtpsv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasDtpsv_rank_1(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtpsv_rank_1 = hipblasDtpsv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasCtpsv_rank_0(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasCtpsv_rank_0 = hipblasCtpsv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasCtpsv_rank_1(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtpsv_rank_1 = hipblasCtpsv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasZtpsv_rank_0(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasZtpsv_rank_0 = hipblasZtpsv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasZtpsv_rank_1(handle,uplo,transA,diag,m,AP,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtpsv_rank_1 = hipblasZtpsv_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx)
    end function

    function hipblasStpsvBatched_full_rank(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStpsvBatched_full_rank = hipblasStpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasStpsvBatched_rank_0(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStpsvBatched_rank_0 = hipblasStpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasStpsvBatched_rank_1(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasStpsvBatched_rank_1 = hipblasStpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasDtpsvBatched_full_rank(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtpsvBatched_full_rank = hipblasDtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasDtpsvBatched_rank_0(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtpsvBatched_rank_0 = hipblasDtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasDtpsvBatched_rank_1(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasDtpsvBatched_rank_1 = hipblasDtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasCtpsvBatched_full_rank(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtpsvBatched_full_rank = hipblasCtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasCtpsvBatched_rank_0(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtpsvBatched_rank_0 = hipblasCtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasCtpsvBatched_rank_1(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasCtpsvBatched_rank_1 = hipblasCtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasZtpsvBatched_full_rank(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtpsvBatched_full_rank = hipblasZtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasZtpsvBatched_rank_0(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtpsvBatched_rank_0 = hipblasZtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasZtpsvBatched_rank_1(handle,uplo,transA,diag,m,AP,x,incx,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr) :: AP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batchCount
      !
      hipblasZtpsvBatched_rank_1 = hipblasZtpsvBatched_orig(handle,uplo,transA,diag,m,AP,c_loc(x),incx,batchCount)
    end function

    function hipblasStpsvStridedBatched_rank_0(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasStpsvStridedBatched_rank_0 = hipblasStpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasStpsvStridedBatched_rank_1(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStpsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasStpsvStridedBatched_rank_1 = hipblasStpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasDtpsvStridedBatched_rank_0(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasDtpsvStridedBatched_rank_0 = hipblasDtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasDtpsvStridedBatched_rank_1(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtpsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasDtpsvStridedBatched_rank_1 = hipblasDtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCtpsvStridedBatched_rank_0(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCtpsvStridedBatched_rank_0 = hipblasCtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasCtpsvStridedBatched_rank_1(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtpsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasCtpsvStridedBatched_rank_1 = hipblasCtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZtpsvStridedBatched_rank_0(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZtpsvStridedBatched_rank_0 = hipblasZtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasZtpsvStridedBatched_rank_1(handle,uplo,transA,diag,m,AP,strideAP,x,incx,stridex,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtpsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      type(c_ptr),value :: AP
      integer(c_int),value :: strideAP
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batchCount
      !
      hipblasZtpsvStridedBatched_rank_1 = hipblasZtpsvStridedBatched_orig(handle,uplo,transA,diag,m,AP,strideAP,c_loc(x),incx,stridex,batchCount)
    end function

    function hipblasStrmv_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStrmv_full_rank = hipblasStrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStrmv_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      !
      hipblasStrmv_rank_0 = hipblasStrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStrmv_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStrmv_rank_1 = hipblasStrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtrmv_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtrmv_full_rank = hipblasDtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtrmv_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      !
      hipblasDtrmv_rank_0 = hipblasDtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtrmv_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtrmv_rank_1 = hipblasDtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtrmv_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtrmv_full_rank = hipblasCtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtrmv_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasCtrmv_rank_0 = hipblasCtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtrmv_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtrmv_rank_1 = hipblasCtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtrmv_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtrmv_full_rank = hipblasZtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtrmv_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasZtrmv_rank_0 = hipblasZtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtrmv_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtrmv_rank_1 = hipblasZtrmv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStrmvBatched_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStrmvBatched_full_rank = hipblasStrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStrmvBatched_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStrmvBatched_rank_0 = hipblasStrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStrmvBatched_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStrmvBatched_rank_1 = hipblasStrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtrmvBatched_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtrmvBatched_full_rank = hipblasDtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtrmvBatched_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtrmvBatched_rank_0 = hipblasDtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtrmvBatched_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtrmvBatched_rank_1 = hipblasDtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtrmvBatched_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtrmvBatched_full_rank = hipblasCtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtrmvBatched_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtrmvBatched_rank_0 = hipblasCtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtrmvBatched_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtrmvBatched_rank_1 = hipblasCtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtrmvBatched_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtrmvBatched_full_rank = hipblasZtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtrmvBatched_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtrmvBatched_rank_0 = hipblasZtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtrmvBatched_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtrmvBatched_rank_1 = hipblasZtrmvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStrmvStridedBatched_full_rank(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasStrmvStridedBatched_full_rank = hipblasStrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasStrmvStridedBatched_rank_0(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasStrmvStridedBatched_rank_0 = hipblasStrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasStrmvStridedBatched_rank_1(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasStrmvStridedBatched_rank_1 = hipblasStrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasDtrmvStridedBatched_full_rank(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasDtrmvStridedBatched_full_rank = hipblasDtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasDtrmvStridedBatched_rank_0(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasDtrmvStridedBatched_rank_0 = hipblasDtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasDtrmvStridedBatched_rank_1(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasDtrmvStridedBatched_rank_1 = hipblasDtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasCtrmvStridedBatched_full_rank(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasCtrmvStridedBatched_full_rank = hipblasCtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasCtrmvStridedBatched_rank_0(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasCtrmvStridedBatched_rank_0 = hipblasCtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasCtrmvStridedBatched_rank_1(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasCtrmvStridedBatched_rank_1 = hipblasCtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasZtrmvStridedBatched_full_rank(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasZtrmvStridedBatched_full_rank = hipblasZtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasZtrmvStridedBatched_rank_0(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasZtrmvStridedBatched_rank_0 = hipblasZtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasZtrmvStridedBatched_rank_1(handle,uplo,transA,diag,m,A,lda,stride_a,x,incx,stride_x,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_a
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      integer(c_int),value :: batch_count
      !
      hipblasZtrmvStridedBatched_rank_1 = hipblasZtrmvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,stride_a,c_loc(x),incx,stride_x,batch_count)
    end function

    function hipblasStrsv_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStrsv_full_rank = hipblasStrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStrsv_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      !
      hipblasStrsv_rank_0 = hipblasStrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStrsv_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasStrsv_rank_1 = hipblasStrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtrsv_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtrsv_full_rank = hipblasDtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtrsv_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      !
      hipblasDtrsv_rank_0 = hipblasDtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasDtrsv_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasDtrsv_rank_1 = hipblasDtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtrsv_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtrsv_full_rank = hipblasCtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtrsv_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasCtrsv_rank_0 = hipblasCtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasCtrsv_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasCtrsv_rank_1 = hipblasCtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtrsv_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsv_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtrsv_full_rank = hipblasZtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtrsv_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsv_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      !
      hipblasZtrsv_rank_0 = hipblasZtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasZtrsv_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsv_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      !
      hipblasZtrsv_rank_1 = hipblasZtrsv_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx)
    end function

    function hipblasStrsvBatched_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStrsvBatched_full_rank = hipblasStrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStrsvBatched_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStrsvBatched_rank_0 = hipblasStrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStrsvBatched_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasStrsvBatched_rank_1 = hipblasStrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtrsvBatched_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtrsvBatched_full_rank = hipblasDtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtrsvBatched_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtrsvBatched_rank_0 = hipblasDtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasDtrsvBatched_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasDtrsvBatched_rank_1 = hipblasDtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtrsvBatched_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtrsvBatched_full_rank = hipblasCtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtrsvBatched_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtrsvBatched_rank_0 = hipblasCtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasCtrsvBatched_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasCtrsvBatched_rank_1 = hipblasCtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtrsvBatched_full_rank(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsvBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtrsvBatched_full_rank = hipblasZtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtrsvBatched_rank_0(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsvBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtrsvBatched_rank_0 = hipblasZtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasZtrsvBatched_rank_1(handle,uplo,transA,diag,m,A,lda,x,incx,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsvBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: batch_count
      !
      hipblasZtrsvBatched_rank_1 = hipblasZtrsvBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,c_loc(x),incx,batch_count)
    end function

    function hipblasStrsvStridedBatched_full_rank(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasStrsvStridedBatched_full_rank = hipblasStrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasStrsvStridedBatched_rank_0(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasStrsvStridedBatched_rank_0 = hipblasStrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasStrsvStridedBatched_rank_1(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasStrsvStridedBatched_rank_1 = hipblasStrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasDtrsvStridedBatched_full_rank(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasDtrsvStridedBatched_full_rank = hipblasDtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasDtrsvStridedBatched_rank_0(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasDtrsvStridedBatched_rank_0 = hipblasDtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasDtrsvStridedBatched_rank_1(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasDtrsvStridedBatched_rank_1 = hipblasDtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasCtrsvStridedBatched_full_rank(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasCtrsvStridedBatched_full_rank = hipblasCtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasCtrsvStridedBatched_rank_0(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasCtrsvStridedBatched_rank_0 = hipblasCtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasCtrsvStridedBatched_rank_1(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasCtrsvStridedBatched_rank_1 = hipblasCtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasZtrsvStridedBatched_full_rank(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsvStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasZtrsvStridedBatched_full_rank = hipblasZtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasZtrsvStridedBatched_rank_0(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsvStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasZtrsvStridedBatched_rank_0 = hipblasZtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasZtrsvStridedBatched_rank_1(handle,uplo,transA,diag,m,A,lda,strideA,x,incx,stridex,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsvStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stridex
      integer(c_int),value :: batch_count
      !
      hipblasZtrsvStridedBatched_rank_1 = hipblasZtrsvStridedBatched_orig(handle,uplo,transA,diag,m,c_loc(A),lda,strideA,c_loc(x),incx,stridex,batch_count)
    end function

    function hipblasCherk_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherk_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCherk_full_rank = hipblasCherk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasCherk_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherk_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCherk_rank_0 = hipblasCherk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasCherk_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherk_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCherk_rank_1 = hipblasCherk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasZherk_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherk_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZherk_full_rank = hipblasZherk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasZherk_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherk_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZherk_rank_0 = hipblasZherk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasZherk_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherk_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZherk_rank_1 = hipblasZherk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasCherkBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCherkBatched_full_rank = hipblasCherkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCherkBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCherkBatched_rank_0 = hipblasCherkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCherkBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCherkBatched_rank_1 = hipblasCherkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZherkBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZherkBatched_full_rank = hipblasZherkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZherkBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZherkBatched_rank_0 = hipblasZherkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZherkBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZherkBatched_rank_1 = hipblasZherkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCherkStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCherkStridedBatched_full_rank = hipblasCherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCherkStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCherkStridedBatched_rank_0 = hipblasCherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCherkStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCherkStridedBatched_rank_1 = hipblasCherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZherkStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZherkStridedBatched_full_rank = hipblasZherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZherkStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZherkStridedBatched_rank_0 = hipblasZherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZherkStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZherkStridedBatched_rank_1 = hipblasZherkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCherkx_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkx_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCherkx_full_rank = hipblasCherkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCherkx_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkx_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCherkx_rank_0 = hipblasCherkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCherkx_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkx_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCherkx_rank_1 = hipblasCherkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZherkx_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkx_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZherkx_full_rank = hipblasZherkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZherkx_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkx_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZherkx_rank_0 = hipblasZherkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZherkx_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkx_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZherkx_rank_1 = hipblasZherkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCherkxBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkxBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCherkxBatched_full_rank = hipblasCherkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCherkxBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkxBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCherkxBatched_rank_0 = hipblasCherkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCherkxBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkxBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCherkxBatched_rank_1 = hipblasCherkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZherkxBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkxBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZherkxBatched_full_rank = hipblasZherkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZherkxBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkxBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZherkxBatched_rank_0 = hipblasZherkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZherkxBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkxBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZherkxBatched_rank_1 = hipblasZherkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCherkxStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkxStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCherkxStridedBatched_full_rank = hipblasCherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCherkxStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCherkxStridedBatched_rank_0 = hipblasCherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCherkxStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCherkxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCherkxStridedBatched_rank_1 = hipblasCherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZherkxStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkxStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZherkxStridedBatched_full_rank = hipblasZherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZherkxStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZherkxStridedBatched_rank_0 = hipblasZherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZherkxStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZherkxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZherkxStridedBatched_rank_1 = hipblasZherkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCher2k_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2k_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCher2k_full_rank = hipblasCher2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCher2k_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2k_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCher2k_rank_0 = hipblasCher2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCher2k_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2k_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCher2k_rank_1 = hipblasCher2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZher2k_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2k_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZher2k_full_rank = hipblasZher2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZher2k_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2k_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZher2k_rank_0 = hipblasZher2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZher2k_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2k_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZher2k_rank_1 = hipblasZher2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCher2kBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2kBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCher2kBatched_full_rank = hipblasCher2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCher2kBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2kBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCher2kBatched_rank_0 = hipblasCher2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCher2kBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2kBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCher2kBatched_rank_1 = hipblasCher2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZher2kBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2kBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZher2kBatched_full_rank = hipblasZher2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZher2kBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2kBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZher2kBatched_rank_0 = hipblasZher2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZher2kBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2kBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZher2kBatched_rank_1 = hipblasZher2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCher2kStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2kStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCher2kStridedBatched_full_rank = hipblasCher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCher2kStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2kStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCher2kStridedBatched_rank_0 = hipblasCher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCher2kStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCher2kStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCher2kStridedBatched_rank_1 = hipblasCher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZher2kStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2kStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZher2kStridedBatched_full_rank = hipblasZher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZher2kStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2kStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZher2kStridedBatched_rank_0 = hipblasZher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZher2kStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZher2kStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZher2kStridedBatched_rank_1 = hipblasZher2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsymm_full_rank(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSsymm_full_rank = hipblasSsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsymm_rank_0(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      !
      hipblasSsymm_rank_0 = hipblasSsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsymm_rank_1(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSsymm_rank_1 = hipblasSsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsymm_full_rank(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDsymm_full_rank = hipblasDsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsymm_rank_0(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      !
      hipblasDsymm_rank_0 = hipblasDsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsymm_rank_1(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDsymm_rank_1 = hipblasDsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsymm_full_rank(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCsymm_full_rank = hipblasCsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsymm_rank_0(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCsymm_rank_0 = hipblasCsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsymm_rank_1(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCsymm_rank_1 = hipblasCsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsymm_full_rank(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZsymm_full_rank = hipblasZsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsymm_rank_0(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZsymm_rank_0 = hipblasZsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsymm_rank_1(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZsymm_rank_1 = hipblasZsymm_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsymmBatched_full_rank(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsymmBatched_full_rank = hipblasSsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsymmBatched_rank_0(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsymmBatched_rank_0 = hipblasSsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsymmBatched_rank_1(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsymmBatched_rank_1 = hipblasSsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsymmBatched_full_rank(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsymmBatched_full_rank = hipblasDsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsymmBatched_rank_0(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsymmBatched_rank_0 = hipblasDsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsymmBatched_rank_1(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsymmBatched_rank_1 = hipblasDsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsymmBatched_full_rank(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsymmBatched_full_rank = hipblasCsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsymmBatched_rank_0(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsymmBatched_rank_0 = hipblasCsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsymmBatched_rank_1(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsymmBatched_rank_1 = hipblasCsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsymmBatched_full_rank(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsymmBatched_full_rank = hipblasZsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsymmBatched_rank_0(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsymmBatched_rank_0 = hipblasZsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsymmBatched_rank_1(handle,side,uplo,m,n,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsymmBatched_rank_1 = hipblasZsymmBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsymmStridedBatched_full_rank(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsymmStridedBatched_full_rank = hipblasSsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsymmStridedBatched_rank_0(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsymmStridedBatched_rank_0 = hipblasSsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsymmStridedBatched_rank_1(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsymmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsymmStridedBatched_rank_1 = hipblasSsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsymmStridedBatched_full_rank(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsymmStridedBatched_full_rank = hipblasDsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsymmStridedBatched_rank_0(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsymmStridedBatched_rank_0 = hipblasDsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsymmStridedBatched_rank_1(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsymmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsymmStridedBatched_rank_1 = hipblasDsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsymmStridedBatched_full_rank(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsymmStridedBatched_full_rank = hipblasCsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsymmStridedBatched_rank_0(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsymmStridedBatched_rank_0 = hipblasCsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsymmStridedBatched_rank_1(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsymmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsymmStridedBatched_rank_1 = hipblasCsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsymmStridedBatched_full_rank(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsymmStridedBatched_full_rank = hipblasZsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsymmStridedBatched_rank_0(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsymmStridedBatched_rank_0 = hipblasZsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsymmStridedBatched_rank_1(handle,side,uplo,m,n,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsymmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsymmStridedBatched_rank_1 = hipblasZsymmStridedBatched_orig(handle,side,uplo,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsyrk_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrk_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyrk_full_rank = hipblasSsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasSsyrk_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrk_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyrk_rank_0 = hipblasSsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasSsyrk_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrk_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyrk_rank_1 = hipblasSsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasDsyrk_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrk_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyrk_full_rank = hipblasDsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasDsyrk_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrk_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyrk_rank_0 = hipblasDsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasDsyrk_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrk_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyrk_rank_1 = hipblasDsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasCsyrk_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrk_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyrk_full_rank = hipblasCsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasCsyrk_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrk_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyrk_rank_0 = hipblasCsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasCsyrk_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrk_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyrk_rank_1 = hipblasCsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasZsyrk_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrk_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyrk_full_rank = hipblasZsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasZsyrk_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrk_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyrk_rank_0 = hipblasZsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasZsyrk_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrk_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyrk_rank_1 = hipblasZsyrk_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc)
    end function

    function hipblasSsyrkBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkBatched_full_rank = hipblasSsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyrkBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkBatched_rank_0 = hipblasSsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyrkBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkBatched_rank_1 = hipblasSsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyrkBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkBatched_full_rank = hipblasDsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyrkBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkBatched_rank_0 = hipblasDsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyrkBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkBatched_rank_1 = hipblasDsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyrkBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkBatched_full_rank = hipblasCsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyrkBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkBatched_rank_0 = hipblasCsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyrkBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkBatched_rank_1 = hipblasCsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyrkBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkBatched_full_rank = hipblasZsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyrkBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkBatched_rank_0 = hipblasZsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyrkBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkBatched_rank_1 = hipblasZsyrkBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyrkStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkStridedBatched_full_rank = hipblasSsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsyrkStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkStridedBatched_rank_0 = hipblasSsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsyrkStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkStridedBatched_rank_1 = hipblasSsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsyrkStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkStridedBatched_full_rank = hipblasDsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsyrkStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkStridedBatched_rank_0 = hipblasDsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsyrkStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkStridedBatched_rank_1 = hipblasDsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsyrkStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkStridedBatched_full_rank = hipblasCsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsyrkStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkStridedBatched_rank_0 = hipblasCsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsyrkStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkStridedBatched_rank_1 = hipblasCsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsyrkStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkStridedBatched_full_rank = hipblasZsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsyrkStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkStridedBatched_rank_0 = hipblasZsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsyrkStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkStridedBatched_rank_1 = hipblasZsyrkStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsyr2k_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2k_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyr2k_full_rank = hipblasSsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsyr2k_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2k_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyr2k_rank_0 = hipblasSsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsyr2k_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2k_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyr2k_rank_1 = hipblasSsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsyr2k_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2k_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyr2k_full_rank = hipblasDsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsyr2k_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2k_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyr2k_rank_0 = hipblasDsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsyr2k_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2k_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyr2k_rank_1 = hipblasDsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsyr2k_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2k_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyr2k_full_rank = hipblasCsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsyr2k_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2k_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyr2k_rank_0 = hipblasCsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsyr2k_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2k_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyr2k_rank_1 = hipblasCsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsyr2k_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2k_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyr2k_full_rank = hipblasZsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsyr2k_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2k_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyr2k_rank_0 = hipblasZsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsyr2k_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2k_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyr2k_rank_1 = hipblasZsyr2k_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsyr2kBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2kBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2kBatched_full_rank = hipblasSsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyr2kBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2kBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2kBatched_rank_0 = hipblasSsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyr2kBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2kBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2kBatched_rank_1 = hipblasSsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyr2kBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2kBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2kBatched_full_rank = hipblasDsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyr2kBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2kBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2kBatched_rank_0 = hipblasDsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyr2kBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2kBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2kBatched_rank_1 = hipblasDsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyr2kBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2kBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2kBatched_full_rank = hipblasCsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyr2kBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2kBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2kBatched_rank_0 = hipblasCsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyr2kBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2kBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2kBatched_rank_1 = hipblasCsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyr2kBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2kBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2kBatched_full_rank = hipblasZsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyr2kBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2kBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2kBatched_rank_0 = hipblasZsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyr2kBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2kBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2kBatched_rank_1 = hipblasZsyr2kBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyr2kStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2kStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2kStridedBatched_full_rank = hipblasSsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsyr2kStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2kStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2kStridedBatched_rank_0 = hipblasSsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsyr2kStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyr2kStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSsyr2kStridedBatched_rank_1 = hipblasSsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsyr2kStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2kStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2kStridedBatched_full_rank = hipblasDsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsyr2kStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2kStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2kStridedBatched_rank_0 = hipblasDsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDsyr2kStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyr2kStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDsyr2kStridedBatched_rank_1 = hipblasDsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsyr2kStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2kStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2kStridedBatched_full_rank = hipblasCsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsyr2kStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2kStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2kStridedBatched_rank_0 = hipblasCsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCsyr2kStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyr2kStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCsyr2kStridedBatched_rank_1 = hipblasCsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsyr2kStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2kStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2kStridedBatched_full_rank = hipblasZsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsyr2kStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2kStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2kStridedBatched_rank_0 = hipblasZsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZsyr2kStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyr2kStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZsyr2kStridedBatched_rank_1 = hipblasZsyr2kStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSsyrkx_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkx_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyrkx_full_rank = hipblasSsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsyrkx_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkx_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyrkx_rank_0 = hipblasSsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsyrkx_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkx_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSsyrkx_rank_1 = hipblasSsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsyrkx_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkx_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyrkx_full_rank = hipblasDsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsyrkx_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkx_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyrkx_rank_0 = hipblasDsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDsyrkx_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkx_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDsyrkx_rank_1 = hipblasDsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsyrkx_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkx_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyrkx_full_rank = hipblasCsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsyrkx_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkx_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyrkx_rank_0 = hipblasCsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCsyrkx_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkx_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCsyrkx_rank_1 = hipblasCsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsyrkx_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkx_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyrkx_full_rank = hipblasZsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsyrkx_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkx_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyrkx_rank_0 = hipblasZsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZsyrkx_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkx_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZsyrkx_rank_1 = hipblasZsyrkx_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSsyrkxBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkxBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkxBatched_full_rank = hipblasSsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyrkxBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkxBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkxBatched_rank_0 = hipblasSsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyrkxBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkxBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkxBatched_rank_1 = hipblasSsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyrkxBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkxBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkxBatched_full_rank = hipblasDsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyrkxBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkxBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkxBatched_rank_0 = hipblasDsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDsyrkxBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkxBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkxBatched_rank_1 = hipblasDsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyrkxBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkxBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkxBatched_full_rank = hipblasCsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyrkxBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkxBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkxBatched_rank_0 = hipblasCsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCsyrkxBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkxBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkxBatched_rank_1 = hipblasCsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyrkxBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkxBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkxBatched_full_rank = hipblasZsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyrkxBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkxBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkxBatched_rank_0 = hipblasZsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZsyrkxBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkxBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkxBatched_rank_1 = hipblasZsyrkxBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSsyrkxStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkxStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkxStridedBatched_full_rank = hipblasSsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasSsyrkxStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkxStridedBatched_rank_0 = hipblasSsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasSsyrkxStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSsyrkxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasSsyrkxStridedBatched_rank_1 = hipblasSsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasDsyrkxStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkxStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkxStridedBatched_full_rank = hipblasDsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasDsyrkxStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkxStridedBatched_rank_0 = hipblasDsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasDsyrkxStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDsyrkxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasDsyrkxStridedBatched_rank_1 = hipblasDsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasCsyrkxStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkxStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkxStridedBatched_full_rank = hipblasCsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasCsyrkxStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkxStridedBatched_rank_0 = hipblasCsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasCsyrkxStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCsyrkxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasCsyrkxStridedBatched_rank_1 = hipblasCsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasZsyrkxStridedBatched_full_rank(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkxStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkxStridedBatched_full_rank = hipblasZsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasZsyrkxStridedBatched_rank_0(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkxStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkxStridedBatched_rank_0 = hipblasZsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasZsyrkxStridedBatched_rank_1(handle,uplo,transA,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,stridec,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZsyrkxStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stridec
      integer(c_int),value :: batchCount
      !
      hipblasZsyrkxStridedBatched_rank_1 = hipblasZsyrkxStridedBatched_orig(handle,uplo,transA,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,stridec,batchCount)
    end function

    function hipblasSgeam_full_rank(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeam_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSgeam_full_rank = hipblasSgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasSgeam_rank_0(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeam_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float),target :: C
      integer(c_int),value :: ldc
      !
      hipblasSgeam_rank_0 = hipblasSgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasSgeam_rank_1(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeam_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSgeam_rank_1 = hipblasSgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasDgeam_full_rank(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeam_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDgeam_full_rank = hipblasDgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasDgeam_rank_0(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeam_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double),target :: C
      integer(c_int),value :: ldc
      !
      hipblasDgeam_rank_0 = hipblasDgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasDgeam_rank_1(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeam_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDgeam_rank_1 = hipblasDgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasCgeam_full_rank(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeam_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCgeam_full_rank = hipblasCgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasCgeam_rank_0(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeam_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCgeam_rank_0 = hipblasCgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasCgeam_rank_1(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeam_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCgeam_rank_1 = hipblasCgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasZgeam_full_rank(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeam_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZgeam_full_rank = hipblasZgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasZgeam_rank_0(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeam_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZgeam_rank_0 = hipblasZgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasZgeam_rank_1(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeam_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZgeam_rank_1 = hipblasZgeam_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc)
    end function

    function hipblasSgeamBatched_full_rank(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeamBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_float),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSgeamBatched_full_rank = hipblasSgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasSgeamBatched_rank_0(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeamBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSgeamBatched_rank_0 = hipblasSgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasSgeamBatched_rank_1(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeamBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSgeamBatched_rank_1 = hipblasSgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasDgeamBatched_full_rank(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeamBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_double),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDgeamBatched_full_rank = hipblasDgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasDgeamBatched_rank_0(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeamBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDgeamBatched_rank_0 = hipblasDgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasDgeamBatched_rank_1(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeamBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDgeamBatched_rank_1 = hipblasDgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasCgeamBatched_full_rank(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeamBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCgeamBatched_full_rank = hipblasCgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasCgeamBatched_rank_0(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeamBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCgeamBatched_rank_0 = hipblasCgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasCgeamBatched_rank_1(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeamBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCgeamBatched_rank_1 = hipblasCgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasZgeamBatched_full_rank(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeamBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZgeamBatched_full_rank = hipblasZgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasZgeamBatched_rank_0(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeamBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZgeamBatched_rank_0 = hipblasZgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasZgeamBatched_rank_1(handle,transa,transb,m,n,alpha,A,lda,beta,B,ldb,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeamBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZgeamBatched_rank_1 = hipblasZgeamBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,beta,c_loc(B),ldb,c_loc(C),ldc,batchCount)
    end function

    function hipblasSgeamStridedBatched_full_rank(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeamStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSgeamStridedBatched_full_rank = hipblasSgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSgeamStridedBatched_rank_0(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeamStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSgeamStridedBatched_rank_0 = hipblasSgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasSgeamStridedBatched_rank_1(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeamStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasSgeamStridedBatched_rank_1 = hipblasSgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDgeamStridedBatched_full_rank(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeamStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDgeamStridedBatched_full_rank = hipblasDgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDgeamStridedBatched_rank_0(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeamStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDgeamStridedBatched_rank_0 = hipblasDgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasDgeamStridedBatched_rank_1(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeamStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasDgeamStridedBatched_rank_1 = hipblasDgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCgeamStridedBatched_full_rank(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeamStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCgeamStridedBatched_full_rank = hipblasCgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCgeamStridedBatched_rank_0(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeamStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCgeamStridedBatched_rank_0 = hipblasCgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasCgeamStridedBatched_rank_1(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeamStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasCgeamStridedBatched_rank_1 = hipblasCgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZgeamStridedBatched_full_rank(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeamStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZgeamStridedBatched_full_rank = hipblasZgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZgeamStridedBatched_rank_0(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeamStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZgeamStridedBatched_rank_0 = hipblasZgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZgeamStridedBatched_rank_1(handle,transa,transb,m,n,alpha,A,lda,strideA,beta,B,ldb,strideB,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeamStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZgeamStridedBatched_rank_1 = hipblasZgeamStridedBatched_orig(handle,transa,transb,m,n,alpha,c_loc(A),lda,strideA,beta,c_loc(B),ldb,strideB,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasChemm_full_rank(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasChemm_full_rank = hipblasChemm_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasChemm_rank_0(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasChemm_rank_0 = hipblasChemm_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasChemm_rank_1(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasChemm_rank_1 = hipblasChemm_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZhemm_full_rank(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZhemm_full_rank = hipblasZhemm_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZhemm_rank_0(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZhemm_rank_0 = hipblasZhemm_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZhemm_rank_1(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZhemm_rank_1 = hipblasZhemm_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasChemmBatched_full_rank(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasChemmBatched_full_rank = hipblasChemmBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasChemmBatched_rank_0(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasChemmBatched_rank_0 = hipblasChemmBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasChemmBatched_rank_1(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasChemmBatched_rank_1 = hipblasChemmBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZhemmBatched_full_rank(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZhemmBatched_full_rank = hipblasZhemmBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZhemmBatched_rank_0(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZhemmBatched_rank_0 = hipblasZhemmBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZhemmBatched_rank_1(handle,side,uplo,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZhemmBatched_rank_1 = hipblasZhemmBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasChemmStridedBatched_full_rank(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasChemmStridedBatched_full_rank = hipblasChemmStridedBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasChemmStridedBatched_rank_0(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasChemmStridedBatched_rank_0 = hipblasChemmStridedBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasChemmStridedBatched_rank_1(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasChemmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasChemmStridedBatched_rank_1 = hipblasChemmStridedBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZhemmStridedBatched_full_rank(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZhemmStridedBatched_full_rank = hipblasZhemmStridedBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZhemmStridedBatched_rank_0(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZhemmStridedBatched_rank_0 = hipblasZhemmStridedBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasZhemmStridedBatched_rank_1(handle,side,uplo,n,k,alpha,A,lda,strideA,B,ldb,strideB,beta,C,ldc,strideC,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZhemmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: strideC
      integer(c_int),value :: batchCount
      !
      hipblasZhemmStridedBatched_rank_1 = hipblasZhemmStridedBatched_orig(handle,side,uplo,n,k,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,beta,c_loc(C),ldc,strideC,batchCount)
    end function

    function hipblasStrmm_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      !
      hipblasStrmm_full_rank = hipblasStrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasStrmm_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      !
      hipblasStrmm_rank_0 = hipblasStrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasStrmm_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      !
      hipblasStrmm_rank_1 = hipblasStrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasDtrmm_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      !
      hipblasDtrmm_full_rank = hipblasDtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasDtrmm_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      !
      hipblasDtrmm_rank_0 = hipblasDtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasDtrmm_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      !
      hipblasDtrmm_rank_1 = hipblasDtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasCtrmm_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      !
      hipblasCtrmm_full_rank = hipblasCtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasCtrmm_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      !
      hipblasCtrmm_rank_0 = hipblasCtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasCtrmm_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      !
      hipblasCtrmm_rank_1 = hipblasCtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasZtrmm_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      !
      hipblasZtrmm_full_rank = hipblasZtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasZtrmm_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      !
      hipblasZtrmm_rank_0 = hipblasZtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasZtrmm_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      !
      hipblasZtrmm_rank_1 = hipblasZtrmm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasStrmmBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasStrmmBatched_full_rank = hipblasStrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasStrmmBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasStrmmBatched_rank_0 = hipblasStrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasStrmmBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasStrmmBatched_rank_1 = hipblasStrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasDtrmmBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasDtrmmBatched_full_rank = hipblasDtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasDtrmmBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasDtrmmBatched_rank_0 = hipblasDtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasDtrmmBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasDtrmmBatched_rank_1 = hipblasDtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasCtrmmBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasCtrmmBatched_full_rank = hipblasCtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasCtrmmBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasCtrmmBatched_rank_0 = hipblasCtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasCtrmmBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasCtrmmBatched_rank_1 = hipblasCtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasZtrmmBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasZtrmmBatched_full_rank = hipblasZtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasZtrmmBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasZtrmmBatched_rank_0 = hipblasZtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasZtrmmBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batchCount
      !
      hipblasZtrmmBatched_rank_1 = hipblasZtrmmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batchCount)
    end function

    function hipblasStrmmStridedBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasStrmmStridedBatched_full_rank = hipblasStrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasStrmmStridedBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasStrmmStridedBatched_rank_0 = hipblasStrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasStrmmStridedBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrmmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasStrmmStridedBatched_rank_1 = hipblasStrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasDtrmmStridedBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasDtrmmStridedBatched_full_rank = hipblasDtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasDtrmmStridedBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasDtrmmStridedBatched_rank_0 = hipblasDtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasDtrmmStridedBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrmmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasDtrmmStridedBatched_rank_1 = hipblasDtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasCtrmmStridedBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasCtrmmStridedBatched_full_rank = hipblasCtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasCtrmmStridedBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasCtrmmStridedBatched_rank_0 = hipblasCtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasCtrmmStridedBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrmmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasCtrmmStridedBatched_rank_1 = hipblasCtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasZtrmmStridedBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasZtrmmStridedBatched_full_rank = hipblasZtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasZtrmmStridedBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasZtrmmStridedBatched_rank_0 = hipblasZtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasZtrmmStridedBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrmmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batchCount
      !
      hipblasZtrmmStridedBatched_rank_1 = hipblasZtrmmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batchCount)
    end function

    function hipblasStrsm_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      !
      hipblasStrsm_full_rank = hipblasStrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasStrsm_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      !
      hipblasStrsm_rank_0 = hipblasStrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasStrsm_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      !
      hipblasStrsm_rank_1 = hipblasStrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasDtrsm_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      !
      hipblasDtrsm_full_rank = hipblasDtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasDtrsm_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      !
      hipblasDtrsm_rank_0 = hipblasDtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasDtrsm_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      !
      hipblasDtrsm_rank_1 = hipblasDtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasCtrsm_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      !
      hipblasCtrsm_full_rank = hipblasCtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasCtrsm_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      !
      hipblasCtrsm_rank_0 = hipblasCtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasCtrsm_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      !
      hipblasCtrsm_rank_1 = hipblasCtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasZtrsm_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      !
      hipblasZtrsm_full_rank = hipblasZtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasZtrsm_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      !
      hipblasZtrsm_rank_0 = hipblasZtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasZtrsm_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      !
      hipblasZtrsm_rank_1 = hipblasZtrsm_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb)
    end function

    function hipblasStrsmBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasStrsmBatched_full_rank = hipblasStrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasStrsmBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasStrsmBatched_rank_0 = hipblasStrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasStrsmBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasStrsmBatched_rank_1 = hipblasStrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasDtrsmBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasDtrsmBatched_full_rank = hipblasDtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasDtrsmBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasDtrsmBatched_rank_0 = hipblasDtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasDtrsmBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasDtrsmBatched_rank_1 = hipblasDtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasCtrsmBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasCtrsmBatched_full_rank = hipblasCtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasCtrsmBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasCtrsmBatched_rank_0 = hipblasCtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasCtrsmBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasCtrsmBatched_rank_1 = hipblasCtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasZtrsmBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasZtrsmBatched_full_rank = hipblasZtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasZtrsmBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasZtrsmBatched_rank_0 = hipblasZtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasZtrsmBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,B,ldb,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: batch_count
      !
      hipblasZtrsmBatched_rank_1 = hipblasZtrsmBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,c_loc(B),ldb,batch_count)
    end function

    function hipblasStrsmStridedBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasStrsmStridedBatched_full_rank = hipblasStrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasStrsmStridedBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasStrsmStridedBatched_rank_0 = hipblasStrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasStrsmStridedBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrsmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasStrsmStridedBatched_rank_1 = hipblasStrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasDtrsmStridedBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasDtrsmStridedBatched_full_rank = hipblasDtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasDtrsmStridedBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasDtrsmStridedBatched_rank_0 = hipblasDtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasDtrsmStridedBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrsmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasDtrsmStridedBatched_rank_1 = hipblasDtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasCtrsmStridedBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasCtrsmStridedBatched_full_rank = hipblasCtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasCtrsmStridedBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasCtrsmStridedBatched_rank_0 = hipblasCtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasCtrsmStridedBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrsmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasCtrsmStridedBatched_rank_1 = hipblasCtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasZtrsmStridedBatched_full_rank(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasZtrsmStridedBatched_full_rank = hipblasZtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasZtrsmStridedBatched_rank_0(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasZtrsmStridedBatched_rank_0 = hipblasZtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasZtrsmStridedBatched_rank_1(handle,side,uplo,transA,diag,m,n,alpha,A,lda,strideA,B,ldb,strideB,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrsmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_OP_N)),value :: transA
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      integer(c_int),value :: batch_count
      !
      hipblasZtrsmStridedBatched_rank_1 = hipblasZtrsmStridedBatched_orig(handle,side,uplo,transA,diag,m,n,alpha,c_loc(A),lda,strideA,c_loc(B),ldb,strideB,batch_count)
    end function

    function hipblasStrtri_full_rank(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtri_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasStrtri_full_rank = hipblasStrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasStrtri_rank_0(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtri_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasStrtri_rank_0 = hipblasStrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasStrtri_rank_1(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtri_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasStrtri_rank_1 = hipblasStrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasDtrtri_full_rank(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtri_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasDtrtri_full_rank = hipblasDtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasDtrtri_rank_0(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtri_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasDtrtri_rank_0 = hipblasDtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasDtrtri_rank_1(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtri_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasDtrtri_rank_1 = hipblasDtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasCtrtri_full_rank(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtri_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasCtrtri_full_rank = hipblasCtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasCtrtri_rank_0(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtri_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasCtrtri_rank_0 = hipblasCtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasCtrtri_rank_1(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtri_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasCtrtri_rank_1 = hipblasCtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasZtrtri_full_rank(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtri_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasZtrtri_full_rank = hipblasZtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasZtrtri_rank_0(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtri_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasZtrtri_rank_0 = hipblasZtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasZtrtri_rank_1(handle,uplo,diag,n,A,lda,invA,ldinvA)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtri_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      !
      hipblasZtrtri_rank_1 = hipblasZtrtri_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA)
    end function

    function hipblasStrtriBatched_full_rank(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtriBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:,:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasStrtriBatched_full_rank = hipblasStrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasStrtriBatched_rank_0(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtriBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasStrtriBatched_rank_0 = hipblasStrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasStrtriBatched_rank_1(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtriBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasStrtriBatched_rank_1 = hipblasStrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasDtrtriBatched_full_rank(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtriBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:,:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasDtrtriBatched_full_rank = hipblasDtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasDtrtriBatched_rank_0(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtriBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasDtrtriBatched_rank_0 = hipblasDtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasDtrtriBatched_rank_1(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtriBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasDtrtriBatched_rank_1 = hipblasDtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasCtrtriBatched_full_rank(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtriBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasCtrtriBatched_full_rank = hipblasCtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasCtrtriBatched_rank_0(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtriBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasCtrtriBatched_rank_0 = hipblasCtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasCtrtriBatched_rank_1(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtriBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasCtrtriBatched_rank_1 = hipblasCtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasZtrtriBatched_full_rank(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtriBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasZtrtriBatched_full_rank = hipblasZtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasZtrtriBatched_rank_0(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtriBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasZtrtriBatched_rank_0 = hipblasZtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasZtrtriBatched_rank_1(handle,uplo,diag,n,A,lda,invA,ldinvA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtriBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: batch_count
      !
      hipblasZtrtriBatched_rank_1 = hipblasZtrtriBatched_orig(handle,uplo,diag,n,c_loc(A),lda,c_loc(invA),ldinvA,batch_count)
    end function

    function hipblasStrtriStridedBatched_full_rank(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtriStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_float),target,dimension(:,:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasStrtriStridedBatched_full_rank = hipblasStrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasStrtriStridedBatched_rank_0(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtriStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_float),target :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasStrtriStridedBatched_rank_0 = hipblasStrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasStrtriStridedBatched_rank_1(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasStrtriStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_float),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasStrtriStridedBatched_rank_1 = hipblasStrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasDtrtriStridedBatched_full_rank(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtriStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_double),target,dimension(:,:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasDtrtriStridedBatched_full_rank = hipblasDtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasDtrtriStridedBatched_rank_0(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtriStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_double),target :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasDtrtriStridedBatched_rank_0 = hipblasDtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasDtrtriStridedBatched_rank_1(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDtrtriStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_double),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasDtrtriStridedBatched_rank_1 = hipblasDtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasCtrtriStridedBatched_full_rank(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtriStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_float_complex),target,dimension(:,:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasCtrtriStridedBatched_full_rank = hipblasCtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasCtrtriStridedBatched_rank_0(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtriStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_float_complex),target :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasCtrtriStridedBatched_rank_0 = hipblasCtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasCtrtriStridedBatched_rank_1(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCtrtriStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_float_complex),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasCtrtriStridedBatched_rank_1 = hipblasCtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasZtrtriStridedBatched_full_rank(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtriStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_double_complex),target,dimension(:,:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasZtrtriStridedBatched_full_rank = hipblasZtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasZtrtriStridedBatched_rank_0(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtriStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_double_complex),target :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasZtrtriStridedBatched_rank_0 = hipblasZtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasZtrtriStridedBatched_rank_1(handle,uplo,diag,n,A,lda,stride_A,invA,ldinvA,stride_invA,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZtrtriStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_FILL_MODE_UPPER)),value :: uplo
      integer(kind(HIPBLAS_DIAG_NON_UNIT)),value :: diag
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_double_complex),target,dimension(:) :: invA
      integer(c_int),value :: ldinvA
      integer(c_int),value :: stride_invA
      integer(c_int),value :: batch_count
      !
      hipblasZtrtriStridedBatched_rank_1 = hipblasZtrtriStridedBatched_orig(handle,uplo,diag,n,c_loc(A),lda,stride_A,c_loc(invA),ldinvA,stride_invA,batch_count)
    end function

    function hipblasSdgmm_full_rank(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSdgmm_full_rank = hipblasSdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasSdgmm_rank_0(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: C
      integer(c_int),value :: ldc
      !
      hipblasSdgmm_rank_0 = hipblasSdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasSdgmm_rank_1(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSdgmm_rank_1 = hipblasSdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasDdgmm_full_rank(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDdgmm_full_rank = hipblasDdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasDdgmm_rank_0(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: C
      integer(c_int),value :: ldc
      !
      hipblasDdgmm_rank_0 = hipblasDdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasDdgmm_rank_1(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDdgmm_rank_1 = hipblasDdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasCdgmm_full_rank(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCdgmm_full_rank = hipblasCdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasCdgmm_rank_0(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCdgmm_rank_0 = hipblasCdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasCdgmm_rank_1(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCdgmm_rank_1 = hipblasCdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasZdgmm_full_rank(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZdgmm_full_rank = hipblasZdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasZdgmm_rank_0(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZdgmm_rank_0 = hipblasZdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasZdgmm_rank_1(handle,side,m,n,A,lda,x,incx,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZdgmm_rank_1 = hipblasZdgmm_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc)
    end function

    function hipblasSdgmmBatched_full_rank(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasSdgmmBatched_full_rank = hipblasSdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasSdgmmBatched_rank_0(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: x
      integer(c_int),value :: incx
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasSdgmmBatched_rank_0 = hipblasSdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasSdgmmBatched_rank_1(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasSdgmmBatched_rank_1 = hipblasSdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasDdgmmBatched_full_rank(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasDdgmmBatched_full_rank = hipblasDdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasDdgmmBatched_rank_0(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: x
      integer(c_int),value :: incx
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasDdgmmBatched_rank_0 = hipblasDdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasDdgmmBatched_rank_1(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasDdgmmBatched_rank_1 = hipblasDdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasCdgmmBatched_full_rank(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasCdgmmBatched_full_rank = hipblasCdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasCdgmmBatched_rank_0(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasCdgmmBatched_rank_0 = hipblasCdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasCdgmmBatched_rank_1(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasCdgmmBatched_rank_1 = hipblasCdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasZdgmmBatched_full_rank(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasZdgmmBatched_full_rank = hipblasZdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasZdgmmBatched_rank_0(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasZdgmmBatched_rank_0 = hipblasZdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasZdgmmBatched_rank_1(handle,side,m,n,A,lda,x,incx,C,ldc,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batch_count
      !
      hipblasZdgmmBatched_rank_1 = hipblasZdgmmBatched_orig(handle,side,m,n,c_loc(A),lda,c_loc(x),incx,c_loc(C),ldc,batch_count)
    end function

    function hipblasSdgmmStridedBatched_full_rank(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasSdgmmStridedBatched_full_rank = hipblasSdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasSdgmmStridedBatched_rank_0(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_float),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasSdgmmStridedBatched_rank_0 = hipblasSdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasSdgmmStridedBatched_rank_1(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSdgmmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_float),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasSdgmmStridedBatched_rank_1 = hipblasSdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasDdgmmStridedBatched_full_rank(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasDdgmmStridedBatched_full_rank = hipblasDdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasDdgmmStridedBatched_rank_0(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_double),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasDdgmmStridedBatched_rank_0 = hipblasDdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasDdgmmStridedBatched_rank_1(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDdgmmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      real(c_double),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasDdgmmStridedBatched_rank_1 = hipblasDdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasCdgmmStridedBatched_full_rank(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasCdgmmStridedBatched_full_rank = hipblasCdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasCdgmmStridedBatched_rank_0(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_float_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasCdgmmStridedBatched_rank_0 = hipblasCdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasCdgmmStridedBatched_rank_1(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCdgmmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_float_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasCdgmmStridedBatched_rank_1 = hipblasCdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasZdgmmStridedBatched_full_rank(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasZdgmmStridedBatched_full_rank = hipblasZdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasZdgmmStridedBatched_rank_0(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_double_complex),target :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasZdgmmStridedBatched_rank_0 = hipblasZdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasZdgmmStridedBatched_rank_1(handle,side,m,n,A,lda,stride_A,x,incx,stride_x,C,ldc,stride_C,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZdgmmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_SIDE_LEFT)),value :: side
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: stride_A
      complex(c_double_complex),target,dimension(:) :: x
      integer(c_int),value :: incx
      integer(c_int),value :: stride_x
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: stride_C
      integer(c_int),value :: batch_count
      !
      hipblasZdgmmStridedBatched_rank_1 = hipblasZdgmmStridedBatched_orig(handle,side,m,n,c_loc(A),lda,stride_A,c_loc(x),incx,stride_x,c_loc(C),ldc,stride_C,batch_count)
    end function

    function hipblasSgetrf_full_rank(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrf_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasSgetrf_full_rank = hipblasSgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasSgetrf_rank_0(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrf_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasSgetrf_rank_0 = hipblasSgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasSgetrf_rank_1(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrf_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasSgetrf_rank_1 = hipblasSgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasDgetrf_full_rank(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrf_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasDgetrf_full_rank = hipblasDgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasDgetrf_rank_0(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrf_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasDgetrf_rank_0 = hipblasDgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasDgetrf_rank_1(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrf_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasDgetrf_rank_1 = hipblasDgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasCgetrf_full_rank(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrf_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasCgetrf_full_rank = hipblasCgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasCgetrf_rank_0(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrf_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasCgetrf_rank_0 = hipblasCgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasCgetrf_rank_1(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrf_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasCgetrf_rank_1 = hipblasCgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasZgetrf_full_rank(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrf_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasZgetrf_full_rank = hipblasZgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasZgetrf_rank_0(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrf_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasZgetrf_rank_0 = hipblasZgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasZgetrf_rank_1(handle,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrf_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasZgetrf_rank_1 = hipblasZgetrf_orig(handle,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasSgetrfBatched_full_rank(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrfBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrfBatched_full_rank = hipblasSgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasSgetrfBatched_rank_0(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrfBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrfBatched_rank_0 = hipblasSgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasSgetrfBatched_rank_1(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrfBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrfBatched_rank_1 = hipblasSgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasDgetrfBatched_full_rank(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrfBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrfBatched_full_rank = hipblasDgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasDgetrfBatched_rank_0(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrfBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrfBatched_rank_0 = hipblasDgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasDgetrfBatched_rank_1(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrfBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrfBatched_rank_1 = hipblasDgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasCgetrfBatched_full_rank(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrfBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrfBatched_full_rank = hipblasCgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasCgetrfBatched_rank_0(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrfBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrfBatched_rank_0 = hipblasCgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasCgetrfBatched_rank_1(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrfBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrfBatched_rank_1 = hipblasCgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasZgetrfBatched_full_rank(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrfBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrfBatched_full_rank = hipblasZgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasZgetrfBatched_rank_0(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrfBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrfBatched_rank_0 = hipblasZgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasZgetrfBatched_rank_1(handle,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrfBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrfBatched_rank_1 = hipblasZgetrfBatched_orig(handle,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasSgetrfStridedBatched_full_rank(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrfStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrfStridedBatched_full_rank = hipblasSgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasSgetrfStridedBatched_rank_0(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrfStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrfStridedBatched_rank_0 = hipblasSgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasSgetrfStridedBatched_rank_1(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrfStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrfStridedBatched_rank_1 = hipblasSgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasDgetrfStridedBatched_full_rank(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrfStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrfStridedBatched_full_rank = hipblasDgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasDgetrfStridedBatched_rank_0(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrfStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrfStridedBatched_rank_0 = hipblasDgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasDgetrfStridedBatched_rank_1(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrfStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrfStridedBatched_rank_1 = hipblasDgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasCgetrfStridedBatched_full_rank(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrfStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrfStridedBatched_full_rank = hipblasCgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasCgetrfStridedBatched_rank_0(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrfStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrfStridedBatched_rank_0 = hipblasCgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasCgetrfStridedBatched_rank_1(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrfStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrfStridedBatched_rank_1 = hipblasCgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasZgetrfStridedBatched_full_rank(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrfStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrfStridedBatched_full_rank = hipblasZgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasZgetrfStridedBatched_rank_0(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrfStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrfStridedBatched_rank_0 = hipblasZgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasZgetrfStridedBatched_rank_1(handle,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrfStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrfStridedBatched_rank_1 = hipblasZgetrfStridedBatched_orig(handle,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasSgetrs_full_rank(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrs_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasSgetrs_full_rank = hipblasSgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasSgetrs_rank_0(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrs_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasSgetrs_rank_0 = hipblasSgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasSgetrs_rank_1(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrs_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasSgetrs_rank_1 = hipblasSgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasDgetrs_full_rank(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrs_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasDgetrs_full_rank = hipblasDgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasDgetrs_rank_0(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrs_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasDgetrs_rank_0 = hipblasDgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasDgetrs_rank_1(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrs_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasDgetrs_rank_1 = hipblasDgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasCgetrs_full_rank(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrs_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasCgetrs_full_rank = hipblasCgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasCgetrs_rank_0(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrs_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasCgetrs_rank_0 = hipblasCgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasCgetrs_rank_1(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrs_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasCgetrs_rank_1 = hipblasCgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasZgetrs_full_rank(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrs_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasZgetrs_full_rank = hipblasZgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasZgetrs_rank_0(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrs_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasZgetrs_rank_0 = hipblasZgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasZgetrs_rank_1(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrs_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      !
      hipblasZgetrs_rank_1 = hipblasZgetrs_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo)
    end function

    function hipblasSgetrsBatched_full_rank(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrsBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrsBatched_full_rank = hipblasSgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasSgetrsBatched_rank_0(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrsBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrsBatched_rank_0 = hipblasSgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasSgetrsBatched_rank_1(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrsBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrsBatched_rank_1 = hipblasSgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasDgetrsBatched_full_rank(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrsBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrsBatched_full_rank = hipblasDgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasDgetrsBatched_rank_0(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrsBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrsBatched_rank_0 = hipblasDgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasDgetrsBatched_rank_1(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrsBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrsBatched_rank_1 = hipblasDgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasCgetrsBatched_full_rank(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrsBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrsBatched_full_rank = hipblasCgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasCgetrsBatched_rank_0(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrsBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrsBatched_rank_0 = hipblasCgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasCgetrsBatched_rank_1(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrsBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrsBatched_rank_1 = hipblasCgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasZgetrsBatched_full_rank(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrsBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrsBatched_full_rank = hipblasZgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasZgetrsBatched_rank_0(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrsBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrsBatched_rank_0 = hipblasZgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasZgetrsBatched_rank_1(handle,trans,n,nrhs,A,lda,ipiv,B,ldb,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrsBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrsBatched_rank_1 = hipblasZgetrsBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,ipiv,c_loc(B),ldb,myInfo,batch_count)
    end function

    function hipblasSgetrsStridedBatched_full_rank(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrsStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrsStridedBatched_full_rank = hipblasSgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasSgetrsStridedBatched_rank_0(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrsStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrsStridedBatched_rank_0 = hipblasSgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasSgetrsStridedBatched_rank_1(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetrsStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetrsStridedBatched_rank_1 = hipblasSgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasDgetrsStridedBatched_full_rank(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrsStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrsStridedBatched_full_rank = hipblasDgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasDgetrsStridedBatched_rank_0(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrsStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrsStridedBatched_rank_0 = hipblasDgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasDgetrsStridedBatched_rank_1(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetrsStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetrsStridedBatched_rank_1 = hipblasDgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasCgetrsStridedBatched_full_rank(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrsStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrsStridedBatched_full_rank = hipblasCgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasCgetrsStridedBatched_rank_0(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrsStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrsStridedBatched_rank_0 = hipblasCgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasCgetrsStridedBatched_rank_1(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetrsStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetrsStridedBatched_rank_1 = hipblasCgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasZgetrsStridedBatched_full_rank(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrsStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrsStridedBatched_full_rank = hipblasZgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasZgetrsStridedBatched_rank_0(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrsStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrsStridedBatched_rank_0 = hipblasZgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasZgetrsStridedBatched_rank_1(handle,trans,n,nrhs,A,lda,strideA,ipiv,strideP,B,ldb,strideB,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetrsStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: trans
      integer(c_int),value :: n
      integer(c_int),value :: nrhs
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_int),value :: strideB
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetrsStridedBatched_rank_1 = hipblasZgetrsStridedBatched_orig(handle,trans,n,nrhs,c_loc(A),lda,strideA,ipiv,strideP,c_loc(B),ldb,strideB,myInfo,batch_count)
    end function

    function hipblasSgetriBatched_full_rank(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetriBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetriBatched_full_rank = hipblasSgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasSgetriBatched_rank_0(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetriBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetriBatched_rank_0 = hipblasSgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasSgetriBatched_rank_1(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgetriBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgetriBatched_rank_1 = hipblasSgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasDgetriBatched_full_rank(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetriBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetriBatched_full_rank = hipblasDgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasDgetriBatched_rank_0(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetriBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetriBatched_rank_0 = hipblasDgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasDgetriBatched_rank_1(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgetriBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgetriBatched_rank_1 = hipblasDgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasCgetriBatched_full_rank(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetriBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetriBatched_full_rank = hipblasCgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasCgetriBatched_rank_0(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetriBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetriBatched_rank_0 = hipblasCgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasCgetriBatched_rank_1(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgetriBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgetriBatched_rank_1 = hipblasCgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasZgetriBatched_full_rank(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetriBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetriBatched_full_rank = hipblasZgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasZgetriBatched_rank_0(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetriBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetriBatched_rank_0 = hipblasZgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasZgetriBatched_rank_1(handle,n,A,lda,ipiv,C,ldc,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgetriBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgetriBatched_rank_1 = hipblasZgetriBatched_orig(handle,n,c_loc(A),lda,ipiv,c_loc(C),ldc,myInfo,batch_count)
    end function

    function hipblasSgeqrf_full_rank(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrf_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasSgeqrf_full_rank = hipblasSgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasSgeqrf_rank_0(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrf_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasSgeqrf_rank_0 = hipblasSgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasSgeqrf_rank_1(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrf_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasSgeqrf_rank_1 = hipblasSgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasDgeqrf_full_rank(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrf_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasDgeqrf_full_rank = hipblasDgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasDgeqrf_rank_0(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrf_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasDgeqrf_rank_0 = hipblasDgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasDgeqrf_rank_1(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrf_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasDgeqrf_rank_1 = hipblasDgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasCgeqrf_full_rank(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrf_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasCgeqrf_full_rank = hipblasCgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasCgeqrf_rank_0(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrf_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasCgeqrf_rank_0 = hipblasCgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasCgeqrf_rank_1(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrf_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasCgeqrf_rank_1 = hipblasCgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasZgeqrf_full_rank(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrf_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasZgeqrf_full_rank = hipblasZgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasZgeqrf_rank_0(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrf_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasZgeqrf_rank_0 = hipblasZgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasZgeqrf_rank_1(handle,m,n,A,lda,ipiv,myInfo)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrf_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr),value :: ipiv
      type(c_ptr),value :: myInfo
      !
      hipblasZgeqrf_rank_1 = hipblasZgeqrf_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo)
    end function

    function hipblasSgeqrfBatched_full_rank(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrfBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgeqrfBatched_full_rank = hipblasSgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasSgeqrfBatched_rank_0(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrfBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgeqrfBatched_rank_0 = hipblasSgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasSgeqrfBatched_rank_1(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrfBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgeqrfBatched_rank_1 = hipblasSgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasDgeqrfBatched_full_rank(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrfBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgeqrfBatched_full_rank = hipblasDgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasDgeqrfBatched_rank_0(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrfBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgeqrfBatched_rank_0 = hipblasDgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasDgeqrfBatched_rank_1(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrfBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgeqrfBatched_rank_1 = hipblasDgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasCgeqrfBatched_full_rank(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrfBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgeqrfBatched_full_rank = hipblasCgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasCgeqrfBatched_rank_0(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrfBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgeqrfBatched_rank_0 = hipblasCgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasCgeqrfBatched_rank_1(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrfBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgeqrfBatched_rank_1 = hipblasCgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasZgeqrfBatched_full_rank(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrfBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgeqrfBatched_full_rank = hipblasZgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasZgeqrfBatched_rank_0(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrfBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgeqrfBatched_rank_0 = hipblasZgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasZgeqrfBatched_rank_1(handle,m,n,A,lda,ipiv,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrfBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      type(c_ptr) :: ipiv
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgeqrfBatched_rank_1 = hipblasZgeqrfBatched_orig(handle,m,n,c_loc(A),lda,ipiv,myInfo,batch_count)
    end function

    function hipblasSgeqrfStridedBatched_full_rank(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrfStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgeqrfStridedBatched_full_rank = hipblasSgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasSgeqrfStridedBatched_rank_0(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrfStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgeqrfStridedBatched_rank_0 = hipblasSgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasSgeqrfStridedBatched_rank_1(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgeqrfStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasSgeqrfStridedBatched_rank_1 = hipblasSgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasDgeqrfStridedBatched_full_rank(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrfStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgeqrfStridedBatched_full_rank = hipblasDgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasDgeqrfStridedBatched_rank_0(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrfStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgeqrfStridedBatched_rank_0 = hipblasDgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasDgeqrfStridedBatched_rank_1(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgeqrfStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasDgeqrfStridedBatched_rank_1 = hipblasDgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasCgeqrfStridedBatched_full_rank(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrfStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgeqrfStridedBatched_full_rank = hipblasCgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasCgeqrfStridedBatched_rank_0(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrfStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgeqrfStridedBatched_rank_0 = hipblasCgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasCgeqrfStridedBatched_rank_1(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgeqrfStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasCgeqrfStridedBatched_rank_1 = hipblasCgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasZgeqrfStridedBatched_full_rank(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrfStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgeqrfStridedBatched_full_rank = hipblasZgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasZgeqrfStridedBatched_rank_0(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrfStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgeqrfStridedBatched_rank_0 = hipblasZgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasZgeqrfStridedBatched_rank_1(handle,m,n,A,lda,strideA,ipiv,strideP,myInfo,batch_count)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgeqrfStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(c_int),value :: m
      integer(c_int),value :: n
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_int),value :: strideA
      type(c_ptr),value :: ipiv
      integer(c_int),value :: strideP
      type(c_ptr),value :: myInfo
      integer(c_int),value :: batch_count
      !
      hipblasZgeqrfStridedBatched_rank_1 = hipblasZgeqrfStridedBatched_orig(handle,m,n,c_loc(A),lda,strideA,ipiv,strideP,myInfo,batch_count)
    end function

    function hipblasSgemm_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSgemm_full_rank = hipblasSgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSgemm_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      !
      hipblasSgemm_rank_0 = hipblasSgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSgemm_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasSgemm_rank_1 = hipblasSgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDgemm_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDgemm_full_rank = hipblasDgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDgemm_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      !
      hipblasDgemm_rank_0 = hipblasDgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasDgemm_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasDgemm_rank_1 = hipblasDgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCgemm_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCgemm_full_rank = hipblasCgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCgemm_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasCgemm_rank_0 = hipblasCgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasCgemm_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasCgemm_rank_1 = hipblasCgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZgemm_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemm_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZgemm_full_rank = hipblasZgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZgemm_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemm_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      !
      hipblasZgemm_rank_0 = hipblasZgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasZgemm_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemm_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      !
      hipblasZgemm_rank_1 = hipblasZgemm_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc)
    end function

    function hipblasSgemmBatched_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSgemmBatched_full_rank = hipblasSgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSgemmBatched_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      real(c_float),target :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSgemmBatched_rank_0 = hipblasSgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSgemmBatched_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasSgemmBatched_rank_1 = hipblasSgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDgemmBatched_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDgemmBatched_full_rank = hipblasDgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDgemmBatched_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      real(c_double),target :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDgemmBatched_rank_0 = hipblasDgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasDgemmBatched_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasDgemmBatched_rank_1 = hipblasDgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCgemmBatched_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCgemmBatched_full_rank = hipblasCgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCgemmBatched_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCgemmBatched_rank_0 = hipblasCgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasCgemmBatched_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasCgemmBatched_rank_1 = hipblasCgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZgemmBatched_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemmBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:,:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:,:,:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:,:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZgemmBatched_full_rank = hipblasZgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZgemmBatched_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemmBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZgemmBatched_rank_0 = hipblasZgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasZgemmBatched_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemmBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_int),value :: batchCount
      !
      hipblasZgemmBatched_rank_1 = hipblasZgemmBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,c_loc(B),ldb,beta,c_loc(C),ldc,batchCount)
    end function

    function hipblasSgemmStridedBatched_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      real(c_float),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      real(c_float) :: beta
      real(c_float),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasSgemmStridedBatched_full_rank = hipblasSgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasSgemmStridedBatched_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      real(c_float),target :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      real(c_float) :: beta
      real(c_float),target :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasSgemmStridedBatched_rank_0 = hipblasSgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasSgemmStridedBatched_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasSgemmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_float) :: alpha
      real(c_float),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      real(c_float),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      real(c_float) :: beta
      real(c_float),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasSgemmStridedBatched_rank_1 = hipblasSgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasDgemmStridedBatched_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      real(c_double),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      real(c_double) :: beta
      real(c_double),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasDgemmStridedBatched_full_rank = hipblasDgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasDgemmStridedBatched_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      real(c_double),target :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      real(c_double) :: beta
      real(c_double),target :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasDgemmStridedBatched_rank_0 = hipblasDgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasDgemmStridedBatched_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasDgemmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      real(c_double) :: alpha
      real(c_double),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      real(c_double),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      real(c_double) :: beta
      real(c_double),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasDgemmStridedBatched_rank_1 = hipblasDgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasCgemmStridedBatched_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      complex(c_float_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasCgemmStridedBatched_full_rank = hipblasCgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasCgemmStridedBatched_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      complex(c_float_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasCgemmStridedBatched_rank_0 = hipblasCgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasCgemmStridedBatched_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasCgemmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_float_complex) :: alpha
      complex(c_float_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      complex(c_float_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      complex(c_float_complex) :: beta
      complex(c_float_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasCgemmStridedBatched_rank_1 = hipblasCgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasZgemmStridedBatched_full_rank(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemmStridedBatched_full_rank
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:,:) :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      complex(c_double_complex),target,dimension(:,:) :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:,:) :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasZgemmStridedBatched_full_rank = hipblasZgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasZgemmStridedBatched_rank_0(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemmStridedBatched_rank_0
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      complex(c_double_complex),target :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasZgemmStridedBatched_rank_0 = hipblasZgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

    function hipblasZgemmStridedBatched_rank_1(handle,transa,transb,m,n,k,alpha,A,lda,bsa,B,ldb,bsb,beta,C,ldc,bsc,batchCount)
      use iso_c_binding
      use hipfort_hipblas_enums
      implicit none
      integer(kind(HIPBLAS_STATUS_SUCCESS)) :: hipblasZgemmStridedBatched_rank_1
      type(c_ptr),value :: handle
      integer(kind(HIPBLAS_OP_N)),value :: transa
      integer(kind(HIPBLAS_OP_N)),value :: transb
      integer(c_int),value :: m
      integer(c_int),value :: n
      integer(c_int),value :: k
      complex(c_double_complex) :: alpha
      complex(c_double_complex),target,dimension(:) :: A
      integer(c_int),value :: lda
      integer(c_long_long),value :: bsa
      complex(c_double_complex),target,dimension(:) :: B
      integer(c_int),value :: ldb
      integer(c_long_long),value :: bsb
      complex(c_double_complex) :: beta
      complex(c_double_complex),target,dimension(:) :: C
      integer(c_int),value :: ldc
      integer(c_long_long),value :: bsc
      integer(c_int),value :: batchCount
      !
      hipblasZgemmStridedBatched_rank_1 = hipblasZgemmStridedBatched_orig(handle,transa,transb,m,n,k,alpha,c_loc(A),lda,bsa,c_loc(B),ldb,bsb,beta,c_loc(C),ldc,bsc,batchCount)
    end function

  
#endif
end module hipfort_hipblas